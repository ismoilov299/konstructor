import logging

from aiogram.types import KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, ReplyKeyboardMarkup
from asgiref.sync import sync_to_async

from modul.clientbot import strings, shortcuts
from modul.clientbot.shortcuts import get_current_bot, get_bot_by_token
from modul.models import Bot
from aiogram import Bot as CBot
from modul.config import settings_conf

logger = logging.getLogger(__name__)

MUSIC_MENU_BUTTONS_TEXT = [
    ("üéô–õ—É—á—à–∞—è –º—É–∑—ã–∫–∞"),
    ("üéß–ù–æ–≤—ã–µ –ø–µ—Å–Ω–∏"),
    ("üî•–ß–∞—Ä—Ç –ú—É–∑—ã–∫–∞"),
    ("üîç–ü–æ–∏—Å–∫")
]

CHATGPT_BUTTONS_TEXT = [
    ("‚òÅ –ß–∞—Ç —Å GPT-4"),
    ("‚òÅ –ß–∞—Ç —Å GPT-3.5"),
    ("üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ [DALL-E]"),
    ("üó£Ô∏è–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫"),
    ("üó®Ô∏è –¢–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ"),
    ("üîâ –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç"),
    ("üé• –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —é—Ç—É–±"),
    ("üîç –ì—É–≥–ª –ø–æ–∏—Å–∫"),
    ("üîã –ë–∞–ª–∞–Ω—Å"),
    ("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
]

DAVINCI_BUTTONS_TEXT = [
    ("ü´∞ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞"),
    ("üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞"),
    ("üöÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"),
    ("üëë Boost"),
]




# ANON_MENU_BUTTONS_TEXT = [
#     ("‚òï –ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"),
#     ("üç™ –ü—Ä–æ—Ñ–∏–ª—å"),
#     "‚≠ê VIP",
# ]


def cancel():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text=("–û—Ç–º–µ–Ω–∞")))
    return builder.as_markup(resize_keyboard=True)


def cancel_or_skip():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=("–û—Ç–º–µ–Ω–∞")),
        KeyboardButton(text=("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")),
        width=1
    )
    return builder.as_markup(resize_keyboard=True)


def yes_no():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=("–î–∞")),
        KeyboardButton(text=("–ù–µ—Ç")),
        width=2
    )
    return builder.as_markup(resize_keyboard=True)


async def turn_bot_data(attr: str, bot: CBot):
    bot = await get_current_bot()
    setattr(bot, attr, not getattr(bot, attr))
    await bot.save()


@sync_to_async
def get_bot_owner(bot):
    return bot.owner


@sync_to_async
def owner_bots_filter(owner):
    return owner.bots.filter(owner=owner, unauthorized=False).count()


async def gen_buttons(current_bot: Bot, uid: int):
    btns = []
    # Avval Django modeldan bot ma'lumotlarini olish
    bot_db = await shortcuts.get_bot(current_bot)
    if not bot_db:
        logger.error(f"Bot not found in database: {current_bot.token}")
        return btns

    # Endi bot_db orqali attributlarga murojaat qilamiz
    if bot_db.enable_promotion:
        btns.append(("‚≠êÔ∏è –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"))
        btns.append(("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
        btns.append(("üí∞ –ë–∞–ª–∞–Ω—Å"))
        btns.append(("üë§ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"))
        btns.append(("üåç –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫"))

    # enable_music o'chirilgan - comment qilamiz
    # if bot_db.enable_music:
    #     if have_one_module(bot_db, "music"):
    #         [btns.append(i) for i in MUSIC_MENU_BUTTONS_TEXT]
    #     else:
    #         btns.append(("üéß –ú—É–∑—ã–∫–∞"))

    if bot_db.enable_download:
        if not have_one_module(bot_db, "download"):
            btns.append(("üé• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ"))
    if bot_db.enable_chatgpt:
        pass
    if bot_db.enable_leo:
        btns.append(("ü´∞ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞"))

    # enable_horoscope -> enable_davinci o'zgartirildi
    if bot_db.enable_davinci:
        if have_one_module(bot_db, "davinci"):
            [btns.append(i) for i in DAVINCI_BUTTONS_TEXT]
        else:
            btns.append(("ü´∞ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞"))

    if bot_db.enable_promotion:
        btns.append(("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    if bot_db.enable_refs:
        btns.append(("üí∏–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"))
        btns.append(("üì±–ü—Ä–æ—Ñ–∏–ª—å"))
        btns.append(("‚ÑπÔ∏è–ò–Ω—Ñ–æ"))
    if bot_db.enable_anon:
        btns.append(("üöÄ–ù–∞—á–∞—Ç—å"))
        btns.append(("üëã–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"))
        btns.append(("‚≠êÔ∏è–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))

    # enable_refs bo'lganida "üí∏–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å" tugmasini ikki marta qo'shmaslik uchun
    if not bot_db.enable_refs:
        btns.append(("üí∏–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"))

    return btns


# have_one_module funksiyasini ham tuzatamiz
def have_one_module(bot_db, module_name: str):
    modules = [
        "enable_promotion",
        # "enable_music",  # O'chirilgan
        "enable_download",
        "enable_leo",
        "enable_chatgpt",
        "enable_davinci",  # enable_horoscope o'rniga
        "enable_anon",
        # "enable_sms",  # O'chirilgan
    ]
    if getattr(bot_db, f"enable_{module_name}"):
        enabled_count = sum(1 for x in modules if getattr(bot_db, x, False))
        return enabled_count == 1
    return False


async def main_menu(uid: int, bot: Bot):
    builder = ReplyKeyboardBuilder()
    btns = await gen_buttons(bot, uid)

    for btn in btns:
        builder.add(KeyboardButton(text=btn))

    builder.adjust(2, 1, 1)
    return builder.as_markup(resize_keyboard=True)


async def refs_kb():
    buttons = [
        [KeyboardButton(text="üí∏–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"), ]
    ]
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    return kb


def confirm():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=("–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")),
        KeyboardButton(text=("–û—Ç–º–µ–Ω–∞")),
        width=1
    )
    return builder.as_markup(resize_keyboard=True)


def amount_kb():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text=strings.CANCEL), width=1)
    builder.row(
        KeyboardButton(text="50"),
        KeyboardButton(text="100"),
        KeyboardButton(text="250"),
        KeyboardButton(text="500"),
        KeyboardButton(text="1000"),
        KeyboardButton(text="5000"),
        width=3
    )
    return builder.as_markup(resize_keyboard=True)


def withdraw_confirmation():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏")),
        KeyboardButton(text=strings.CANCEL),
        width=1
    )
    return builder.as_markup(resize_keyboard=True)


async def download_main_menu() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=("–ù–∞–∑–∞–¥")),
        width=1
    )
    return builder.as_markup(resize_keyboard=True)


async def ai_main_menu():
    keyboard = ReplyKeyboardBuilder()
    keyboard.row(
        KeyboardButton(text=("–ù–∞–∑–∞–¥",)),
        width=1,
    )
    return keyboard.as_markup(resize_keyboard=True)