import logging

from aiogram.types import KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, ReplyKeyboardMarkup
from asgiref.sync import sync_to_async

from modul.clientbot import strings
from modul.clientbot.shortcuts import get_current_bot, have_one_module, get_bot_by_token
from modul.models import Bot
from aiogram import Bot as CBot
from modul.config import settings_conf
logger = logging.getLogger(__name__)


MUSIC_MENU_BUTTONS_TEXT = [
    ("üéô–õ—É—á—à–∞—è –º—É–∑—ã–∫–∞"),
    ("üéß–ù–æ–≤—ã–µ –ø–µ—Å–Ω–∏"),
    ("üî•–ß–∞—Ä—Ç –ú—É–∑—ã–∫–∞"),
    ("üîç–ü–æ–∏—Å–∫")
]

CHATGPT_BUTTONS_TEXT = [
    ("‚òÅ –ß–∞—Ç —Å GPT-4"),
    ("‚òÅ –ß–∞—Ç —Å GPT-3.5"),
    ("üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ [DALL-E]"),
    ("üó£Ô∏è–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫"),
    ("üó®Ô∏è –¢–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ"),
    ("üîâ –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç"),
    ("üé• –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —é—Ç—É–±"),
    ("üîç –ì—É–≥–ª –ø–æ–∏—Å–∫"),
    ("üîã –ë–∞–ª–∞–Ω—Å"),
    ("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
]

HOROSCOPE_BUTTONS_TEXT = [
    ("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"),
    ("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
    ("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü"),
    ("üèµ –í–æ—Å—Ç–æ—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø"),
    ("üé© –ü—Ä–æ—Ñ–∏–ª—å"),
]


# ANON_MENU_BUTTONS_TEXT = [
#     ("‚òï –ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"),
#     ("üç™ –ü—Ä–æ—Ñ–∏–ª—å"),
#     "‚≠ê VIP",
# ]


def cancel():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text=("–û—Ç–º–µ–Ω–∞")))
    return builder.as_markup(resize_keyboard=True)


def cancel_or_skip():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=("–û—Ç–º–µ–Ω–∞")),
        KeyboardButton(text=("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")),
        width=1
    )
    return builder.as_markup(resize_keyboard=True)


def yes_no():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=("–î–∞")),
        KeyboardButton(text=("–ù–µ—Ç")),
        width=2
    )
    return builder.as_markup(resize_keyboard=True)





async def turn_bot_data(attr: str, bot: CBot):
    bot = await get_current_bot()
    setattr(bot, attr, not getattr(bot, attr))
    await bot.save()


@sync_to_async
def get_bot_owner(bot):
    return bot.owner


@sync_to_async
def owner_bots_filter(owner):
    return owner.bots.filter(owner=owner, unauthorized=False).count()


async def gen_buttons(current_bot: Bot, uid: int):
    try:
        btns = []

        if getattr(current_bot, "leo", False):
            btns.append("ü´∞ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞")

        bot_instance = await get_bot_by_token(current_bot.token)

        if bot_instance and getattr(bot_instance, "enable_anon", False):
            btns.extend([
                "üöÄ–ù–∞—á–∞—Ç—å", "üëã–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                "‚≠êÔ∏è–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∏–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"
            ])
            return btns
    except Exception as e:
        logger.error(f"Error in gen_buttons: {e}")

    return ["üí∏–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"]

async def main_menu(uid: int, bot: Bot):
    builder = ReplyKeyboardBuilder()
    btns = await gen_buttons(bot, uid)

    for btn in btns:
        builder.add(KeyboardButton(text=btn))

    builder.adjust(2, 1, 1)
    return builder.as_markup(resize_keyboard=True)


async def refs_kb():
    buttons = [
        [KeyboardButton(text="üí∏–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"), ]
    ]
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    return kb


def confirm():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=("–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")),
        KeyboardButton(text=("–û—Ç–º–µ–Ω–∞")),
        width=1
    )
    return builder.as_markup(resize_keyboard=True)


def amount_kb():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text=strings.CANCEL), width=1)
    builder.row(
        KeyboardButton(text="50"),
        KeyboardButton(text="100"),
        KeyboardButton(text="250"),
        KeyboardButton(text="500"),
        KeyboardButton(text="1000"),
        KeyboardButton(text="5000"),
        width=3
    )
    return builder.as_markup(resize_keyboard=True)


def withdraw_confirmation():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏")),
        KeyboardButton(text=strings.CANCEL),
        width=1
    )
    return builder.as_markup(resize_keyboard=True)


async def download_main_menu() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=("–ù–∞–∑–∞–¥")),
        width=1
    )
    return builder.as_markup(resize_keyboard=True)


async def ai_main_menu():
    keyboard = ReplyKeyboardBuilder()
    keyboard.row(
        KeyboardButton(text=("–ù–∞–∑–∞–¥",)),
        width=1,
    )
    return keyboard.as_markup(resize_keyboard=True)
