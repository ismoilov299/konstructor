import asyncio
import json
import logging
import random
from datetime import datetime, timedelta

from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from asgiref.sync import sync_to_async

from modul.clientbot import shortcuts
from modul.clientbot.handlers.davinci_bot.handlers.states import (
    DavinciRegistration, DavinciEditProfile, DavinciBoostForm
)
from modul.clientbot.handlers.davinci_bot.keyboards.buttons import (
    get_davinci_main_menu, get_registration_kb, get_profile_kb,
    get_boost_kb, get_rate_kb, get_edit_profile_kb
)
from modul.clientbot.handlers.davinci_bot.services.davinci_service import (
    get_or_create_davinci_profile, update_davinci_profile,
    get_davinci_profiles_for_viewing, rate_profile, check_mutual_like,
    get_likes_received, get_matches
)
from modul.loader import client_bot_router
from modul.models import LeoMatchModel, LeoMatchLikesBasketModel, DavinciStopWords
from modul.clientbot.handlers.davinci_bot.utils.validators import (
    validate_age, validate_name, validate_about_me, check_stop_words
)

logger = logging.getLogger(__name__)




class DavinciBotFilter:

    """Filter for davinci bot functionality"""

    async def __call__(self, message: Message, bot: Bot) -> bool:
        bot_db = await shortcuts.get_bot(bot)
        print(bot_db," davinci bot filter")
        return shortcuts.have_one_module(bot_db, "davinci")

def davinchi_bot_handlers():
    @client_bot_router.message(F.text == "ü´∞ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞", DavinciBotFilter())
    async def davinci_start(message: Message, bot: Bot, state: FSMContext):
        """Main davinci start handler"""
        print("Starting Davinci bot handler")
        await state.clear()

        bot_db = await shortcuts.get_bot(bot)
        user_profile = await get_or_create_davinci_profile(
            user_id=message.from_user.id,
            bot_username=bot_db.username
        )

        if not user_profile or not user_profile.admin_checked:
            # Redirect to registration if no profile or not approved
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Davinci –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!\n\n"
                "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π.",
                reply_markup=await get_registration_kb()
            )
            await state.set_state(DavinciRegistration.waiting_for_start)
        else:
            # Show main menu
            await message.answer(
                f"ü´∞ –ü—Ä–∏–≤–µ—Ç, {user_profile.full_name}!\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Davinci –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞! üí´\n"
                "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
                reply_markup=await get_davinci_main_menu()
            )


@client_bot_router.message(F.text == "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", DavinciBotFilter())
async def show_my_profile(message: Message, bot: Bot):
    """Show user's profile"""
    bot_db = await shortcuts.get_bot(bot)
    user_profile = await get_or_create_davinci_profile(
        user_id=message.from_user.id,
        bot_username=bot_db.username
    )

    if not user_profile:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å–Ω–∞—á–∞–ª–∞!")
        return

    profile_text = (
        f"üë§ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üìù –ò–º—è: {user_profile.full_name}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_profile.age}\n"
        f"üë• –ü–æ–ª: {user_profile.sex}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user_profile.city}\n"
        f"üîç –ò—â—É: {user_profile.which_search}\n"
        f"üí≠ –û —Å–µ–±–µ: {user_profile.about_me}\n\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {user_profile.count_likes}\n"
        f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–û–¥–æ–±—Ä–µ–Ω–∞' if user_profile.admin_checked else '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}"
    )

    if user_profile.photo:
        await message.answer_photo(
            photo=user_profile.photo,
            caption=profile_text,
            reply_markup=await get_profile_kb()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=await get_profile_kb()
        )


@client_bot_router.message(F.text == "üöÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã", DavinciBotFilter())
async def view_profiles(message: Message, bot: Bot, state: FSMContext):
    """Start viewing profiles"""
    bot_db = await shortcuts.get_bot(bot)
    user_profile = await get_or_create_davinci_profile(
        user_id=message.from_user.id,
        bot_username=bot_db.username
    )

    if not user_profile or not user_profile.admin_checked:
        await message.answer("‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞!")
        return

    profiles = await get_davinci_profiles_for_viewing(
        user_profile=user_profile,
        bot_username=bot_db.username
    )

    if not profiles:
        await message.answer(
            "üòî –ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        )
        return

    # Show first profile
    profile = profiles[0]
    await show_profile_for_rating(message, profile, state)


async def show_profile_for_rating(message: Message, profile: LeoMatchModel, state: FSMContext):
    """Show profile for rating"""
    await state.update_data(current_profile_id=profile.id)

    profile_text = (
        f"üë§ {profile.full_name}, {profile.age}\n"
        f"üèôÔ∏è {profile.city}\n"
        f"üí≠ {profile.about_me}"
    )

    if profile.photo:
        await message.answer_photo(
            photo=profile.photo,
            caption=profile_text,
            reply_markup=await get_rate_kb()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=await get_rate_kb()
        )


@client_bot_router.message(F.text == "üëë Boost", DavinciBotFilter())
async def boost_menu(message: Message, bot: Bot):
    """Show boost options"""
    await message.answer(
        "üëë Boost —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
        "üöÄ –ü–æ–¥–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É –≤ —Ç–æ–ø\n"
        "‚≠ê –°—É–ø–µ—Ä-–ª–∞–π–∫\n"
        "üëÅÔ∏è –ö—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª\n"
        "üí´ VIP —Å—Ç–∞—Ç—É—Å",
        reply_markup=await get_boost_kb()
    )


# Registration handlers
@client_bot_router.message(StateFilter(DavinciRegistration.waiting_for_start))
async def start_registration(message: Message, state: FSMContext):
    """Start registration process"""
    await message.answer(
        "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–º–∞–∫—Å–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    await state.set_state(DavinciRegistration.waiting_for_name)


@client_bot_router.message(StateFilter(DavinciRegistration.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    """Process name input"""
    name = message.text.strip()

    if not validate_name(name):
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if await check_stop_words(name):
        await message.answer(
            "‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:"
        )
        return

    await state.update_data(full_name=name)
    await message.answer(
        "üéÇ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 100 –ª–µ—Ç):"
    )
    await state.set_state(DavinciRegistration.waiting_for_age)


@client_bot_router.message(StateFilter(DavinciRegistration.waiting_for_age))
async def process_age(message: Message, state: FSMContext):
    """Process age input"""
    try:
        age = int(message.text.strip())
        if not validate_age(age):
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 16 –¥–æ 100 –ª–µ—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(age=age)

    # Gender selection keyboard
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=kb
    )
    await state.set_state(DavinciRegistration.waiting_for_sex)


@client_bot_router.message(StateFilter(DavinciRegistration.waiting_for_sex))
async def process_sex(message: Message, state: FSMContext):
    """Process gender selection"""
    text = message.text.strip()

    if text == "üë® –ú—É–∂—Å–∫–æ–π":
        sex = "male"
    elif text == "üë© –ñ–µ–Ω—Å–∫–∏–π":
        sex = "female"
    else:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(sex=sex)

    # Search preference keyboard
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë® –ü–∞—Ä–Ω–µ–π")],
            [KeyboardButton(text="üë© –î–µ–≤—É—à–µ–∫")],
            [KeyboardButton(text="üë• –í—Å–µ—Ö")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üîç –ö–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ?",
        reply_markup=kb
    )
    await state.set_state(DavinciRegistration.waiting_for_search_preference)


@client_bot_router.message(StateFilter(DavinciRegistration.waiting_for_search_preference))
async def process_search_preference(message: Message, state: FSMContext):
    """Process search preference"""
    text = message.text.strip()

    if text == "üë® –ü–∞—Ä–Ω–µ–π":
        which_search = "male"
    elif text == "üë© –î–µ–≤—É—à–µ–∫":
        which_search = "female"
    elif text == "üë• –í—Å–µ—Ö":
        which_search = "all"
    else:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    await state.update_data(which_search=which_search)
    await message.answer(
        "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        # reply_markup=shortcuts.cancel()
    )
    await state.set_state(DavinciRegistration.waiting_for_city)


@client_bot_router.message(StateFilter(DavinciRegistration.waiting_for_city))
async def process_city(message: Message, state: FSMContext):
    """Process city input"""
    city = message.text.strip()

    if len(city) < 2 or len(city) > 50:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if await check_stop_words(city):
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥:"
        )
        return

    await state.update_data(city=city)
    await message.answer(
        "üí≠ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    await state.set_state(DavinciRegistration.waiting_for_about)


@client_bot_router.message(StateFilter(DavinciRegistration.waiting_for_about))
async def process_about(message: Message, state: FSMContext):
    """Process about me text"""
    about_me = message.text.strip()

    if not validate_about_me(about_me):
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if await check_stop_words(about_me):
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        )
        return

    await state.update_data(about_me=about_me)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:"
    )
    await state.set_state(DavinciRegistration.waiting_for_photo)


@client_bot_router.message(StateFilter(DavinciRegistration.waiting_for_photo))
async def process_photo(message: Message, state: FSMContext, bot: Bot):
    """Process photo upload"""
    if not message.photo:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
        )
        return

    # Get the largest photo
    photo = message.photo[-1].file_id

    # Get registration data
    data = await state.get_data()

    # Create profile
    bot_db = await shortcuts.get_bot(bot)

    try:
        profile = await update_davinci_profile(
            user_id=message.from_user.id,
            bot_username=bot_db.username,
            **data,
            photo=photo,
            media_type="photo"
        )

        await state.clear()

        await message.answer(
            "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            "üìã –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
            "‚è∞ –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n\n"
            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞!",
            reply_markup=await get_davinci_main_menu()
        )

    except Exception as e:
        logger.error(f"Error creating davinci profile: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
        await state.clear()


# Callback handlers
@client_bot_router.callback_query(F.data == "davinci_like")
async def process_like(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """Process like action"""
    data = await state.get_data()
    profile_id = data.get('current_profile_id')

    if not profile_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    bot_db = await shortcuts.get_bot(bot)
    user_profile = await get_or_create_davinci_profile(
        user_id=callback.from_user.id,
        bot_username=bot_db.username
    )

    if not user_profile:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã")
        return

    # Process like
    is_mutual = await rate_profile(
        from_user_profile=user_profile,
        to_profile_id=profile_id,
        like_type="like"
    )

    if is_mutual:
        await callback.answer("üíñ –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è!", show_alert=True)
    else:
        await callback.answer("üëç –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    # Show next profile
    await show_next_profile(callback.message, user_profile, bot_db.username, state)


@client_bot_router.callback_query(F.data == "davinci_dislike")
async def process_dislike(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """Process dislike action"""
    data = await state.get_data()
    profile_id = data.get('current_profile_id')

    if not profile_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    bot_db = await shortcuts.get_bot(bot)
    user_profile = await get_or_create_davinci_profile(
        user_id=callback.from_user.id,
        bot_username=bot_db.username
    )

    # Process dislike
    await rate_profile(
        from_user_profile=user_profile,
        to_profile_id=profile_id,
        like_type="dislike"
    )

    await callback.answer("üëé –ü—Ä–æ–ø—É—â–µ–Ω–æ")

    # Show next profile
    await show_next_profile(callback.message, user_profile, bot_db.username, state)


async def show_next_profile(message: Message, user_profile: LeoMatchModel, bot_username: str, state: FSMContext):
    """Show next profile for rating"""
    profiles = await get_davinci_profiles_for_viewing(
        user_profile=user_profile,
        bot_username=bot_username
    )

    if not profiles:
        await message.edit_text(
            "üòî –ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        )
        return

    # Show first profile
    profile = profiles[0]
    await state.update_data(current_profile_id=profile.id)

    profile_text = (
        f"üë§ {profile.full_name}, {profile.age}\n"
        f"üèôÔ∏è {profile.city}\n"
        f"üí≠ {profile.about_me}"
    )

    try:
        if profile.photo:
            await message.edit_media(
                media=message.photo[0].file_id,
                reply_markup=await get_rate_kb()
            )
            await message.edit_caption(
                caption=profile_text,
                reply_markup=await get_rate_kb()
            )
        else:
            await message.edit_text(
                profile_text,
                reply_markup=await get_rate_kb()
            )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        # Fallback: send new message
        if profile.photo:
            await message.answer_photo(
                photo=profile.photo,
                caption=profile_text,
                reply_markup=await get_rate_kb()
            )
        else:
            await message.answer(
                profile_text,
                reply_markup=await get_rate_kb()
            )