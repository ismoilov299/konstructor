import logging

from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils.keyboard import InlineKeyboardBuilder
logger = logging.getLogger(__name__)

async def main_menu_bt():
    buttons = [
        [KeyboardButton(text="üí∏–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"), KeyboardButton(text="üì±–ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="‚ÑπÔ∏è–ò–Ω—Ñ–æ")]
    ]
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    return kb

async def main_menu_bt2():
    buttons = [
        [KeyboardButton(text="üí∏–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"), KeyboardButton(text="üì±–ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="‚ÑπÔ∏è–ò–Ω—Ñ–æ")],
        [KeyboardButton(text="üîô–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    return kb



async def payment_in():
    buttons = [
        [InlineKeyboardButton(text="üì§–í—ã–≤–µ—Å—Ç–∏", callback_data="payment")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb


async def channels_in(all_channels, bot):
    keyboard_builder = InlineKeyboardBuilder()
    for channel_id, _ in all_channels:
        try:
            chat_info = await bot.get_chat(channel_id)
            invite_link = chat_info.invite_link or f"https://t.me/{chat_info.username}"
            keyboard_builder.button(text="üíé–°–ø–æ–Ω—Å–æ—Ä", url=invite_link)
        except Exception as e:
            logger.error(f"Error getting channel info {channel_id}: {e}")
            continue

    keyboard_builder.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_chan")
    keyboard_builder.adjust(1)
    return keyboard_builder.as_markup()


#
# async def channels_in(all_channels):
#     if len(all_channels) > 6:
#         actual_channels = all_channels[0:6]
#         buttons = [
#             [InlineKeyboardButton(text="üíé–°–ø–æ–Ω—Å–æ—Ä", url=f"{i[1]}")] for i in actual_channels
#         ]
#
#         kb = InlineKeyboardMarkup(inline_keyboard=buttons)
#
#         return kb
#     buttons = [
#         [InlineKeyboardButton(text="üíé–°–ø–æ–Ω—Å–æ—Ä", url=f"{i[1]}")] for i in all_channels
#     ]
#     buttons.append([InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_chan")])
#     kb = InlineKeyboardMarkup(inline_keyboard=buttons)
#     return kb

async def admin_in(admin_user):
    print(f"Received admin_user: '{admin_user}'")

    if admin_user and admin_user.strip():
        admin_user = admin_user.strip()
        admin_user = admin_user[1:] if admin_user.startswith("@") else admin_user
        admin_url = f"https://t.me/{admin_user}"
    else:
        admin_url = "https://t.me/"

    print(f"Generated URL: '{admin_url}'")

    buttons = [
        [InlineKeyboardButton(text="üßë‚Äçüíª–ê–¥–º–∏–Ω", url=admin_url)]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb


async def cancel_bt():
    buttons = [
        [KeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å")]
    ]
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    return kb


async def admin_menu_in():
    buttons = [
        [InlineKeyboardButton(text="‚úâÔ∏è–†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing")],
        [InlineKeyboardButton(text="üîé–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="imp"),
         InlineKeyboardButton(text="üí≥–í—ã–ø–ª–∞—Ç—ã", callback_data="all_payments")],
        [InlineKeyboardButton(text="üí∞–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–∞", callback_data="change_money")],
        [InlineKeyboardButton(text="üìï–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥", callback_data="change_min")],
        [InlineKeyboardButton(text="üìß–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="change_channels")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb


async def payments_action_in(id):
    buttons = [
        [InlineKeyboardButton(text="‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"accept_{id}")],
        [InlineKeyboardButton(text="‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{id}")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb


async def accepted_in():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", callback_data="none")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb


async def declined_in():
    buttons = [
        [InlineKeyboardButton(text="‚ùå–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", callback_data="none")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb


async def admin_channels_in():
    buttons = [
        [InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É", callback_data="add_channel")],
        [InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É", callback_data="delete_channel")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb


async def imp_menu_in(id, status):
    if status == True:
        buttons = [
            [InlineKeyboardButton(text="‚ùáÔ∏è–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"razb_{id}")],
            [InlineKeyboardButton(text="‚ûï–ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data=f"addbalance_{id}"),
             InlineKeyboardButton(text="‚úèÔ∏è–ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data=f"changebalance_{id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data=f"changerefs_{id}")],
            [InlineKeyboardButton(text="üîç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data=f"showrefs_{id}")],
            [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel")]

        ]
    elif status == False:
        buttons = [
            [InlineKeyboardButton(text="‚ùå–ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_{id}")],
            [InlineKeyboardButton(text="‚ûï–ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data=f"addbalance_{id}"),
             InlineKeyboardButton(text="‚úèÔ∏è–ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data=f"changebalance_{id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data=f"changerefs_{id}")],
            [InlineKeyboardButton(text="üîç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data=f"showrefs_{id}")],
            [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel")]

        ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb


async def close_in():
    buttons = [
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb


async def universal_in(text, url):
    buttons = [
        [InlineKeyboardButton(text=f"{text}", callback_data=f"{url}")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb
