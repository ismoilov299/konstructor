import logging

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from modul.clientbot import shortcuts
from modul.clientbot.handlers.annon_bot.adminservice import *
from modul.clientbot.handlers.annon_bot.keyboards.buttons import admin_menu_in, admin_channels_in, cancel_bt, \
    main_menu_bt
from modul.clientbot.handlers.annon_bot.states import AnonBotFilter, ChangeAdminInfo
from modul.loader import client_bot_router
from modul.models import Bot

logger = logging.getLogger(__name__)

async def send_cancel_message(bot, user_id):
    await bot.send_message(user_id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())


async def send_success_message(bot, user_id, text):
    await bot.send_message(user_id, text, reply_markup=await main_menu_bt())


async def get_admin_id(bot: Bot):
    bot_db = await shortcuts.get_bot(bot)
    return bot_db.owner.uid


def admin_panel():
    @client_bot_router.message(Command(commands=["admin"]), F.chat.type == "private")
    async def admin_mm(message: Message):
        try:
            count = await get_users_count()
            await message.answer(
                f"üïµ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤ –≤ –±–æ—Ç–µ: {count}",
                reply_markup=await admin_menu_in()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞: {e}")
            await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")



@client_bot_router.callback_query(F.data.in_(["cancel", "change_channels", "add_channel", "delete_channel", "mailing"]))
async def call_backs(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        if query.data == "cancel":
            await query.bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
        elif query.data == "change_channels":
            text = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: \n"
            all_channels = await get_channels_for_admin()
            if all_channels:
                for channel in all_channels:
                    text += f"\n<b>ID –ü–æ–¥–ø–∏—Å–∫–∏:</b> {channel[0]}\n<b>Username:</b> {channel[1]}\n<b>–ö–∞–Ω–∞–ª ID:</b> {channel[2]}\n"
            else:
                text += "–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            await query.bot.send_message(query.from_user.id, text=text, reply_markup=await admin_channels_in(), parse_mode="html")
        elif query.data == "add_channel":
            await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (—Ñ–æ—Ä–º–∞—Ç: t.me/ –∏–ª–∏ https://t.me/)",
                                         reply_markup=await cancel_bt())
            await state.set_state(ChangeAdminInfo.get_channel_url)
        elif query.data == "delete_channel":
            await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                                         reply_markup=await cancel_bt(), parse_mode="html")
            await state.set_state(ChangeAdminInfo.delete_channel)
        elif query.data == "mailing":
            await query.bot.send_message(query.from_user.id,
                                         "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.",
                                         reply_markup=await cancel_bt())
            await state.set_state(ChangeAdminInfo.mailing)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–∞: {query.data}, {e}")


@client_bot_router.message(ChangeAdminInfo.get_channel_url)
async def get_new_channel_url(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif "t.me/" in message.text.lower() or "https://t.me/" in message.text.lower():
        await state.set_data({"chan_url": message.text})
        await message.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞\n"
                                                             "–£–∑–Ω–∞—Ç—å ID –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–π "
                                                             "–ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞-—Å–ø–æ–Ω—Å–æ—Ä–∞ –≤ –±–æ—Ç @getmyid_bot. "
                                                             "–ü–æ—Å–ª–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≥—Ä–∞—Ñ—ã 'Forwarded from chat:'",
                                       reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.get_channel_id)
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É",
                                       reply_markup=await main_menu_bt())
        await state.clear()


@client_bot_router.message(ChangeAdminInfo.get_channel_id)
async def get_new_channel_id(message: Message, state: FSMContext):
    try:
        channel_id = int(message.text)
        if channel_id > 0:
            channel_id *= -1
        data = await state.get_data()
        new_channel = await add_new_channel_db(url=data["chan_url"], id=channel_id)
        if new_channel:
            await send_success_message(message.bot, message.from_user.id, "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
        else:
            await send_success_message(message.bot, message.from_user.id, "–ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        await send_success_message(message.bot, message.from_user.id, "‚ùó–û—à–∏–±–∫–∞! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        await send_success_message(message.bot, message.from_user.id, "üö´–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.")
    finally:
        await state.clear()


@client_bot_router.message(ChangeAdminInfo.delete_channel)
async def delete_channel(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text == "1":
        await message.bot.send_message(message.from_user.id, "üö´–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É",
                                       reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text != "1" and message.text.isdigit():
        try_del = delete_channel_db(int(message.text))
        if try_del:
            await message.bot.send_message(message.from_user.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ",
                                           reply_markup=await main_menu_bt())
            await state.clear()
        else:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()


@client_bot_router.message(ChangeAdminInfo.mailing)
async def mailing_admin(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    else:
        all_users = await get_all_users_tg_id()
        success = 0
        unsuccess = 0
        for i in all_users:
            try:
                await message.bot.copy_message(chat_id=i, from_chat_id=message.from_user.id,
                                               message_id=message.message_id, reply_markup=message.reply_markup)
                success += 1
            except:
                unsuccess += 1
        await message.bot.send_message(message.from_user.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                                             f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                                                             f"–ù–µ—É—Å–ø–µ—à–Ω–æ: {unsuccess}",
                                       reply_markup=await main_menu_bt())
        await state.clear()


@client_bot_router.message(F.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å")
async def profile(message: Message, state: FSMContext):
    await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=await main_menu_bt())
    await state.clear()
