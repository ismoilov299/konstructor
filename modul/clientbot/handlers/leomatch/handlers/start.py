from aiogram import types, F, Bot
from asgiref.sync import sync_to_async

from modul.clientbot.handlers.leomatch.keyboards import reply_kb
from modul.clientbot.utils.functs import return_main
from modul.clientbot.handlers.leomatch.shortcuts import exists_leo, get_leo
from modul.clientbot.handlers.leomatch.handlers.shorts import manage
from modul.models import LeoMatchModel
from modul.loader import client_bot_router
from aiogram.fsm.context import FSMContext
from modul.clientbot.handlers.leomatch.data.state import LeomatchRegistration

from modul.models import UserTG


@client_bot_router.callback_query(F.data == "start_registration", LeomatchRegistration.BEGIN)
async def handle_start_registration_callback(callback: types.CallbackQuery, state: FSMContext):
    print("Start registration start 18 callback triggered for user:", callback.from_user.id)

    if callback.from_user.username == None:
        await callback.message.answer(
            "–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑–∞—Ç—å username –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–∞—á–µ –í–∞–º –Ω–µ —Å–º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ, –∫–æ–≥–æ –≤—ã –ª–∞–π–∫–Ω–∏—Ç–µ")

    # Age keyboard'ini import qiling
    from modul.clientbot.handlers.leomatch.handlers.shorts import create_age_input_keyboard
    keyboard = await create_age_input_keyboard()

    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Ç–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=keyboard
    )
    await state.set_state(LeomatchRegistration.AGE)
    await callback.answer("‚úÖ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")

@client_bot_router.callback_query(F.data == "dont_want_search", LeomatchRegistration.BEGIN)
async def handle_dont_want_search_callback(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await return_main(callback.message, state, bot)
    await callback.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–∏—Å–∫–∞")

@client_bot_router.callback_query(F.data == "refuse_registration")
async def handle_refuse_registration_callback(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await return_main(callback.message, state, bot)
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@client_bot_router.message(F.text == "ü´∞ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞")
async def bot_start(message: types.Message, state: FSMContext):
    print(f"DEBUG: bot_start called for user {message.from_user.id}")

    # Leo profil mavjudligini tekshiramiz (bu avtomatik bog'lash ham qiladi)
    has_leo = await exists_leo(message.from_user.id)
    print(f"DEBUG: Leo exists: {has_leo}")

    if has_leo:
        # Leo profil mavjud
        leo = await get_leo(message.from_user.id)
        if leo and leo.blocked:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return
        # Asosiy menyuga o'tish
        await manage(message, state)
    else:
        # Leo profil yo'q - registratsiyaga
        print(f"DEBUG: No Leo profile, starting registration")
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø - –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É.",
            reply_markup=reply_kb.begin_registration()
        )
        await state.set_state(LeomatchRegistration.BEGIN)

@client_bot_router.message(F.text == ("–Ø –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å"), LeomatchRegistration.BEGIN)
async def bot_start_cancel(message: types.Message, state: FSMContext, bot: Bot):
    await return_main(message, state, bot)

@client_bot_router.message(F.text == ("–î–∞–≤–∞–π, –Ω–∞—á–Ω–µ–º!"), LeomatchRegistration.BEGIN)
async def handle_start_registration_text(message: types.Message, state: FSMContext):
    pass

@client_bot_router.message(LeomatchRegistration.BEGIN)
async def handle_begin_state_fallback(message: types.Message, state: FSMContext):

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
        reply_markup=reply_kb.begin_registration()
    )

@client_bot_router.message(F.text.contains("–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞"))
async def handle_dating_variations(message: types.Message, state: FSMContext):

    await bot_start(message, state)

async def bot_start_lets_leo(message: types.Message, state: FSMContext):
    if message.from_user.username == None:
        await message.answer(
            ("–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑–∞—Ç—å username –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–∞—á–µ –í–∞–º –Ω–µ —Å–º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ, –∫–æ–≥–æ –≤—ã –ª–∞–π–∫–Ω–∏—Ç–µ"))
    pass