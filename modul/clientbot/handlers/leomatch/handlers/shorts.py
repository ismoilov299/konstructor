from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from modul.clientbot.handlers.leomatch.keyboards import reply_kb
from modul.clientbot.handlers.leomatch.data.state import LeomatchRegistration, LeomatchMain
from aiogram.fsm.context import FSMContext
from modul.clientbot.handlers.leomatch.shortcuts import get_leo


async def manage(message: types.Message, state: FSMContext):
    data = await state.get_data()
    me = data.get("me") if data.get("me") else message.from_user.id
    leo = await get_leo(me)

    if not leo:
        await message.answer(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=reply_kb.begin_registration()
        )
        await state.set_state(LeomatchRegistration.BEGIN)
        return

    if not leo:
        await message.answer(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=reply_kb.begin_registration()
        )
        await state.set_state(LeomatchRegistration.BEGIN)
        return

    buttons = []

    buttons.append([InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π", callback_data="view_profiles")])

    buttons.append([InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")])

    if not leo.active or not leo.search:
        text = (
            "\n–°–µ–π—á–∞—Å –∞–∫–∫–∞—É–Ω—Ç –≤—ã–∫–ª—é—á–µ–Ω –æ—Ç –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –í—ã –Ω–∞—á–Ω–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã, —Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–Ω–æ–≤—å –≤–∫–ª—é—á–∏—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    else:
        buttons.append([InlineKeyboardButton(text="‚ùå –ë–æ–ª—å—à–µ –Ω–µ –∏—â—É", callback_data="stop_search")])
        text = ("\n3. –ë–æ–ª—å—à–µ –Ω–µ –∏—â—É")

    buttons.append([InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="exit_leomatch")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    menu_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if not leo.active or not leo.search:
        menu_text += "\n\n‚ö†Ô∏è –°–µ–π—á–∞—Å –∞–∫–∫–∞—É–Ω—Ç –≤—ã–∫–ª—é—á–µ–Ω –æ—Ç –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –í—ã –Ω–∞—á–Ω–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã, —Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–Ω–æ–≤—å –≤–∫–ª—é—á–∏—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"

    await message.answer(menu_text, reply_markup=keyboard)
    await state.set_state(LeomatchMain.WAIT)


async def set_sex(sex: str, message: types.Message, state: FSMContext):
    await state.update_data(sex=sex)
    await message.answer(("–ö–æ–≥–æ –í—ã –∏—â–∏—Ç–µ?"), reply_markup=reply_kb.which_search())
    await state.set_state(LeomatchRegistration.WHICH_SEARCH)


async def set_which_search(which_search: str, message: types.Message, state: FSMContext):
    await state.update_data(which_search=which_search)

    await message.answer(("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?"))
    await state.set_state(LeomatchRegistration.CITY)


async def begin_registration(message: types.Message, state: FSMContext):
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_registration")]
    ])

    await message.answer(("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"), reply_markup=keyboard)
    await state.set_state(LeomatchRegistration.AGE)


async def show_main_menu_with_status(message: types.Message, state: FSMContext, leo):
    if not leo:
        await message.answer(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=reply_kb.begin_registration()
        )
        await state.set_state(LeomatchRegistration.BEGIN)
        return

    buttons = []

    buttons.append([InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π", callback_data="view_profiles")])

    buttons.append([InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")])

    if leo.active and leo.search:
        buttons.append([InlineKeyboardButton(text="‚ùå –ë–æ–ª—å—à–µ –Ω–µ –∏—â—É", callback_data="stop_search")])
        status_text = "üü¢ –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω"
    else:
        buttons.append([InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")])
        status_text = "üî¥ –ü–æ–∏—Å–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    buttons.append([InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")])

    buttons.append([InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="exit_leomatch")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    text = f"üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n{status_text}"
    if not leo.active or not leo.search:
        text += "\n\n‚ö†Ô∏è –ü—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è"

    await message.answer(text, reply_markup=keyboard)
    await state.set_state(LeomatchMain.WAIT)


async def create_age_input_keyboard():
    buttons = []

    ages = [18, 19, 20, 21, 22, 23, 25, 30]
    for i in range(0, len(ages), 4):
        row = []
        for j in range(4):
            if i + j < len(ages):
                age = ages[i + j]
                row.append(InlineKeyboardButton(text=str(age), callback_data=f"age_{age}"))
        if row:
            buttons.append(row)

    buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –î—Ä—É–≥–æ–π –≤–æ–∑—Ä–∞—Å—Ç", callback_data="custom_age")])

    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_registration")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def create_city_suggestions_keyboard(user_location=None):
    buttons = []

    popular_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"]

    for i in range(0, len(popular_cities), 2):
        row = []
        for j in range(2):
            if i + j < len(popular_cities):
                city = popular_cities[i + j]
                row.append(InlineKeyboardButton(text=city, callback_data=f"city_{city}"))
        if row:
            buttons.append(row)

    if user_location:
        buttons.insert(0, [InlineKeyboardButton(text=f"üìç {user_location}", callback_data=f"city_{user_location}")])

    buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="custom_city")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def send_numbered_menu(message: types.Message, options: list, callback_prefix: str, add_exit: bool = True):
    buttons = []

    for i, option in enumerate(options, 1):
        buttons.append([InlineKeyboardButton(text=f"{i}. {option}", callback_data=f"{callback_prefix}_{i}")])

    if add_exit:
        buttons.append([InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="exit")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    menu_text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:\n\n"
    for i, option in enumerate(options, 1):
        menu_text += f"{i}. {option}\n"

    await message.answer(menu_text, reply_markup=keyboard)