import os

from aiogram import types, Bot, F
from aiogram.exceptions import TelegramNetworkError
from aiogram.types import Message

from modul.clientbot.handlers.leomatch.keyboards import reply_kb
from modul.clientbot.handlers.leomatch.data.state import LeomatchRegistration
from modul.clientbot.handlers.leomatch.handlers.shorts import manage, begin_registration, set_which_search, set_sex
from modul.clientbot.handlers.leomatch.shortcuts import add_leo, get_leo, show_profile, update_leo
from modul.clientbot.utils.functs import return_main
from modul.clientbot.shortcuts import get_current_bot
from modul.loader import client_bot_router, bot_session
from aiogram.fsm.context import FSMContext


async def now_send_photo(message: types.Message, state: FSMContext):
    leo = await get_leo(message.from_user.id)
    kwargs = {}
    if leo:
        kwargs['reply_markup'] = reply_kb.save_current()
    await message.answer(("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≤–∏–¥–µ–æ üëç (–¥–æ 15 —Å–µ–∫), –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
                         **kwargs)
    await state.set_state(LeomatchRegistration.SEND_PHOTO)


async def save_media(message: types.Message, state: FSMContext, url: str, type: str):
    await state.update_data(photo=url, media_type=type)
    data = await state.get_data()
    age = data['age']
    full_name = data['full_name']
    about_me = data['about_me']
    city = data['city']
    await show_profile(message, message.from_user.id, full_name, age, city, about_me, url, type)
    await message.answer(("–í—Å—ë –≤–µ—Ä–Ω–æ?"), reply_markup=reply_kb.final_registration())
    await state.set_state(LeomatchRegistration.FINAL)


@client_bot_router.message(F.text == "–î–∞–≤–∞–π, –Ω–∞—á–Ω–µ–º!", LeomatchRegistration.BEGIN)
async def bot_start_lets_leo(message: types.Message, state: FSMContext):
    await message.answer(
        (
            "–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑–∞—Ç—å username –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–∞—á–µ –í–∞–º –Ω–µ —Å–º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ, –∫–æ–≥–æ –≤—ã –ª–∞–π–∫–Ω–∏—Ç–µ"))
    await begin_registration(message, state)


@client_bot_router.message(LeomatchRegistration.AGE)
async def bot_start(message: Message, state: FSMContext, bot: Bot):
    try:
        age = int(message.text)
        await state.set_data({"age": age})
        await message.answer(("–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º!"), reply_markup=reply_kb.chooice_sex())
        await state.set_state(LeomatchRegistration.SEX)
    except:
        if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer(("–û—Ç–º–µ–Ω–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!"), )
            await return_main(message, state, bot)
            return
        await message.answer(("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–æ—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏"), )



@client_bot_router.message(F.text == ("–Ø –ø–∞—Ä–µ–Ω—å"), LeomatchRegistration.SEX)
async def bot_start(message: types.Message, state: FSMContext):
    await set_sex("MALE", message, state)


@client_bot_router.message(F.text == ("–Ø –¥–µ–≤—É—à–∫–∞"), LeomatchRegistration.SEX)
async def bot_start(message: types.Message, state: FSMContext):
    await set_sex("FEMALE", message, state)


@client_bot_router.message(LeomatchRegistration.SEX)
async def bot_start(message: types.Message):
    await message.answer(("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É"), )


@client_bot_router.message(F.text == ("–ü–∞—Ä–Ω—è"), LeomatchRegistration.WHICH_SEARCH)
async def bot_start(message: types.Message, state: FSMContext):
    await set_which_search("MALE", message, state)


@client_bot_router.message(F.text == ("–î–µ–≤—É—à–∫—É"), LeomatchRegistration.WHICH_SEARCH)
async def bot_start(message: types.Message, state: FSMContext):
    await set_which_search("FEMALE", message, state)


@client_bot_router.message(F.text == ("–ú–Ω–µ –≤—Å—ë —Ä–∞–≤–Ω–æ"), LeomatchRegistration.WHICH_SEARCH)
async def bot_start(message: types.Message, state: FSMContext):
    await set_which_search("ANY", message, state)


@client_bot_router.message(LeomatchRegistration.WHICH_SEARCH)
async def bot_start(message: types.Message):
    await message.answer(("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–≥–æ –í—ã –∏—â–∏—Ç–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É"), )


@client_bot_router.message(LeomatchRegistration.CITY)
async def bot_start(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    button = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text=message.from_user.full_name)]],
                                       resize_keyboard=True, one_time_keyboard=True)
    await message.answer(("–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?"), reply_markup=button)
    await state.set_state(LeomatchRegistration.FULL_NAME)


@client_bot_router.message(LeomatchRegistration.FULL_NAME)
async def bot_start(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if len(name) > 15:
        await message.answer(("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤"))
        return
    await state.update_data(full_name=name)
    leo = await get_leo(message.from_user.id)
    kwargs = {}
    if leo:
        kwargs['reply_markup'] = reply_kb.save_current()
    await message.answer(
        ("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏, —á–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é."),
        **kwargs)
    await state.set_state(LeomatchRegistration.ABOUT_ME)


@client_bot_router.message(F.text == ("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ"), LeomatchRegistration.ABOUT_ME)
async def bot_start(message: types.Message, state: FSMContext):
    leo = await get_leo(message.from_user.id)
    if not leo:
        await message.answer(("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ—à–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"))
        return
    await state.update_data(about_me=leo.about_me)
    await now_send_photo(message, state)


@client_bot_router.message(LeomatchRegistration.ABOUT_ME)
async def bot_start(message: types.Message, state: FSMContext):
    if len(message.text) > 300:
        await message.answer(("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤"))
        return
    await state.update_data(about_me=message.text)
    await now_send_photo(message, state)


@client_bot_router.message(F.text == ("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ"), LeomatchRegistration.SEND_PHOTO)
async def bot_start(message: types.Message, state: FSMContext):
    leo = await get_leo(message.from_user.id)
    if not leo:
        await message.answer(("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ—à–ª–æ–µ –º–µ–¥–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"))
        return
    await save_media(message, state, leo.photo, leo.media_type)


@client_bot_router.message(LeomatchRegistration.SEND_PHOTO)
async def bot_start(message: types.Message, state: FSMContext, bot: Bot):
    if not message.photo and not message.video:
        await message.answer(("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ"))
        return
    url = ""
    type = ""
    if message.photo:
        url = message.photo[-1].file_id
        type = "PHOTO"
    elif message.video:
        if message.video.duration > 15:
            await message.answer(("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥"))
            return
        url = message.video.file_id
        type = "VIDEO"
    await state.update_data(photo=url, media_type=type)
    bot = await get_current_bot(bot)
    format = "jpg" if type == "PHOTO" else "mp4"
    file_path = f"/var/www/Konstruktor/modul/clientbot/handlers/leomatch/data/leo{message.from_user.id}.{format}"

    # try:
    # Ensure directory exists

    async with Bot(token=bot.token, session=bot_session).context(auto_close=False) as bot_:
        await bot_.download(url, file_path)

        # Send file
    await save_media(message, state, file_path, type)
    # except TelegramNetworkError as e:
    #     print(f"Telegram Network Error: {e}")
    # except Exception as e:
    #     print(f"Error: {e}")


@client_bot_router.message(F.text == ("–î–∞"), LeomatchRegistration.FINAL)
async def bot_start(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photo = data['photo']
    media_type = data['media_type']
    data = await state.get_data()
    sex = data['sex']
    age = data['age']
    full_name = data['full_name']
    about_me = data['about_me']
    city = data['city']
    which_search = data['which_search']
    leo = await get_leo(message.from_user.id)
    if not leo:
        bot = await get_current_bot(bot)
        await add_leo(message.from_user.id, photo, media_type, sex, age, full_name, about_me, city, which_search,
                      bot.username)
    else:
        await update_leo(message.from_user.id, photo, media_type, sex, age, full_name, about_me, city, which_search)
    await state.clear()
    await manage(message, state)


@client_bot_router.message(F.text == ("–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"), LeomatchRegistration.FINAL)
async def bot_start(message: types.Message, state: FSMContext):
    await begin_registration(message, state)


@client_bot_router.message(LeomatchRegistration.ABOUT_ME)
async def bot_start(message: types.Message, state: FSMContext):
    await message.answer(("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"), reply_markup=reply_kb.final_registration())
