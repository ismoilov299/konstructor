import asyncio
import logging
import os

from aiogram import types, Bot, F
from aiogram.exceptions import TelegramNetworkError
from aiogram.types import Message
from pathlib import Path
from collections import defaultdict
from datetime import datetime
from modul.clientbot.handlers.leomatch.keyboards import reply_kb
from modul.clientbot.handlers.leomatch.data.state import LeomatchRegistration
from modul.clientbot.handlers.leomatch.handlers.shorts import manage, begin_registration
from modul.clientbot.handlers.leomatch.shortcuts import add_leo, get_leo, show_profile, update_leo
from modul.clientbot.storage import message_store
from modul.clientbot.utils.functs import return_main
from modul.clientbot.shortcuts import get_current_bot
from modul.loader import client_bot_router, bot_session
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)

last_message_time = defaultdict(float)
MIN_MESSAGE_INTERVAL = 1.0

async def now_send_photo(message: types.Message, state: FSMContext):
    """
    Photo/video yuborish bosqichi
    """
    try:
        leo = await get_leo(message.from_user.id)
        kwargs = {}
        if leo:
            kwargs['reply_markup'] = reply_kb.save_current()

        await message.answer(
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≤–∏–¥–µ–æ üëç (–¥–æ 15 —Å–µ–∫), –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            **kwargs
        )
        await state.set_state(LeomatchRegistration.SEND_PHOTO)
        logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è user_id={message.from_user.id}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ñ–æ—Ç–æ –¥–ª—è user_id={message.from_user.id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def save_media(message: types.Message, state: FSMContext, url: str, type: str):
    """
    Media ma'lumotlarini saqlash
    """
    try:
        logger.info(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞ –¥–ª—è user_id={message.from_user.id}")

        data = await state.get_data()
        age = data.get('age')
        full_name = data.get('full_name')
        about_me = data.get('about_me')
        city = data.get('city')

        logger.info(f"üìÑ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è: age={age}, name={full_name}, city={city}")

        await show_profile(message, message.from_user.id, full_name, age, city, about_me, url, type)
        await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=reply_kb.final_registration())
        await state.set_state(LeomatchRegistration.FINAL)

        logger.info(f"‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è user_id={message.from_user.id}")
        return True

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞ –¥–ª—è user_id={message.from_user.id}: {str(e)}", exc_info=True)
        raise e


last_message_time = defaultdict(float)
processed_messages = defaultdict(set)


@client_bot_router.message(F.text == "–î–∞–≤–∞–π, –Ω–∞—á–Ω–µ–º!", LeomatchRegistration.BEGIN)
async def bot_start_lets_leo(message: Message, state: FSMContext):
    """
    Ro'yxatdan o'tishni boshlash
    """
    try:
        user_id = message.from_user.id
        message_id = message.message_id

        if message_store.is_processed(user_id, message_id):
            logger.info(f"üîÑ –ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –æ—Ç user_id={user_id}")
            return

        if not message_store.can_process(user_id):
            logger.info(f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç user_id={user_id}")
            return

        current_state = await state.get_state()
        if current_state != LeomatchRegistration.BEGIN:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            return

        state_data = await state.get_data()
        if state_data.get('registration_started'):
            logger.info(f"üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –Ω–∞—á–∞—Ç–∞ –¥–ª—è user_id={user_id}")
            return

        message_store.mark_processed(user_id, message_id)

        await state.update_data(registration_started=True)
        await state.clear()

        await message.answer(
            "–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑–∞—Ç—å username –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"
        )
        await message.answer(
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
            reply_markup=reply_kb.cancel()
        )
        await state.set_state(LeomatchRegistration.AGE)
        logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def clear_processed_messages():
    while True:
        await asyncio.sleep(3600)  # har soatda
        processed_messages.clear()
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")


@client_bot_router.message(LeomatchRegistration.AGE)
async def process_age(message: Message, state: FSMContext):
    """
    Yosh kiritishni qayta ishlash
    """
    try:
        user_id = message.from_user.id
        current_time = datetime.now().timestamp()

        if current_time - last_message_time[user_id] < MIN_MESSAGE_INTERVAL:
            logger.info(f"‚è≥ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}")
            return

        last_message_time[user_id] = current_time
        logger.info(f"üîµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ—Ç user_id={user_id}: {message.text}")

        current_state = await state.get_state()
        if current_state != LeomatchRegistration.AGE:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            return

        state_data = await state.get_data()
        if state_data.get('age_set'):
            logger.info(f"üîÑ –í–æ–∑—Ä–∞—Å—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user_id={user_id}")
            return

        try:
            age = int(message.text)
            if 18 <= age <= 100:
                logger.info(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç {age} –ø—Ä–∏–Ω—è—Ç –¥–ª—è user_id={user_id}")
                await state.update_data(age=age, age_set=True)  # age_set qo'shildi
                await message.answer(
                    "–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º!",
                    reply_markup=reply_kb.chooice_sex()
                )
                await state.set_state(LeomatchRegistration.SEX)
            else:
                logger.warning(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç {age} –æ—Ç user_id={user_id}")
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-100)")
        except ValueError:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ—Ç user_id={user_id}")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@client_bot_router.message(LeomatchRegistration.SEX)
async def process_gender(message: Message, state: FSMContext):
    """
    Jins tanlashni qayta ishlash
    """
    try:
        user_id = message.from_user.id
        current_time = datetime.now().timestamp()

        if current_time - last_message_time[user_id] < MIN_MESSAGE_INTERVAL:
            logger.info(f"‚è≥ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}")
            return

        last_message_time[user_id] = current_time
        logger.info(f"üîµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –æ—Ç user_id={user_id}: {message.text}")

        current_state = await state.get_state()
        if current_state != LeomatchRegistration.SEX:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            return

        state_data = await state.get_data()
        if state_data.get('sex_set'):
            logger.info(f"üîÑ –ü–æ–ª —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user_id={user_id}")
            return

        gender_mapping = {
            "–ú—É–∂—Å–∫–æ–π": "MALE",
            "–ñ–µ–Ω—Å–∫–∏–π": "FEMALE"
        }

        selected_gender = gender_mapping.get(message.text)

        if not selected_gender:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª–∞: {message.text}")
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ",
                reply_markup=reply_kb.chooice_sex()
            )
            return

        logger.info(f"‚úÖ –ü–æ–ª {selected_gender} –ø—Ä–∏–Ω—è—Ç –¥–ª—è user_id={user_id}")

        # Saqlash va keyingi bosqichga o'tish
        await state.update_data(sex=selected_gender, sex_set=True)  # sex_set qo'shildi
        await message.answer(
            "–ö–æ–≥–æ –í—ã –∏—â–∏—Ç–µ?",
            reply_markup=reply_kb.which_search()
        )
        await state.set_state(LeomatchRegistration.WHICH_SEARCH)
        logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∏—Å–∫–∞ –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª–∞ –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=reply_kb.chooice_sex()
        )


@client_bot_router.message(LeomatchRegistration.WHICH_SEARCH)
async def process_search_preference(message: Message, state: FSMContext):
    """
    Qidirish turini qayta ishlash
    """
    try:
        user_id = message.from_user.id
        logger.info(f"üîµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç user_id={user_id}: {message.text}")

        current_state = await state.get_state()
        if current_state != LeomatchRegistration.WHICH_SEARCH:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            return

        search_mapping = {
            "–ú—É–∂—Å–∫–æ–π": "MALE",
            "–ñ–µ–Ω—Å–∫–∏–π": "FEMALE",
            "–í—Å–µ —Ä–∞–≤–Ω–æ": "ANY"
        }

        search_type = search_mapping.get(message.text)

        if not search_type:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞: {message.text}")
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–≥–æ –í—ã –∏—â–∏—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏",
                reply_markup=reply_kb.which_search()
            )
            return

        logger.info(f"‚úÖ –¢–∏–ø –ø–æ–∏—Å–∫–∞ {search_type} –ø—Ä–∏–Ω—è—Ç –¥–ª—è user_id={user_id}")

        # Ma'lumotni saqlash va keyingi bosqichga o'tish
        await state.update_data(which_search=search_type)
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=reply_kb.remove())
        await state.set_state(LeomatchRegistration.CITY)
        logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –≥–æ—Ä–æ–¥–∞ –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=reply_kb.which_search()
        )


@client_bot_router.message(LeomatchRegistration.CITY)
async def process_city(message: Message, state: FSMContext):
    """
    Shahar kiritishni qayta ishlash
    """
    try:
        user_id = message.from_user.id
        logger.info(f"üîµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –æ—Ç user_id={user_id}: {message.text}")

        current_state = await state.get_state()
        if current_state != LeomatchRegistration.CITY:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            return

        city = message.text.strip()

        # Shahar nomini tekshirish
        if len(city) > 50:
            logger.warning(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç user_id={user_id}")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
            return

        logger.info(f"‚úÖ –ì–æ—Ä–æ–¥ {city} –ø—Ä–∏–Ω—è—Ç –¥–ª—è user_id={user_id}")

        await state.update_data(city=city)
        button = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text=message.from_user.full_name)]],
            resize_keyboard=True
        )
        await message.answer("–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?", reply_markup=button)
        await state.set_state(LeomatchRegistration.FULL_NAME)
        logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@client_bot_router.message(LeomatchRegistration.FULL_NAME)
async def process_name(message: Message, state: FSMContext):
    """
    Ism kiritishni qayta ishlash
    """
    try:
        user_id = message.from_user.id
        logger.info(f"üîµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –æ—Ç user_id={user_id}: {message.text}")

        name = message.text.strip()
        if len(name) > 15:
            logger.warning(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –æ—Ç user_id={user_id}")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤")
            return

        logger.info(f"‚úÖ –ò–º—è {name} –ø—Ä–∏–Ω—è—Ç–æ –¥–ª—è user_id={user_id}")

        await state.update_data(full_name=name)
        leo = await get_leo(message.from_user.id)

        kwargs = {}
        if leo:
            kwargs['reply_markup'] = reply_kb.save_current()

        await message.answer(
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏, —á–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é.",
            **kwargs
        )
        await state.set_state(LeomatchRegistration.ABOUT_ME)
        logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@client_bot_router.message(LeomatchRegistration.ABOUT_ME)
async def process_about(message: Message, state: FSMContext):
    """
    O'zingiz haqingizda ma'lumot kiritishni qayta ishlash
    """
    try:
        user_id = message.from_user.id
        logger.info(f"üîµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç user_id={user_id}")

        if len(message.text) > 300:
            logger.warning(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç user_id={user_id}")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤")
            return

        await state.update_data(about_me=message.text)
        await now_send_photo(message, state)
        logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@client_bot_router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", LeomatchRegistration.ABOUT_ME)
async def keep_current_about(message: Message, state: FSMContext):
    """
    Joriy malumotni saqlash
    """
    try:
        user_id = message.from_user.id
        logger.info(f"üîµ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è user_id={user_id}")

        leo = await get_leo(message.from_user.id)
        if not leo:
            logger.warning(f"‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è user_id={user_id}")
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ—à–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return

        await state.update_data(about_me=leo.about_me)
        await now_send_photo(message, state)
        logger.info(f"‚úÖ –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@client_bot_router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", LeomatchRegistration.SEND_PHOTO)
async def keep_current_photo(message: Message, state: FSMContext):
    """
    Joriy rasmni saqlash
    """
    try:
        user_id = message.from_user.id
        logger.info(f"üîµ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}")

        leo = await get_leo(message.from_user.id)
        if not leo:
            logger.warning(f"‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}")
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ—à–ª–æ–µ –º–µ–¥–∏–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return

        await save_media(message, state, leo.photo, leo.media_type)
        logger.info(f"‚úÖ –¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@client_bot_router.message(LeomatchRegistration.SEND_PHOTO)
async def process_photo(message: Message, state: FSMContext, bot: Bot):
    """
    Rasmni qayta ishlash
    """
    try:
        user_id = message.from_user.id
        logger.info(f"üîµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –æ—Ç user_id={user_id}")

        if not message.photo and not message.video:
            logger.warning(f"‚ùå –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –æ—Ç user_id={user_id}")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
            return

        url = ""
        type = ""

        if message.photo:
            url = message.photo[-1].file_id
            type = "PHOTO"
            format = "jpg"
            logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id}")
        elif message.video:
            if message.video.duration > 15:
                logger.warning(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –æ—Ç user_id={user_id}")
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥")
                return
            url = message.video.file_id
            type = "VIDEO"
            format = "mp4"
            logger.info(f"üé• –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç user_id={user_id}")

        # Create directory if doesn't exist
        data_dir = Path("modul/clientbot/data")
        data_dir.mkdir(parents=True, exist_ok=True)

        file_path = data_dir / f"leo{message.from_user.id}.{format}"

        try:
            async with Bot(token=bot.token, session=bot_session).context() as bot_:
                await bot_.download(url, destination=str(file_path))
                logger.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        except Exception as download_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(download_error)}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(photo=url, media_type=type)
        data = await state.get_data()

        try:
            await show_profile(
                message=message,
                uid=message.from_user.id,
                full_name=data.get('full_name'),
                age=data.get('age'),
                city=data.get('city'),
                about_me=data.get('about_me'),
                url=str(file_path),
                type=type
            )

            await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=reply_kb.final_registration())
            await state.set_state(LeomatchRegistration.FINAL)
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑–∞–Ω user_id={user_id}")

        except Exception as profile_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {str(profile_error)}")
            await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=reply_kb.final_registration())
            await state.set_state(LeomatchRegistration.FINAL)

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@client_bot_router.message(F.text == "–î–∞", LeomatchRegistration.FINAL)
async def finalize_registration(message: Message, state: FSMContext, bot: Bot):
    """
    Ro'yxatdan o'tishni yakunlash
    """
    try:
        user_id = message.from_user.id
        logger.info(f"üîµ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}")

        data = await state.get_data()

        # Collect all required data
        registration_data = {
            'photo': data['photo'],
            'media_type': data['media_type'],
            'sex': data['sex'],
            'age': data['age'],
            'full_name': data['full_name'],
            'about_me': data['about_me'],
            'city': data['city'],
            'which_search': data['which_search']
        }

        leo = await get_leo(user_id)
        if not leo:
            bot = await get_current_bot(bot)
            await add_leo(
                user_id,
                **registration_data,
                bot_username=bot.username
            )
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={user_id}")
        else:
            await update_leo(
                user_id,
                **registration_data
            )
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id={user_id}")

        await state.clear()
        await manage(message, state)

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")


@client_bot_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", LeomatchRegistration.FINAL)
async def edit_profile(message: Message, state: FSMContext):
    """
    Profilni tahrirlash
    """
    try:
        user_id = message.from_user.id
        logger.info(f"üîÑ –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id={user_id}")

        await begin_registration(message, state)
        logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–ª—è user_id={user_id}")

    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id={user_id}: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")