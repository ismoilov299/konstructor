# import asyncio
# import json
# from contextlib import suppress
#
# from aiogram import flags, types
# from aiogram.dispatcher.filters import Text
# from aiogram.dispatcher.fsm.context import FSMContext
# from aiogram.exceptions import (TelegramBadRequest, TelegramForbiddenError,
#                                 TelegramNotFound, TelegramRetryAfter)
# from aiogram.utils.i18n import gettext as _
#
# from clientbot import shortcuts, strings
# from clientbot.data import states
# from clientbot.data.callback_datas import (BroadcastCallbackData, FavouritesCallback, ServiceCallbackData,
#                                            ServiceCategoryCallbackData,
#                                            ServiceChoseCallbackData,
#                                            SocialNetworkCallbackData,
#                                            TransferCallbackData)
# from clientbot.handlers.main import social_networks
# from clientbot.keyboards import inline_kb, reply_kb
# from clientbot.utils.exceptions import UserNotFound
# from clientbot.utils.order import paginate_orders
# from clientbot.utils.smm import get_service
# from config import settings
# from general.shortcuts import save_user
# from general.inline_kbrd import percents
# from loader import client_bot_router
#
#
# @client_bot_router.callback_query(SocialNetworkCallbackData.filter())
# @flags.rate_limit(key="services")
# async def social_network(query: types.CallbackQuery, callback_data: SocialNetworkCallbackData):
#     if callback_data.action == "obtain":
#         try:
#             await query.message.edit_text(strings.CHOOSE_SOCIAL,
#                                           reply_markup=await inline_kb.service_category(callback_data.id))
#         except:
#             await query.message.answer(strings.CHOOSE_SOCIAL,
#                                        reply_markup=await inline_kb.service_category(callback_data.id))
#     elif callback_data.action == "favourites":
#         btns = await inline_kb.get_favourites_btns(query.from_user.id)
#         favourties = await shortcuts.get_favourites(query.from_user.id)
#         await query.message.edit_text(("–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ") if len(favourties) > 0 else ("–ü—É—Å—Ç–æ"), reply_markup=btns)
#     elif callback_data.action == "back":
#         with suppress(TelegramBadRequest):
#             await query.message.delete()
#         await query.message.answer(strings.MAIN_MENU.format(query.from_user.full_name),
#                                    reply_markup=await reply_kb.main_menu(query.message.from_user.id))
#
#
# @client_bot_router.callback_query(ServiceCategoryCallbackData.filter())
# @flags.rate_limit(key="services")
# async def service_category(query: types.CallbackQuery, callback_data: ServiceCategoryCallbackData):
#     if callback_data.action == "obtain":
#         await query.message.edit_text(strings.CHOOSE_SOCIAL,
#                                       reply_markup=await inline_kb.services(callback_data.smm_idx, callback_data.id))
#     elif callback_data.action == "back":
#         await query.message.edit_reply_markup(await inline_kb.social_networks())
#
#
# @client_bot_router.callback_query(ServiceCallbackData.filter())
# @flags.rate_limit(key="services", rate=2)
# async def services(query: types.CallbackQuery, callback_data: ServiceCallbackData):
#     if callback_data.action == "obtain":
#         service = await get_service(callback_data.id)
#         if not service:
#             await query.answer(("–£—Å–ª—É–≥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"), show_alert=True)
#             return
#         if int(service.min) == 1 and int(service.max) == 1:
#             service_price = float(service.rate)
#         else:
#             service_price = shortcuts.calculate_service_price(service)
#         price, _, _ = await shortcuts.calculate_price(query.from_user.id, service_price)
#         await query.message.edit_text(
#             strings.SERVICE_DETAILS.format(
#                 service_id=service.service,
#                 service=service.name,
#                 quantity="" if int(service.min) == 1 and int(service.max) == 1 else " –∑–∞ 1000",
#                 price=f"{price:.2f}",
#                 min=int(service.min),
#                 max=int(service.max),
#                 description=service.description,
#                 compilation_time=service.time
#             ),
#             reply_markup=inline_kb.service_chose(
#                 callback_data.smm_idx, callback_data.category_idx, callback_data.id)
#         )
#     elif callback_data.action == "back":
#         markup = await inline_kb.service_category(callback_data.smm_idx)
#         await query.message.edit_reply_markup(markup)
#
#
# @client_bot_router.callback_query(FavouritesCallback.filter())
# @flags.rate_limit(key="services")
# async def service_chose(query: types.CallbackQuery, state: FSMContext, callback_data: FavouritesCallback):
#     if callback_data.action == "view":
#         service = await get_service(callback_data.service)
#         if int(service.min) == 1 and int(service.max) == 1:
#             service_price = float(service.rate)
#         else:
#             service_price = shortcuts.calculate_service_price(service)
#         price, _, _ = await shortcuts.calculate_price(query.from_user.id, service_price)
#         await query.message.edit_text(
#             strings.SERVICE_DETAILS.format(
#                 service_id=service.service,
#                 service=service.name,
#                 quantity="" if int(service.min) == 1 and int(service.max) == 1 else " –∑–∞ 1000",
#                 price=f"{price:.2f}",
#                 min=int(service.min),
#                 max=int(service.max),
#                 description=service.description,
#                 compilation_time=service.time
#             ),
#             reply_markup=inline_kb.favourite_service_chose(callback_data.smm, callback_data.category,
#                                                            callback_data.service)
#         )
#     elif callback_data.action == "delete":
#         await query.answer(("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"), show_alert=True)
#         await shortcuts.delete_from_favourites(query.from_user.id, callback_data.service)
#         btns = await inline_kb.get_favourites_btns(query.from_user.id)
#         favourties = await shortcuts.get_favourites(query.from_user.id)
#         await query.message.edit_text(("–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ") if len(favourties) > 0 else ("–ü—É—Å—Ç–æ"), reply_markup=btns)
#     elif callback_data.action == "back":
#         await social_network(query, SocialNetworkCallbackData(
#             action="favourites", id=0
#         ))
#     elif callback_data.action == "exit":
#         await query.message.delete()
#         await social_networks(query.message)
#
#
# @client_bot_router.callback_query(ServiceChoseCallbackData.filter())
# @flags.rate_limit(key="services")
# async def service_chose(query: types.CallbackQuery, state: FSMContext, callback_data: ServiceChoseCallbackData):
#     service = await get_service(callback_data.service)
#     if service:
#         if callback_data.action == "back":
#             await query.message.edit_text(strings.CHOOSE_SOCIAL,
#                                           reply_markup=await inline_kb.services(callback_data.smm_idx,
#                                                                                 callback_data.category_idx))
#         elif callback_data.action == "add_to_favourites":
#             res = await shortcuts.add_to_favourites(query.from_user.id, callback_data.service, callback_data.smm_idx,
#                                                     callback_data.category_idx)
#             await query.answer(("–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ") if res else ("–£—Å–ª—É–≥–∞ —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ"),
#                                show_alert=True)
#         else:
#             with suppress(TelegramBadRequest):
#                 await query.message.edit_reply_markup()
#                 await query.message.answer(
#                     ("üí¨ –í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ ¬´{service_name}¬ª\n\n"
#                       "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É.").format(service_name=service.name),
#                     reply_markup=reply_kb.cancel()
#                 )
#                 await state.set_state(states.Order.link)
#                 await state.update_data(_service=callback_data.service)
#                 await state.update_data(_category_idx=callback_data.category_idx)
#                 await state.update_data(_smm_idx=callback_data.smm_idx)
#                 await query.answer()
#     else:
#         await query.answer(("–£—Å–ª—É–≥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"), show_alert=True)
#
#
# # Transfer to balance
# @client_bot_router.callback_query(TransferCallbackData.filter())
# @flags.rate_limit(key="transfer_money")
# async def transfer_money(query: types.CallbackQuery, state: FSMContext):
#     if await shortcuts.referral_balance(query.from_user.id) <= 0:
#         await query.answer(_("‚õîÔ∏è –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"), show_alert=True)
#     else:
#         await query.answer()
#         try:
#             await query.message.delete()
#         except TelegramBadRequest:
#             pass
#         await query.message.answer(_("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç"),
#                                    reply_markup=reply_kb.cancel())
#         await state.set_state(states.Transfer.amount)
#
#
# # Order pagination
# @client_bot_router.callback_query(Text(text_startswith="child-change-percent"))
# @flags.rate_limit(key="order_paginate")
# async def order_paginate(query: types.CallbackQuery):
#     bot = await shortcuts.get_current_bot()
#     await query.message.edit_text(_("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É"),
#                                   reply_markup=percents('edit-bot-percent', 'back-child-admin', bot.id))
#
#
# @client_bot_router.callback_query(Text(text_startswith="delete"))
# @flags.rate_limit(key="order_paginate")
# async def order_paginate(query: types.CallbackQuery):
#     await query.message.delete()
#
#
# @client_bot_router.callback_query(Text(text_startswith="order-pagination"))
# @flags.rate_limit(key="order_paginate")
# async def order_paginate(query: types.CallbackQuery):
#     page = int(query.data.split(":")[1])
#     try:
#         text, reply_markup = await paginate_orders(query.from_user.id, page)
#     except UserNotFound:
#         await save_user(query.from_user)
#         text, reply_markup = await paginate_orders(query.from_user.id, page)
#     await query.message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
#
#
# @client_bot_router.callback_query(BroadcastCallbackData.filter(), state=states.Broadcast.confirmation)
# @flags.rate_limit(key="broadcast_confirmation")
# async def broadcast_confirmation(query: types.CallbackQuery, callback_data: BroadcastCallbackData,
#                                  state: FSMContext):
#     if callback_data.confirm:
#         await query.message.edit_text(strings.WAIT)
#         users = await shortcuts.get_all_users()
#         data = await state.get_data()
#         message = types.Message(**json.loads(data.get('message')))
#         await state.clear()
#         succeed, failed = 0, 0
#         for user in users:
#             if user.uid in settings.ADMIN_LIST:
#                 continue
#             try:
#                 await message.send_copy(user.uid)
#                 succeed += 1
#                 await asyncio.sleep(settings.SLEEP_TIME)
#             except TelegramRetryAfter as e:
#                 await asyncio.sleep(e.retry_after)
#             except (TelegramBadRequest, TelegramForbiddenError, TelegramNotFound):
#                 failed += 1
#         await query.message.answer(strings.BROADCAST_RESULT.format(succeed, failed))
#     else:
#         await query.message.edit_text(strings.CANCELLED)
#
#     await state.clear()
#
#
# @client_bot_router.callback_query(BroadcastCallbackData.filter())
# @flags.rate_limit(key="cancel_broadcasting")
# async def cancel_broadcasting(query: types.CallbackQuery):
#     await query.answer(_("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ."))
#     try:
#         await query.message.delete()
#     except TelegramBadRequest:
#         await query.message.edit_reply_markup()
#
#
# @client_bot_router.callback_query(text="faq-information")
# @flags.rate_limit(key="faq-information")
# async def cancel_broadcasting(query: types.CallbackQuery):
#     await query.message.answer(_("""‚ñ∂Ô∏è–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
# –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –û–±—ã—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ - 7 –¥–Ω–µ–π. –ï—Å–ª–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –∑–∞–∫–∞–∑ –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–ª–∏–µ–Ω—Ç—É —Å–ª–µ–¥—É–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
# ‚ñ∂Ô∏è–û—à–∏–±–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ç–∏–ø —É—Å–ª—É–≥–∏
# –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—à–∏–±–æ—á–Ω–æ —É–∫–∞–∑–∞–ª —Å—Å—ã–ª–∫—É, –∏–ª–∏ —É—Å–ª—É–≥—É –Ω–∞ –Ω–µ—ë - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è, –∏–ª–∏ –Ω–µ –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –≤ –¥–∞–Ω–Ω–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ - —Ç–æ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 7-–º–∏ –¥–Ω–µ–π –æ—Ç–º–µ–Ω—ë–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ—Å–∫–æ–ª—å–∫—É –∑–∞–∫–∞–∑—ã –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º.
# ‚ñ∂Ô∏è–°–ø–∏—Å–∞–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
# –ï—Å–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –µ–¥–∏–Ω–∏—á–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è - —Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–ø–∏—Å–∫–∏. –ú–∞—Å—Å–æ–≤–æ - –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —Å–∞–º–∏ –ø–æ —Å–µ–±–µ –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞—é—Ç—Å—è. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –º–∞—Å—Å–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ - –∑–Ω–∞—á–∏—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤ —Å–æ—Ü. —Å–µ—Ç–∏, –≥–¥–µ –≤—ã –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç–µ –∞–∫–∫–∞—É–Ω—Ç - –∑–∞–ø–æ–¥–æ–∑—Ä–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –õ—é–±—É—é –Ω–∞–∫—Ä—É—Ç–∫—É –í—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –∏ –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π –∫—Ä–æ–º–µ –í–∞—Å - –∑–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å—ë—Ç.
# ‚ñ∂Ô∏è–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç
# –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å—Ä–∞–∑—É –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞ —Å—á—ë—Ç. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–∫–∞—è- –ª–∏–±–æ —É—Å–ª—É–≥–∞ - —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å—Ä–∞–∑—É —É–π–¥—É—Ç –Ω–∞ –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ - –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏¬ª. –ï—Å–ª–∏ –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –∞ –±–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω (–∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω) - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
# ‚ñ∂Ô∏è–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
# –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞ –±–∞–ª–∞–Ω—Å - –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É."""))
