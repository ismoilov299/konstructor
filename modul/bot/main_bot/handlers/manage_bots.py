


import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from modul.bot.main_bot.handlers.admin_panel import is_admin_user
from modul.bot.main_bot.services.user_service import (
    get_user_bots, get_bot_statistics, toggle_bot_status,
    update_bot_modules, delete_bot
)
from modul.bot.main_bot.states import ManageBotStates
from modul.models import Bot

from datetime import datetime, timedelta
from django.db.models import Count, Q, Sum
from django.utils import timezone
from asgiref.sync import sync_to_async

logger = logging.getLogger(__name__)

manage_bots_router = Router()


# Keyboard funksiyalari
async def bot_list_keyboard(user_bots):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤"""
    buttons = []

    for bot in user_bots:
        status = "üü¢" if bot.get('bot_enable', False) else "üî¥"
        modules_count = sum([
            bot.get('enable_refs', False),
            bot.get('enable_leo', False),
            bot.get('enable_asker', False),
            bot.get('enable_kino', False),
            bot.get('enable_download', False),
            bot.get('enable_chatgpt', False)
        ])

        button_text = f"{status} @{bot['username']} "
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"manage_bot:{bot['id']}"
        )])

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–æ—Ç", callback_data="create_bot")])
    buttons.append([InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="overall_stats")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def bot_management_keyboard(bot_id, is_active=True):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    buttons = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"bot_stats:{bot_id}")],
        # [InlineKeyboardButton(text="üîß –ú–æ–¥—É–ª–∏", callback_data=f"edit_modules:{bot_id}")],
        # [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"bot_settings:{bot_id}")],
        [
            # InlineKeyboardButton(
            #     text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if is_active else "üü¢ –í–∫–ª—é—á–∏—Ç—å",
            #     callback_data=f"toggle_bot:{bot_id}"
            # ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_bot:{bot_id}"
            )
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–∏ –±–æ—Ç—ã", callback_data="my_bots")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def bot_modules_edit_keyboard(bot_id, current_modules):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞"""
    modules = [
        ("refs", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π üë•"),
        ("leo", "–î–∞–π–≤–∏–Ω—á–∏–∫ üíû"),
        ("asker", "Asker –ë–æ—Ç üí¨"),
        ("kino", "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä üé•"),
        ("download", "DownLoader üíæ"),
        ("chatgpt", "ChatGPT üí°")
    ]

    buttons = []
    row = []
    for i, (module_key, module_name) in enumerate(modules):
        icon = "‚úÖ" if current_modules.get(f'enable_{module_key}', False) else "‚¨ú"
        text = f"{icon} {module_name}"
        row.append(InlineKeyboardButton(
            text=text,
            callback_data=f"toggle_module:{bot_id}:{module_key}"
        ))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if len(row) == 2 or i == len(modules) - 1:
            buttons.append(row)
            row = []

    buttons.append([InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_modules:{bot_id}")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_bot:{bot_id}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def confirm_delete_keyboard(bot_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{bot_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"manage_bot:{bot_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# Handler'lar
@manage_bots_router.callback_query(F.data == "my_bots")
async def show_my_bots(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_bots = await get_user_bots(callback.from_user.id)

        if not user_bots:
            await callback.message.edit_text(
                "ü§ñ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤</b>\n\n"
                "üöÄ <b>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞!</b>\n"
                "–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–µ:\n"
                "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏\n"
                "‚Ä¢ –ì–æ—Ç–æ–≤–æ –∑–∞ 2-3 –º–∏–Ω—É—Ç—ã!\n\n"
                "üí° <b>–î–æ—Å—Ç—É–ø–Ω–æ 6 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤:</b>\n"
                "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π, üíû –î–∞–π–≤–∏–Ω—á–∏–∫, üí¨ Asker –ë–æ—Ç,\n"
                "üé• –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä, üíæ DownLoader, üí° ChatGPT",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –±–æ—Ç", callback_data="create_bot")],
                    [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤
        total_bots = len(user_bots)
        active_bots = sum(1 for bot in user_bots if bot.get('bot_enable', False))
        total_modules = sum(
            sum([
                bot.get('enable_refs', False),
                bot.get('enable_leo', False),
                bot.get('enable_asker', False),
                bot.get('enable_kino', False),
                bot.get('enable_download', False),
                bot.get('enable_chatgpt', False)
            ]) for bot in user_bots
        )

        text = (
            f"ü§ñ <b>–í–∞—à–∏ –±–æ—Ç—ã</b>\n\n"
            f"üìä <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {total_bots}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {active_bots}\n"
            # f"‚Ä¢ –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {total_modules}\n\n"
            f"üìã <b>–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:</b>\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üì"
        )

        await callback.message.edit_text(
            text,
            reply_markup=await bot_list_keyboard(user_bots),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error showing user bots for {callback.from_user.id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–æ–≤</b>\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="my_bots")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]),
            parse_mode="HTML"
        )

    await callback.answer()


@manage_bots_router.callback_query(F.data.startswith("manage_bot:"))
async def manage_specific_bot(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–æ—Ç–æ–º"""
    try:
        bot_id = int(callback.data.split(":")[1])
        bot_stats = await get_bot_statistics(bot_id)

        if not bot_stats:
            await callback.message.edit_text(
                "‚ùå <b>–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–∏ –±–æ—Ç—ã", callback_data="my_bots")]
                ]),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –°–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        enabled_modules = []
        module_names = {
            'enable_refs': 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π',
            'enable_leo': 'üíû –î–∞–π–≤–∏–Ω—á–∏–∫',
            'enable_asker': 'üí¨ Asker –ë–æ—Ç',
            'enable_kino': 'üé• –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
            'enable_download': 'üíæ DownLoader',
            'enable_chatgpt': 'üí° ChatGPT'
        }

        for key, name in module_names.items():
            if bot_stats.get(key, False):
                enabled_modules.append(name)

        modules_text = ", ".join(enabled_modules) if enabled_modules else "–ù–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –Ω–µ –≤–∫–ª—é—á–µ–Ω"

        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_icon = "üü¢" if bot_stats['is_active'] else "üî¥"
        activity_text = "–ê–∫—Ç–∏–≤–µ–Ω" if bot_stats['is_active'] else "–í—ã–∫–ª—é—á–µ–Ω"

        # –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        growth_text = ""
        if bot_stats['new_users'] > 0:
            growth_text = f"üìà +{bot_stats['new_users']} (24 —á–∞—Å–∞)"

        text = (
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</b>\n\n"
            f"ü§ñ <b>@{bot_stats['bot_username']}</b>\n"
            f"{activity_icon} <b>–°—Ç–∞—Ç—É—Å:</b> {activity_text}\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {bot_stats['total_users']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {bot_stats['active_users']}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö (24 —á–∞—Å–∞): {bot_stats['new_users']}\n\n"
            f"üîß <b>–ú–æ–¥—É–ª–∏:</b>\n"
            f"{modules_text}\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> https://t.me/{bot_stats['bot_username']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await callback.message.edit_text(
            text,
            reply_markup=await bot_management_keyboard(bot_id, bot_stats['is_active']),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error managing bot for {callback.from_user.id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ú–æ–∏ –±–æ—Ç—ã", callback_data="my_bots")]
            ]),
            parse_mode="HTML"
        )

    await callback.answer()


@manage_bots_router.callback_query(F.data.startswith("bot_stats:"))
async def show_bot_detailed_stats(callback: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    try:
        bot_id = int(callback.data.split(":")[1])
        bot_stats = await get_bot_statistics(bot_id)

        if not bot_stats:
            await callback.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞
        total_users = bot_stats['total_users']
        new_users = bot_stats['new_users']
        active_users = bot_stats['active_users']

        # –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_percentage = (active_users / total_users * 100) if total_users > 0 else 0

        # –°—Ç–∞—Ç—É—Å
        status_icon = "üü¢" if bot_stats['is_active'] else "üî¥"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if bot_stats['is_active'] else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{bot_stats['bot_username']}</b>\n\n"
            f"{status_icon} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {active_users} ({activity_percentage:.1f}%)\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö (24 —á–∞—Å–∞): {new_users}\n\n"
            f"üìà <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"
            f"{'‚ñì' * int(activity_percentage // 10)}{'‚ñë' * (10 - int(activity_percentage // 10))} {activity_percentage:.1f}%\n\n"
            f"üîß <b>–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª–µ–π
        module_names = {
            'enable_refs': 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π',
            'enable_leo': 'üíû –î–∞–π–≤–∏–Ω—á–∏–∫',
            'enable_asker': 'üí¨ Asker –ë–æ—Ç',
            'enable_kino': 'üé• –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
            'enable_download': 'üíæ DownLoader',
            'enable_chatgpt': 'üí° ChatGPT'
        }

        enabled_count = 0
        for key, name in module_names.items():
            if bot_stats.get(key, False):
                text += f"‚Ä¢ ‚úÖ {name}\n"
                enabled_count += 1

        if enabled_count == 0:
            text += "‚Ä¢ ‚ùå –ù–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –Ω–µ –≤–∫–ª—é—á–µ–Ω\n"

        text += f"\nüìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"bot_stats:{bot_id}")],
                [InlineKeyboardButton(text="üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data=f"bot_chart:{bot_id}")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_bot:{bot_id}")]
            ]),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error showing bot stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!", show_alert=True)


@manage_bots_router.callback_query(F.data.startswith("edit_modules:"))
async def edit_bot_modules(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞"""
    try:
        bot_id = int(callback.data.split(":")[1])
        bot_stats = await get_bot_statistics(bot_id)

        if not bot_stats:
            await callback.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        text = (
            f"üîß <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–≤ @{bot_stats['bot_username']}</b>\n\n"
            f"–°–ª–µ–¥—É—é—â–∏–µ –º–æ–¥—É–ª–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å:\n"
            f"–ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –≤–∞—à –±–æ—Ç.\n\n"
            f"‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏\n"
            f"‚¨ú –í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ–¥—É–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )

        await callback.message.edit_text(
            text,
            reply_markup=await bot_modules_edit_keyboard(bot_id, bot_stats),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error editing bot modules: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@manage_bots_router.callback_query(F.data.startswith("toggle_module:"))
async def toggle_bot_module(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –±–æ—Ç–∞"""
    try:
        _, bot_id, module_name = callback.data.split(":")
        bot_id = int(bot_id)

        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–æ–¥—É–ª–∏
        bot_stats = await get_bot_statistics(bot_id)
        if not bot_stats:
            await callback.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å
        current_value = bot_stats.get(f'enable_{module_name}', False)
        new_modules = {module_name: not current_value}

        success = await update_bot_modules(bot_id, callback.from_user.id, new_modules)

        if success:
            module_names = {
                'refs': '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π',
                'leo': '–î–∞–π–≤–∏–Ω—á–∏–∫',
                'asker': 'Asker –ë–æ—Ç',
                'kino': '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
                'download': 'DownLoader',
                'chatgpt': 'ChatGPT'
            }

            module_display = module_names.get(module_name, module_name)
            status = "–≤–∫–ª—é—á–µ–Ω" if not current_value else "–≤—ã–∫–ª—é—á–µ–Ω"

            await callback.answer(f"‚úÖ {module_display} {status}")

            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π
            await edit_bot_modules(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è!", show_alert=True)

    except Exception as e:
        logger.error(f"Error toggling bot module: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@manage_bots_router.callback_query(F.data.startswith("toggle_bot:"))
async def toggle_bot_status_handler(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    try:
        bot_id = int(callback.data.split(":")[1])
        new_status = await toggle_bot_status(bot_id, callback.from_user.id)

        if new_status is None:
            await callback.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç!", show_alert=True)
            return

        status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
        status_icon = "üü¢" if new_status else "üî¥"

        await callback.answer(f"{status_icon} –ë–æ—Ç {status_text}!", show_alert=True)

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await manage_specific_bot(callback)

    except Exception as e:
        logger.error(f"Error toggling bot status: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@manage_bots_router.callback_query(F.data.startswith("delete_bot:"))
async def request_bot_deletion(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
    try:
        bot_id = int(callback.data.split(":")[1])
        bot_stats = await get_bot_statistics(bot_id)

        if not bot_stats:
            await callback.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        text = (
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞</b>\n\n"
            f"ü§ñ <b>–ë–æ—Ç:</b> @{bot_stats['bot_username']}\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {bot_stats['total_users']}\n\n"
            f"‚ùó <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b>\n"
            f"‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω\n"
            f"‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã\n"
            f"‚Ä¢ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?"
        )

        await callback.message.edit_text(
            text,
            reply_markup=await confirm_delete_keyboard(bot_id),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error requesting bot deletion: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@manage_bots_router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_bot_deletion(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
    try:
        bot_id = int(callback.data.split(":")[1])

        deleted_username = await delete_bot(bot_id, callback.from_user.id)

        if deleted_username:
            await callback.message.edit_text(
                f"‚úÖ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"ü§ñ <b>–£–¥–∞–ª–µ–Ω–Ω—ã–π –±–æ—Ç:</b> @{deleted_username}\n\n"
                f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.\n"
                f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–æ—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–æ—Ç", callback_data="create_bot")],
                    [InlineKeyboardButton(text="ü§ñ –ú–æ–∏ –±–æ—Ç—ã", callback_data="my_bots")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ]),
                parse_mode="HTML"
            )

            logger.info(f"Bot deleted: @{deleted_username} by user {callback.from_user.id}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞!", show_alert=True)

    except Exception as e:
        logger.error(f"Error confirming bot deletion: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)





# Database query functions
@sync_to_async
def get_overall_statistics():
    """Umumiy statistika ma'lumotlarini olish"""
    try:
        from modul.models import Bot, ClientBotUser, UserTG, User

        # Bugungi sana
        today = timezone.now().date()
        yesterday = today - timedelta(days=1)
        week_ago = today - timedelta(days=7)
        month_ago = today - timedelta(days=30)

        # Asosiy statistika
        total_bots = Bot.objects.count()
        active_bots = Bot.objects.filter(bot_enable=True).count()
        inactive_bots = total_bots - active_bots

        # Foydalanuvchilar statistikasi
        total_users = ClientBotUser.objects.count()
        total_unique_users = UserTG.objects.count()

        # Bugungi yangi foydalanuvchilar
        today_new_users = ClientBotUser.objects.filter(
            user__created_at__date=today
        ).count()

        # Kechagi yangi foydalanuvchilar
        yesterday_new_users = ClientBotUser.objects.filter(
            user__created_at__date=yesterday
        ).count()

        # Haftalik yangi foydalanuvchilar
        week_new_users = ClientBotUser.objects.filter(
            user__created_at__date__gte=week_ago
        ).count()

        # Oylik yangi foydalanuvchilar
        month_new_users = ClientBotUser.objects.filter(
            user__created_at__date__gte=month_ago
        ).count()

        # Eng mashhur botlar (foydalanuvchilar soni bo'yicha)
        top_bots = Bot.objects.filter(bot_enable=True).annotate(
            user_count=Count('clients')
        ).order_by('-user_count')[:5]

        # Bot turlari bo'yicha statistika
        module_stats = {
            'ChatGPT': Bot.objects.filter(enable_chatgpt=True, bot_enable=True).count(),
            'Download': Bot.objects.filter(enable_download=True, bot_enable=True).count(),
            'Leo/Davinci': Bot.objects.filter(Q(enable_leo=True) | Q(enable_davinci=True), bot_enable=True).count(),
            'Anon Chat': Bot.objects.filter(enable_anon=True, bot_enable=True).count(),
            'Referral': Bot.objects.filter(enable_refs=True, bot_enable=True).count(),
            'Kino': Bot.objects.filter(enable_kino=True, bot_enable=True).count(),
        }

        # Bot owner'lar statistikasi
        total_owners = Bot.objects.values('owner').distinct().count()
        most_active_owner = Bot.objects.values('owner__username', 'owner__first_name').annotate(
            bot_count=Count('id')
        ).order_by('-bot_count').first()

        # O'sish tendentsiyasi (bugun vs kecha)
        growth_rate = 0
        if yesterday_new_users > 0:
            growth_rate = ((today_new_users - yesterday_new_users) / yesterday_new_users) * 100

        return {
            'total_bots': total_bots,
            'active_bots': active_bots,
            'inactive_bots': inactive_bots,
            'total_users': total_users,
            'total_unique_users': total_unique_users,
            'today_new_users': today_new_users,
            'yesterday_new_users': yesterday_new_users,
            'week_new_users': week_new_users,
            'month_new_users': month_new_users,
            'top_bots': list(top_bots),
            'module_stats': module_stats,
            'total_owners': total_owners,
            'most_active_owner': most_active_owner,
            'growth_rate': growth_rate,
            'today': today.strftime('%Y-%m-%d'),
        }

    except Exception as e:
        logger.error(f"Error getting overall statistics: {e}")
        return None


@sync_to_async
def get_detailed_bot_stats():
    """Botlar bo'yicha batafsil statistika"""
    try:
        from modul.models import Bot, ClientBotUser

        # Har bir bot uchun foydalanuvchilar soni
        bot_stats = []
        bots = Bot.objects.filter(bot_enable=True).annotate(
            user_count=Count('clients')
        ).order_by('-user_count')

        for bot in bots:
            # Enabled modules
            enabled_modules = []
            if bot.enable_chatgpt:
                enabled_modules.append('ChatGPT')
            if bot.enable_download:
                enabled_modules.append('Download')
            if bot.enable_leo:
                enabled_modules.append('Leo')
            if bot.enable_davinci:
                enabled_modules.append('Davinci')
            if bot.enable_anon:
                enabled_modules.append('Anon')
            if bot.enable_refs:
                enabled_modules.append('Refs')
            if bot.enable_kino:
                enabled_modules.append('Kino')

            bot_stats.append({
                'username': bot.username,
                'user_count': bot.user_count,
                'owner': bot.owner.username or bot.owner.first_name or f'User{bot.owner.uid}',
                'modules': enabled_modules,
                'module_count': len(enabled_modules)
            })

        return bot_stats[:10]  # Top 10 botlar

    except Exception as e:
        logger.error(f"Error getting detailed bot stats: {e}")
        return []


def format_number(num):
    """Sonlarni formatlash (1000 -> 1K)"""
    if num >= 1000000:
        return f"{num / 1000000:.1f}M"
    elif num >= 1000:
        return f"{num / 1000:.1f}K"
    else:
        return str(num)


def get_growth_emoji(rate):
    """O'sish ko'rsatkichi uchun emoji"""
    if rate > 10:
        return "üöÄ"
    elif rate > 5:
        return "üìà"
    elif rate > 0:
        return "‚ÜóÔ∏è"
    elif rate == 0:
        return "‚û°Ô∏è"
    elif rate > -5:
        return "‚ÜòÔ∏è"
    else:
        return "üìâ"


@manage_bots_router.callback_query(F.data == "overall_stats")
async def overall_stats_callback(callback: CallbackQuery):
    """Umumiy statistika ko'rsatish"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        # Loading message
        await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

        # Ma'lumotlarni olish
        stats = await get_overall_statistics()
        detailed_stats = await get_detailed_bot_stats()

        if not stats:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
                ])
            )
            return

        # Growth emoji
        growth_emoji = get_growth_emoji(stats['growth_rate'])

        # Asosiy statistika matni
        text = f"""
üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>

ü§ñ <b>–ë–æ—Ç—ã:</b>
‚îú –í—Å–µ–≥–æ: {stats['total_bots']}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_bots']} ‚úÖ
‚îî –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive_bots']} ‚ùå

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚îú –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {format_number(stats['total_users'])}
‚îú –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {format_number(stats['total_unique_users'])}
‚îú –°–µ–≥–æ–¥–Ω—è: +{stats['today_new_users']} {growth_emoji}
‚îú –í—á–µ—Ä–∞: +{stats['yesterday_new_users']}
‚îú –ó–∞ –Ω–µ–¥–µ–ª—é: +{stats['week_new_users']}
‚îî –ó–∞ –º–µ—Å—è—Ü: +{stats['month_new_users']}

üìà <b>–†–æ—Å—Ç:</b>
‚îî {growth_emoji} {stats['growth_rate']:+.1f}% (—Å–µ–≥–æ–¥–Ω—è vs –≤—á–µ—Ä–∞)

üèÜ <b>–¢–æ–ø –º–æ–¥—É–ª–µ–π:</b>
"""

        # Modullar statistikasi
        for module, count in stats['module_stats'].items():
            if count > 0:
                percentage = (count / stats['active_bots'] * 100) if stats['active_bots'] > 0 else 0
                text += f"‚îú {module}: {count} ({percentage:.1f}%)\n"

        # Eng mashhur botlar
        if stats['top_bots']:
            text += f"\nü•á <b>–¢–æ–ø –±–æ—Ç–æ–≤:</b>\n"
            for i, bot in enumerate(stats['top_bots'][:3], 1):
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                text += f"{emoji} @{bot.username}: {format_number(bot.user_count)} –ø–æ–ª—å–∑.\n"

        # –í–ª–∞–¥–µ–ª—å—Ü—ã
        if stats['most_active_owner']:
            owner_name = stats['most_active_owner']['owner__username'] or stats['most_active_owner'][
                'owner__first_name'] or 'Unknown'
            text += f"\nüëë <b>–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü:</b>\n"
            text += f"‚îî {owner_name} ({stats['most_active_owner']['bot_count']} –±–æ—Ç–æ–≤)\n"

        text += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"

        # Keyboard
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="overall_stats")
        )
        keyboard.row(
            InlineKeyboardButton(text="üìä –ü–æ –º–æ–¥—É–ª—è–º", callback_data="module_stats"),
            InlineKeyboardButton(text="üë• –ü–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º", callback_data="owner_stats")
        )
        keyboard.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")
        )

        await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in overall_stats: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
            ])
        )
        await callback.answer()


@manage_bots_router.callback_query(F.data == "detailed_stats")
async def detailed_stats_callback(callback: CallbackQuery):
    """Batafsil statistika"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

        bot_stats = await get_detailed_bot_stats()

        if not bot_stats:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="overall_stats")]
                ])
            )
            return

        text = "üìã <b>–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–û–í</b>\n\n"

        for i, bot in enumerate(bot_stats, 1):
            modules_text = ", ".join(bot['modules']) if bot['modules'] else "–ù–µ—Ç –º–æ–¥—É–ª–µ–π"
            text += f"<b>{i}. @{bot['username']}</b>\n"
            text += f"‚îú üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {format_number(bot['user_count'])}\n"
            text += f"‚îú üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {bot['owner']}\n"
            text += f"‚îú üß© –ú–æ–¥—É–ª–µ–π: {bot['module_count']}\n"
            text += f"‚îî üìã {modules_text}\n\n"

        text += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"

        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="detailed_stats"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="overall_stats")
        )

        await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in detailed_stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)


@manage_bots_router.callback_query(F.data == "module_stats")
async def module_stats_callback(callback: CallbackQuery):
    """Modullar bo'yicha statistika"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text("üß© –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª–µ–π...")

        stats = await get_overall_statistics()

        if not stats:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)
            return

        text = "üß© <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–û–î–£–õ–Ø–ú</b>\n\n"

        # Modullarni popularity bo'yicha saralash
        sorted_modules = sorted(stats['module_stats'].items(), key=lambda x: x[1], reverse=True)

        total_active_bots = stats['active_bots']

        for module, count in sorted_modules:
            if count > 0:
                percentage = (count / total_active_bots * 100) if total_active_bots > 0 else 0
                bar_length = int(percentage / 10)  # 10% = 1 –±–ª–æ–∫
                bar = "‚ñà" * bar_length + "‚ñë" * (10 - bar_length)

                text += f"<b>{module}:</b>\n"
                text += f"‚îú –ë–æ—Ç–æ–≤: {count}\n"
                text += f"‚îú –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%\n"
                text += f"‚îî {bar}\n\n"

        text += f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {total_active_bots}\n"
        text += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"

        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="module_stats"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="overall_stats")
        )

        await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in module_stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)


@manage_bots_router.callback_query(F.data == "owner_stats")
async def owner_stats_callback(callback: CallbackQuery):
    """Egalar bo'yicha statistika"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text("üë• –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤...")

        # Top owners query
        top_owners = await sync_to_async(lambda: list(
            Bot.objects.values(
                'owner__username',
                'owner__first_name',
                'owner__uid'
            ).annotate(
                bot_count=Count('id'),
                active_bot_count=Count('id', filter=Q(bot_enable=True)),
                total_users=Count('clients', distinct=True)
            ).order_by('-bot_count')[:10]
        ))()

        if not top_owners:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="overall_stats")]
                ])
            )
            return

        text = "üëë <b>–¢–û–ü –í–õ–ê–î–ï–õ–¨–¶–ï–í –ë–û–¢–û–í</b>\n\n"

        for i, owner in enumerate(top_owners, 1):
            name = owner['owner__username'] or owner['owner__first_name'] or f"User{owner['owner__uid']}"
            emoji = "üëë" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."

            text += f"<b>{emoji} {name}</b>\n"
            text += f"‚îú ü§ñ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {owner['bot_count']}\n"
            text += f"‚îú ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {owner['active_bot_count']}\n"
            text += f"‚îî üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {format_number(owner['total_users'])}\n\n"

        text += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"

        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="owner_stats"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="overall_stats")
        )

        await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in owner_stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)