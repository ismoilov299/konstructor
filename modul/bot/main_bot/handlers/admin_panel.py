# modul/bot/main_bot/handlers/admin_panel.py
import json

from aiogram import F, Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async
from django.db.models import Count, Q
from modul.loader import main_bot_router
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class AdminChannelStates(StatesGroup):
    waiting_for_channel_message = State()
    waiting_for_broadcast_message = State()

# –ê–¥–º–∏–Ω ID —Å–ø–∏—Å–æ–∫
ADMIN_IDS = [
    1161180912,  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω
    # 558618720,  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥–º–∏–Ω
]


def is_admin_user(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    return user_id in ADMIN_IDS


def get_admin_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton(text="ü§ñ –ë–æ—Ç—ã", callback_data="admin_bots")
    )
    keyboard.row(
        InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
        InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª—ã", callback_data="admin_channels")
    )
    keyboard.row(
        InlineKeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),  # Yangi tugma
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")
    )

    return keyboard.as_markup()

@sync_to_async
def get_all_active_bots():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã"""
    try:
        from modul.models import Bot
        bots = Bot.objects.filter(bot_enable=True).values('token', 'username')
        return list(bots)
    except Exception as e:
        logger.error(f"Error getting active bots: {e}")
        return []

@sync_to_async
def get_all_bot_users():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
    try:
        from modul.models import ClientBotUser
        users = ClientBotUser.objects.select_related('user', 'bot').filter(
            bot__bot_enable=True
        ).values('uid', 'bot__token')
        return list(users)
    except Exception as e:
        logger.error(f"Error getting bot users: {e}")
        return []

def get_channels_menu():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="channels_list"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_add")
    )
    keyboard.row(
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="channels_delete"),
        InlineKeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤", callback_data="channels_status")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")
    )

    return keyboard.as_markup()


def get_back_menu():
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main"))
    return keyboard.as_markup()


# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ====================

@sync_to_async
def get_system_stats():
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from modul.models import Bot, UserTG, SystemChannel

        total_bots = Bot.objects.count()
        total_users = UserTG.objects.count()
        system_channels = SystemChannel.objects.filter(is_active=True).count()

        return {
            'total_bots': total_bots,
            'total_users': total_users,
            'system_channels': system_channels
        }
    except Exception as e:
        logger.error(f"Error getting system stats: {e}")
        return {'total_bots': 0, 'total_users': 0, 'system_channels': 0}


@sync_to_async
def get_detailed_stats():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        from modul.models import Bot, UserTG, ClientBotUser, SystemChannel
        from django.utils import timezone
        from datetime import timedelta

        total_bots = Bot.objects.count()
        active_bots = Bot.objects.filter(bot_enable=True).count()
        disabled_bots = total_bots - active_bots

        total_users = UserTG.objects.count()

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ 7 –¥–Ω–µ–π
        now = timezone.now()
        day_ago = now - timedelta(days=1)
        week_ago = now - timedelta(days=7)

        try:
            active_24h = UserTG.objects.filter(last_interaction__gte=day_ago).count()
            active_7d = UserTG.objects.filter(last_interaction__gte=week_ago).count()
        except:
            active_24h = UserTG.objects.filter(created_at__gte=day_ago).count()
            active_7d = UserTG.objects.filter(created_at__gte=week_ago).count()

        # –ö–∞–Ω–∞–ª—ã
        system_channels = SystemChannel.objects.count()
        active_channels = SystemChannel.objects.filter(is_active=True).count()

        return {
            'total_bots': total_bots,
            'active_bots': active_bots,
            'disabled_bots': disabled_bots,
            'total_users': total_users,
            'active_24h': active_24h,
            'active_7d': active_7d,
            'system_channels': system_channels,
            'active_channels': active_channels
        }
    except Exception as e:
        logger.error(f"Error getting detailed stats: {e}")
        return {
            'total_bots': 0,
            'active_bots': 0,
            'disabled_bots': 0,
            'total_users': 0,
            'active_24h': 0,
            'active_7d': 0,
            'system_channels': 0,
            'active_channels': 0
        }


@sync_to_async
def get_bots_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö"""
    try:
        from modul.models import Bot, ClientBotUser
        from django.db.models import Count

        bots = Bot.objects.select_related('owner').annotate(
            users_count=Count('clients')
        ).order_by('-users_count')[:20]

        result = []
        for bot in bots:
            owner_name = "Unknown"
            if bot.owner:
                if hasattr(bot.owner, 'first_name') and bot.owner.first_name:
                    owner_name = bot.owner.first_name
                elif hasattr(bot.owner, 'username') and bot.owner.username:
                    owner_name = bot.owner.username
                else:
                    owner_name = f"ID{bot.owner.uid}"

            result.append({
                'username': bot.username,
                'bot_enable': bot.bot_enable,
                'users_count': bot.users_count,
                'owner_name': owner_name,
                'owner_id': bot.owner.uid if bot.owner else 0
            })

        return result
    except Exception as e:
        logger.error(f"Error getting bots info: {e}")
        return []


@sync_to_async
def get_users_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
    try:
        from modul.models import Bot, UserTG, ClientBotUser
        from django.utils import timezone
        from django.db.models import Avg, Max, Count
        from datetime import timedelta

        total_users = UserTG.objects.count()

        now = timezone.now()
        today = now.replace(hour=0, minute=0, second=0, microsecond=0)
        week_ago = now - timedelta(days=7)
        day_ago = now - timedelta(days=1)

        today_users = UserTG.objects.filter(created_at__gte=today).count()
        week_users = UserTG.objects.filter(created_at__gte=week_ago).count()

        try:
            active_24h = UserTG.objects.filter(last_interaction__gte=day_ago).count()
        except:
            active_24h = UserTG.objects.filter(created_at__gte=day_ago).count()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º
        try:
            bot_stats = Bot.objects.annotate(users_count=Count('clients')).aggregate(
                avg_users=Avg('users_count'),
                max_users=Max('users_count')
            )
        except:
            bot_stats = {'avg_users': 0, 'max_users': 0}

        return {
            'total_users': total_users,
            'today_users': today_users,
            'week_users': week_users,
            'active_24h': active_24h,
            'avg_per_bot': bot_stats['avg_users'] or 0,
            'max_in_bot': bot_stats['max_users'] or 0
        }
    except Exception as e:
        logger.error(f"Error getting users info: {e}")
        return {
            'total_users': 0,
            'today_users': 0,
            'week_users': 0,
            'active_24h': 0,
            'avg_per_bot': 0,
            'max_in_bot': 0
        }


@sync_to_async
def get_channels_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö"""
    try:
        from modul.models import SystemChannel

        total = SystemChannel.objects.count()
        active = SystemChannel.objects.filter(is_active=True).count()
        disabled = total - active

        return {
            'total_channels': total,
            'active_channels': active,
            'disabled_channels': disabled
        }
    except Exception as e:
        logger.error(f"Error getting channels info: {e}")
        return {
            'total_channels': 0,
            'active_channels': 0,
            'disabled_channels': 0
        }


@sync_to_async
def get_all_system_channels_detailed():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å –¥–µ—Ç–∞–ª—è–º–∏"""
    try:
        from modul.models import SystemChannel
        channels = SystemChannel.objects.all().order_by('-created_at')
        result = []

        for channel in channels:
            result.append({
                'channel_id': channel.channel_id,
                'title': channel.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                'channel_url': channel.channel_url,
                'is_active': channel.is_active,
                'created_at': channel.created_at.strftime('%Y-%m-%d %H:%M') if channel.created_at else 'N/A'
            })

        return result
    except Exception as e:
        logger.error(f"Error getting system channels detailed: {e}")
        return []


@sync_to_async
def check_system_channel_exists(channel_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    try:
        from modul.models import SystemChannel
        return SystemChannel.objects.filter(channel_id=channel_id).exists()
    except Exception as e:
        logger.error(f"Error checking system channel exists: {e}")
        return False


@sync_to_async
def save_system_channel(channel_id, channel_url, title, added_by):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª"""
    try:
        from modul.models import SystemChannel
        channel, created = SystemChannel.objects.get_or_create(
            channel_id=channel_id,
            defaults={
                'channel_url': channel_url,
                'title': title,
                'is_active': True,
                'added_by_user_id': added_by
            }
        )
        return created
    except Exception as e:
        logger.error(f"Error saving system channel: {e}")
        return False


@sync_to_async
def get_channel_info(channel_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        from modul.models import SystemChannel
        channel = SystemChannel.objects.filter(channel_id=channel_id).first()
        if channel:
            return {
                'title': channel.title or '–ö–∞–Ω–∞–ª',
                'channel_url': channel.channel_url,
                'is_active': channel.is_active
            }
        return None
    except Exception as e:
        logger.error(f"Error getting channel info: {e}")
        return None


@sync_to_async
def delete_system_channel(channel_id):
    """–£–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª"""
    try:
        from modul.models import SystemChannel
        deleted_count, _ = SystemChannel.objects.filter(channel_id=channel_id).delete()
        return deleted_count > 0
    except Exception as e:
        logger.error(f"Error deleting system channel: {e}")
        return False


@sync_to_async
def update_channel_status(channel_id, is_active):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞"""
    try:
        from modul.models import SystemChannel
        SystemChannel.objects.filter(channel_id=channel_id).update(is_active=is_active)
        return True
    except Exception as e:
        logger.error(f"Error updating channel status: {e}")
        return False


async def notify_other_admins(bot, channel_title, admin_id, admin_name):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞"""
    try:
        text = (
            f"üö® –°–ò–°–¢–ï–ú–ù–´–ô –ö–ê–ù–ê–õ –î–û–ë–ê–í–õ–ï–ù\n\n"
            f"üì¢ {channel_title}\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_name} ({admin_id})\n"
            f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –±–æ—Ç—ã —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª!"
        )

        for aid in ADMIN_IDS:
            if aid != admin_id:
                try:
                    await bot.send_message(aid, text)
                except:
                    pass
    except Exception as e:
        logger.error(f"Error notifying admins: {e}")


# ==================== –•–ï–ù–î–õ–ï–†–´ ====================

@main_bot_router.message(F.text == "/admin")
async def show_admin_panel(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin_user(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
        return

    stats = await get_system_stats()

    text = (
        f"üîß –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\n\n"
        f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"ü§ñ –ë–æ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {stats['total_bots']}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üì¢ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['system_channels']}\n"
        f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
    )

    await message.answer(text, reply_markup=get_admin_main_menu())


@main_bot_router.callback_query(F.data == "admin_main")
async def admin_main_callback(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    stats = await get_system_stats()

    text = (
        f"üîß –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\n\n"
        f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"ü§ñ –ë–æ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {stats['total_bots']}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üì¢ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['system_channels']}\n"
        f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
    )

    await callback.message.edit_text(text, reply_markup=get_admin_main_menu())
    await callback.answer()


@main_bot_router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    stats = await get_detailed_stats()

    text = (
        f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
        f"ü§ñ –ë–û–¢–´:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {stats['total_bots']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {stats['active_bots']}\n"
        f"‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤: {stats['disabled_bots']}\n\n"
        f"üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {stats['active_24h']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_7d']}\n\n"
        f"üì¢ –ö–ê–ù–ê–õ–´:\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['system_channels']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['active_channels']}\n"
        f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

    await callback.message.edit_text(text, reply_markup=get_back_menu())
    await callback.answer()


@main_bot_router.callback_query(F.data == "admin_bots")
async def admin_bots_callback(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–∞—Ö"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    bots_info = await get_bots_info()

    text = f"ü§ñ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–û–¢–ê–•\n\n"

    for bot_info in bots_info[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        status = "üü¢" if bot_info['bot_enable'] else "üî¥"
        text += (
            f"{status} @{bot_info['username']}\n"
            f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bot_info['users_count']}\n"
            f"   üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {bot_info['owner_name']} (ID: {bot_info['owner_id']})\n\n"
        )

    if len(bots_info) > 10:
        text += f"... –∏ –µ—â–µ {len(bots_info) - 10} –±–æ—Ç–æ–≤"

    await callback.message.edit_text(text, reply_markup=get_back_menu())
    await callback.answer()


@main_bot_router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    users_info = await get_users_info()

    text = (
        f"üë• –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–•\n\n"
        f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_info['total_users']}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {users_info['today_users']}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {users_info['week_users']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {users_info['active_24h']}\n\n"
        f"ü§ñ –ü–æ –±–æ—Ç–∞–º:\n"
        f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –±–æ—Ç–∞: {users_info['avg_per_bot']:.1f}\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –≤ –æ–¥–Ω–æ–º –±–æ—Ç–µ: {users_info['max_in_bot']}\n"
        f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

    await callback.message.edit_text(text, reply_markup=get_back_menu())
    await callback.answer()


@main_bot_router.callback_query(F.data == "admin_channels")
async def admin_channels_callback(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    channels_info = await get_channels_info()

    text = (
        f"üì¢ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {channels_info['total_channels']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {channels_info['active_channels']}\n"
        f"‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {channels_info['disabled_channels']}\n\n"
        f"‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"
    )

    await callback.message.edit_text(text, reply_markup=get_channels_menu())
    await callback.answer()


@main_bot_router.callback_query(F.data == "channels_list")
async def channels_list_callback(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    channels = await get_all_system_channels_detailed()

    if not channels:
        text = "üìã –°–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç"
    else:
        text = f"üìã –°–ò–°–¢–ï–ú–ù–´–ï –ö–ê–ù–ê–õ–´ ({len(channels)}):\n\n"

        for i, channel in enumerate(channels, 1):
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if channel['is_active'] else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
            text += (
                f"{i}. {channel['title'] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
                f"   üÜî ID: {channel['channel_id']}\n"
                f"   üìä {status}\n"
                f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {channel['created_at']}\n\n"
            )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_channels"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@main_bot_router.callback_query(F.data == "channels_add")
async def channels_add_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    text = (
        f"‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–û–ì–û –ö–ê–ù–ê–õ–ê\n\n"
        f"1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª\n"
        f"2Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"3Ô∏è‚É£ –ü–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ —Å—é–¥–∞\n\n"
        f"‚ö†Ô∏è –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!\n"
        f"üö® –ö–∞–Ω–∞–ª —Å—Ç–∞–Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –í–°–ï–• –±–æ—Ç–æ–≤!"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_channels"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await state.set_state(AdminChannelStates.waiting_for_channel_message)
    await callback.answer()


@main_bot_router.callback_query(F.data == "channels_delete")
async def channels_delete_callback(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    channels = await get_all_system_channels_detailed()

    if not channels:
        text = "üìã –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_channels"))
    else:
        text = f"üóë –í–´–ë–ï–†–ò–¢–ï –ö–ê–ù–ê–õ –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø:\n\n"
        keyboard = InlineKeyboardBuilder()

        for channel in channels:
            status = "üü¢" if channel['is_active'] else "üî¥"
            channel_name = channel['title'] or f"ID: {channel['channel_id']}"
            keyboard.row(InlineKeyboardButton(
                text=f"{status} {channel_name}",
                callback_data=f"delete_channel_{channel['channel_id']}"
            ))

        keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_channels"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@main_bot_router.callback_query(F.data.startswith("delete_channel_"))
async def delete_channel_callback(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    channel_id = int(callback.data.replace("delete_channel_", ""))
    channel_info = await get_channel_info(channel_id)

    if not channel_info:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    text = (
        f"‚ö†Ô∏è –ü–û–î–¢–í–ï–†–î–ò–¢–ï –£–î–ê–õ–ï–ù–ò–ï\n\n"
        f"üì¢ –ö–∞–Ω–∞–ª: {channel_info['title']}\n"
        f"üÜî ID: {channel_id}\n\n"
        f"üö® –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç—ã –ù–ï –±—É–¥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª!\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{channel_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="channels_delete")
    )

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@main_bot_router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_channel_callback(callback: CallbackQuery, bot: Bot):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    channel_id = int(callback.data.replace("confirm_delete_", ""))
    channel_info = await get_channel_info(channel_id)

    success = await delete_system_channel(channel_id)

    if success:
        channel_title = channel_info['title'] if channel_info else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        text = (
            f"‚úÖ –ö–ê–ù–ê–õ –£–î–ê–õ–ï–ù!\n\n"
            f"üì¢ {channel_title}\n"
            f"üÜî ID: {channel_id}\n"
            f"üë§ –£–¥–∞–ª–∏–ª: {callback.from_user.full_name}\n\n"
            f"‚ÑπÔ∏è –ë–æ—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª"
        )
    else:
        text = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞–Ω–∞–ª–∞–º", callback_data="admin_channels"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@main_bot_router.callback_query(F.data == "channels_status")
async def channels_status_callback(callback: CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await callback.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª—ã...")

    channels = await get_all_system_channels_detailed()

    if not channels:
        text = "üìã –ù–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
    else:
        text = f"üîÑ –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–ù–´–• –ö–ê–ù–ê–õ–û–í:\n\n"

        for i, channel in enumerate(channels, 1):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
                chat = await bot.get_chat(channel['channel_id'])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                bot_member = await bot.get_chat_member(channel['channel_id'], bot.id)

                if bot_member.status in ['creator', 'administrator']:
                    bot_status = "ü§ñ –ê–¥–º–∏–Ω"
                else:
                    bot_status = "‚ö†Ô∏è –ù–µ –∞–¥–º–∏–Ω"

                status = f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω | {bot_status}"

            except Exception as e:
                error_message = str(e)[:30]
                status = f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {error_message}"

            text += (
                f"{i}. {channel['title']}\n"
                f"   üÜî {channel['channel_id']}\n"
                f"   üìä {status}\n\n"
            )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="channels_status"))
    keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_channels"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


@main_bot_router.callback_query(F.data == "admin_refresh")
async def admin_refresh_callback(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é...")
    await admin_main_callback(callback)


@main_bot_router.message(AdminChannelStates.waiting_for_channel_message)
async def process_admin_channel_message(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    if not is_admin_user(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        await state.clear()
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ forward —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.forward_from_chat:
            await message.answer(
                "‚ùå –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞
        if message.forward_from_chat.type != 'channel':
            await message.answer(
                "‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª! –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
            )
            return

        channel_id = message.forward_from_chat.id
        channel_title = message.forward_from_chat.title
        channel_username = getattr(message.forward_from_chat, 'username', None)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
        try:
            bot_member = await bot.get_chat_member(channel_id, bot.id)
            if bot_member.status not in ['creator', 'administrator']:
                await message.answer(
                    f"‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ '{channel_title}'\n\n"
                    f"–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
                )
                return
        except Exception as e:
            error_text = str(e)
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ '{channel_title}': {error_text}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        exists = await check_system_channel_exists(channel_id)
        if exists:
            await message.answer(
                f"‚ö†Ô∏è –ö–∞–Ω–∞–ª '{channel_title}' —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        invite_link = f"https://t.me/{channel_username}" if channel_username else None
        if not invite_link:
            try:
                link_data = await bot.create_chat_invite_link(channel_id)
                invite_link = link_data.invite_link
            except:
                invite_link = f"Channel ID: {channel_id}"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
        success = await save_system_channel(channel_id, invite_link, channel_title, message.from_user.id)

        if success:
            await message.answer(
                f"‚úÖ –°–ò–°–¢–ï–ú–ù–´–ô –ö–ê–ù–ê–õ –î–û–ë–ê–í–õ–ï–ù!\n\n"
                f"üì¢ {channel_title}\n"
                f"üÜî {channel_id}\n"
                f"üîó {invite_link}\n"
                f"üë§ –ê–¥–º–∏–Ω: {message.from_user.full_name}\n\n"
                f"üö® –¢–µ–ø–µ—Ä—å –í–°–ï –±–æ—Ç—ã —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª!\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
            await notify_other_admins(bot, channel_title, message.from_user.id, message.from_user.full_name)
        else:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
            )

        await state.clear()

    except Exception as e:
        logger.error(f"Error in process_admin_channel_message: {e}")
        error_message = str(e)
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_message}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
        )
        await state.clear()


@sync_to_async
def get_broadcast_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        from modul.models import Bot, ClientBotUser

        active_bots = Bot.objects.filter(bot_enable=True).count()
        total_users = ClientBotUser.objects.filter(bot__bot_enable=True).count()

        return {
            'active_bots': active_bots,
            'total_users': total_users
        }
    except Exception as e:
        logger.error(f"Error getting broadcast stats: {e}")
        return {'active_bots': 0, 'total_users': 0}


# Yangi handlerlar
@main_bot_router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    stats = await get_broadcast_stats()

    text = (
        f"üì£ –†–ê–°–°–´–õ–ö–ê –ü–û –í–°–ï–ú –ë–û–¢–ê–ú\n\n"
        f"üìä –û—Ö–≤–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {stats['active_bots']}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n\n"
        f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã!\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_create"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="broadcast_stats")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")
    )

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@main_bot_router.callback_query(F.data == "broadcast_create")
async def broadcast_create_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    text = (
        f"üìù –°–û–ó–î–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:\n\n"
        f"üìé –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç\n"
        f"‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        f"‚Ä¢ –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
        f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞!"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_broadcast"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await state.set_state(AdminChannelStates.waiting_for_broadcast_message)
    await callback.answer()


@main_bot_router.callback_query(F.data == "broadcast_stats")
async def broadcast_stats_callback(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    bots = await get_all_active_bots()
    stats = await get_broadcast_stats()

    text = f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–°–´–õ–ö–ò\n\n"
    text += f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {stats['active_bots']}\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n\n"

    if bots:
        text += f"üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤:\n"
        for i, bot in enumerate(bots[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            text += f"{i}. @{bot['username']}\n"

        if len(bots) > 10:
            text += f"... –∏ –µ—â–µ {len(bots) - 10} –±–æ—Ç–æ–≤\n"

    text += f"\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast"))

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


def extract_keyboard_from_message(message: Message) -> InlineKeyboardMarkup | None:
    """Habardan keyboard ni ajratib olish"""
    try:
        if not hasattr(message, 'reply_markup') or message.reply_markup is None:
            logger.info("No reply_markup found in message")
            return None

        # reply_markup mavjud
        reply_markup = message.reply_markup
        logger.info(f"Found reply_markup: {type(reply_markup)}")

        # Inline keyboard ekanligini tekshiramiz
        if hasattr(reply_markup, 'inline_keyboard'):
            inline_keyboard = reply_markup.inline_keyboard
            logger.info(f"Found inline_keyboard with {len(inline_keyboard)} rows")

            # Yangi keyboard builder yaratamiz
            builder = InlineKeyboardBuilder()

            for row_idx, row in enumerate(inline_keyboard):
                row_buttons = []
                for btn_idx, btn in enumerate(row):
                    logger.info(f"Processing button [{row_idx}][{btn_idx}]: text='{btn.text}'")

                    # Button properties
                    button_data = {"text": btn.text}

                    # Button type ni aniqlash
                    if hasattr(btn, 'url') and btn.url:
                        button_data["url"] = btn.url
                        logger.info(f"  - URL button: {btn.url}")
                        new_btn = InlineKeyboardButton(text=btn.text, url=btn.url)
                    elif hasattr(btn, 'callback_data') and btn.callback_data:
                        button_data["callback_data"] = btn.callback_data
                        logger.info(f"  - Callback button: {btn.callback_data}")
                        new_btn = InlineKeyboardButton(text=btn.text, callback_data=btn.callback_data)
                    elif hasattr(btn, 'switch_inline_query') and btn.switch_inline_query is not None:
                        new_btn = InlineKeyboardButton(text=btn.text, switch_inline_query=btn.switch_inline_query)
                        logger.info(f"  - Switch inline query button")
                    elif hasattr(btn,
                                 'switch_inline_query_current_chat') and btn.switch_inline_query_current_chat is not None:
                        new_btn = InlineKeyboardButton(text=btn.text,
                                                       switch_inline_query_current_chat=btn.switch_inline_query_current_chat)
                        logger.info(f"  - Switch inline query current chat button")
                    else:
                        # Default - callback button
                        callback_data = f"broadcast_btn_{row_idx}_{btn_idx}"
                        new_btn = InlineKeyboardButton(text=btn.text, callback_data=callback_data)
                        logger.info(f"  - Default callback button: {callback_data}")

                    row_buttons.append(new_btn)

                # Row qo'shish
                if row_buttons:
                    builder.row(*row_buttons)

            result_keyboard = builder.as_markup()
            logger.info(f"Successfully created keyboard with {len(result_keyboard.inline_keyboard)} rows")
            return result_keyboard

        else:
            logger.info("reply_markup does not have inline_keyboard")
            return None

    except Exception as e:
        logger.error(f"Error extracting keyboard: {e}")
        return None


# JSON debug function
def log_message_structure(message: Message):
    """Habar strukturasini JSON formatda log qilish"""
    try:
        # Message ni dict ga aylantirish
        msg_dict = message.model_dump() if hasattr(message, 'model_dump') else message.__dict__

        # Faqat kerakli qismlarni olish
        debug_data = {
            "message_id": message.message_id,
            "content_type": message.content_type,
            "text": getattr(message, 'text', None),
            "caption": getattr(message, 'caption', None),
            "has_reply_markup": hasattr(message, 'reply_markup') and message.reply_markup is not None
        }

        if hasattr(message, 'reply_markup') and message.reply_markup:
            debug_data["reply_markup"] = {
                "type": type(message.reply_markup).__name__,
                "has_inline_keyboard": hasattr(message.reply_markup, 'inline_keyboard')
            }

            if hasattr(message.reply_markup, 'inline_keyboard'):
                keyboard_structure = []
                for row in message.reply_markup.inline_keyboard:
                    row_structure = []
                    for btn in row:
                        btn_info = {"text": btn.text}
                        if hasattr(btn, 'url') and btn.url:
                            btn_info["url"] = btn.url
                        if hasattr(btn, 'callback_data') and btn.callback_data:
                            btn_info["callback_data"] = btn.callback_data
                        row_structure.append(btn_info)
                    keyboard_structure.append(row_structure)
                debug_data["reply_markup"]["keyboard_structure"] = keyboard_structure

        logger.info(f"MESSAGE STRUCTURE: {json.dumps(debug_data, indent=2, ensure_ascii=False)}")

    except Exception as e:
        logger.error(f"Error logging message structure: {e}")


@main_bot_router.message(AdminChannelStates.waiting_for_broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫"""
    if not is_admin_user(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        await state.clear()
        return

    try:
        # Debug: habar strukturasini log qilish
        log_message_structure(message)

        # Debug info
        logger.info(f"Starting broadcast from admin {message.from_user.id}")
        logger.info(f"Message ID: {message.message_id}, Chat ID: {message.chat.id}")
        logger.info(f"Message type: {message.content_type}")

        # Keyboard ni ajratib olish
        extracted_keyboard = extract_keyboard_from_message(message)
        has_keyboard = extracted_keyboard is not None

        logger.info(f"Keyboard extraction result: {has_keyboard}")
        if has_keyboard:
            logger.info(f"Extracted keyboard with {len(extracted_keyboard.inline_keyboard)} rows")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        active_bots = await get_all_active_bots()
        logger.info(f"Found {len(active_bots)} active bots")

        if not active_bots:
            await message.answer(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = await get_all_bot_users()
        logger.info(f"Found {len(all_users)} total users")

        if not all_users:
            await message.answer(
                "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
            )
            await state.clear()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        keyboard_status = f"—Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚úÖ ({len(extracted_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤)" if has_keyboard else "–±–µ–∑ –∫–Ω–æ–ø–æ–∫ ‚ö†Ô∏è"
        stats_msg = await message.answer(
            f"üöÄ –ù–ê–ß–ò–ù–ê–Æ –†–ê–°–°–´–õ–ö–£...\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"ü§ñ –ë–æ—Ç–æ–≤: {len(active_bots)}\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
            f"üìù –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type} ({keyboard_status})\n\n"
            f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{len(all_users)} (0%)\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: 0\n"
            f"‚ùå –û—à–∏–±–æ–∫: 0"
        )

        # –°—á–µ—Ç—á–∏–∫–∏
        sent_count = 0
        error_count = 0
        total_count = len(all_users)

        # –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
        chat_not_found_count = 0
        bot_blocked_count = 0
        other_errors_count = 0

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–æ—Ç–∞–º
        users_by_bot = {}
        for user in all_users:
            bot_token = user['bot__token']
            if bot_token not in users_by_bot:
                users_by_bot[bot_token] = []
            users_by_bot[bot_token].append(user['uid'])

        logger.info(f"Users grouped by {len(users_by_bot)} bots")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        for bot_index, (bot_token, user_ids) in enumerate(users_by_bot.items(), 1):
            try:
                logger.info(f"Processing bot {bot_index}/{len(users_by_bot)}: token ending with ...{bot_token[-10:]}")
                logger.info(f"Bot has {len(user_ids)} users")

                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
                from aiogram import Bot
                from modul.loader import bot_session

                async with Bot(token=bot_token, session=bot_session).context(auto_close=False) as broadcast_bot:

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º –±–æ—Ç
                    try:
                        bot_info = await broadcast_bot.get_me()
                        logger.info(f"Broadcasting via bot @{bot_info.username}")
                    except Exception as e:
                        logger.error(f"Cannot access bot with token ...{bot_token[-10:]}: {e}")
                        error_count += len(user_ids)
                        continue

                    for user_index, user_id in enumerate(user_ids, 1):
                        try:
                            # Debug –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
                            if user_index <= 3:
                                logger.info(f"Sending to user {user_id} via bot @{bot_info.username}")

                            result = None

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                            if message.content_type == "text":
                                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                result = await broadcast_bot.send_message(
                                    chat_id=user_id,
                                    text=message.text,
                                    entities=getattr(message, 'entities', None),
                                    reply_markup=extracted_keyboard,  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    parse_mode=None
                                )

                            elif message.content_type == "photo":
                                # –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    file = await bot.get_file(message.photo[-1].file_id)
                                    file_data = await bot.download_file(file.file_path)

                                    from aiogram.types import BufferedInputFile
                                    input_file = BufferedInputFile(file_data.read(), filename="photo.jpg")

                                    result = await broadcast_bot.send_photo(
                                        chat_id=user_id,
                                        photo=input_file,
                                        caption=getattr(message, 'caption', None),
                                        caption_entities=getattr(message, 'caption_entities', None),
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as photo_error:
                                    logger.error(f"Error processing photo for user {user_id}: {photo_error}")
                                    raise photo_error

                            elif message.content_type == "video":
                                # –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    file = await bot.get_file(message.video.file_id)
                                    file_data = await bot.download_file(file.file_path)

                                    from aiogram.types import BufferedInputFile
                                    input_file = BufferedInputFile(file_data.read(), filename="video.mp4")

                                    result = await broadcast_bot.send_video(
                                        chat_id=user_id,
                                        video=input_file,
                                        caption=getattr(message, 'caption', None),
                                        caption_entities=getattr(message, 'caption_entities', None),
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as video_error:
                                    logger.error(f"Error processing video for user {user_id}: {video_error}")
                                    raise video_error

                            elif message.content_type == "document":
                                # –î–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    file = await bot.get_file(message.document.file_id)
                                    file_data = await bot.download_file(file.file_path)

                                    from aiogram.types import BufferedInputFile
                                    filename = getattr(message.document, 'file_name', 'document')
                                    input_file = BufferedInputFile(file_data.read(), filename=filename)

                                    result = await broadcast_bot.send_document(
                                        chat_id=user_id,
                                        document=input_file,
                                        caption=getattr(message, 'caption', None),
                                        caption_entities=getattr(message, 'caption_entities', None),
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as doc_error:
                                    logger.error(f"Error processing document for user {user_id}: {doc_error}")
                                    raise doc_error

                            elif message.content_type == "audio":
                                # –ê—É–¥–∏–æ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    file = await bot.get_file(message.audio.file_id)
                                    file_data = await bot.download_file(file.file_path)

                                    from aiogram.types import BufferedInputFile
                                    filename = getattr(message.audio, 'file_name', 'audio.mp3')
                                    input_file = BufferedInputFile(file_data.read(), filename=filename)

                                    result = await broadcast_bot.send_audio(
                                        chat_id=user_id,
                                        audio=input_file,
                                        caption=getattr(message, 'caption', None),
                                        caption_entities=getattr(message, 'caption_entities', None),
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as audio_error:
                                    logger.error(f"Error processing audio for user {user_id}: {audio_error}")
                                    raise audio_error

                            elif message.content_type == "voice":
                                # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    file = await bot.get_file(message.voice.file_id)
                                    file_data = await bot.download_file(file.file_path)

                                    from aiogram.types import BufferedInputFile
                                    input_file = BufferedInputFile(file_data.read(), filename="voice.ogg")

                                    result = await broadcast_bot.send_voice(
                                        chat_id=user_id,
                                        voice=input_file,
                                        caption=getattr(message, 'caption', None),
                                        caption_entities=getattr(message, 'caption_entities', None),
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as voice_error:
                                    logger.error(f"Error processing voice for user {user_id}: {voice_error}")
                                    raise voice_error

                            elif message.content_type == "video_note":
                                # –ö—Ä—É–∂–æ–∫ (video note) —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    file = await bot.get_file(message.video_note.file_id)
                                    file_data = await bot.download_file(file.file_path)

                                    from aiogram.types import BufferedInputFile
                                    input_file = BufferedInputFile(file_data.read(), filename="video_note.mp4")

                                    result = await broadcast_bot.send_video_note(
                                        chat_id=user_id,
                                        video_note=input_file,
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as vn_error:
                                    logger.error(f"Error processing video_note for user {user_id}: {vn_error}")
                                    raise vn_error

                            elif message.content_type == "animation":
                                # GIF/–∞–Ω–∏–º–∞—Ü–∏—è —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    file = await bot.get_file(message.animation.file_id)
                                    file_data = await bot.download_file(file.file_path)

                                    from aiogram.types import BufferedInputFile
                                    filename = getattr(message.animation, 'file_name', 'animation.gif')
                                    input_file = BufferedInputFile(file_data.read(), filename=filename)

                                    result = await broadcast_bot.send_animation(
                                        chat_id=user_id,
                                        animation=input_file,
                                        caption=getattr(message, 'caption', None),
                                        caption_entities=getattr(message, 'caption_entities', None),
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as gif_error:
                                    logger.error(f"Error processing animation for user {user_id}: {gif_error}")
                                    raise gif_error

                            elif message.content_type == "sticker":
                                # –°—Ç–∏–∫–µ—Ä —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    result = await broadcast_bot.send_sticker(
                                        chat_id=user_id,
                                        sticker=message.sticker.file_id,  # –°—Ç–∏–∫–µ—Ä—ã –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ file_id
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as sticker_error:
                                    logger.error(f"Error processing sticker for user {user_id}: {sticker_error}")
                                    raise sticker_error

                            elif message.content_type == "location":
                                # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    result = await broadcast_bot.send_location(
                                        chat_id=user_id,
                                        latitude=message.location.latitude,
                                        longitude=message.location.longitude,
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as location_error:
                                    logger.error(f"Error processing location for user {user_id}: {location_error}")
                                    raise location_error

                            elif message.content_type == "contact":
                                # –ö–æ–Ω—Ç–∞–∫—Ç —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    result = await broadcast_bot.send_contact(
                                        chat_id=user_id,
                                        phone_number=message.contact.phone_number,
                                        first_name=message.contact.first_name,
                                        last_name=getattr(message.contact, 'last_name', None),
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as contact_error:
                                    logger.error(f"Error processing contact for user {user_id}: {contact_error}")
                                    raise contact_error

                            elif message.content_type == "poll":
                                # –û–ø—Ä–æ—Å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                                try:
                                    result = await broadcast_bot.send_poll(
                                        chat_id=user_id,
                                        question=message.poll.question,
                                        options=[option.text for option in message.poll.options],
                                        is_anonymous=message.poll.is_anonymous,
                                        type=message.poll.type,
                                        allows_multiple_answers=getattr(message.poll, 'allows_multiple_answers', False),
                                        reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                    )
                                except Exception as poll_error:
                                    logger.error(f"Error processing poll for user {user_id}: {poll_error}")
                                    raise poll_error

                            else:
                                # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã - —Ç–µ–∫—Å—Ç–æ–≤—ã–π fallback —Å –∫–Ω–æ–ø–∫–∞–º–∏
                                logger.warning(f"Unsupported content type: {message.content_type}")
                                result = await broadcast_bot.send_message(
                                    chat_id=user_id,
                                    text=f"üìé –ú–ï–î–ò–ê –°–û–û–ë–©–ï–ù–ò–ï\n\n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–ª–æ: {message.content_type.upper()}\n\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                                    reply_markup=extracted_keyboard  # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                                )

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            if result and hasattr(result, 'message_id') and result.message_id:
                                sent_count += 1
                                if user_index <= 3:
                                    button_count = len(extracted_keyboard.inline_keyboard) if has_keyboard else 0
                                    total_buttons = sum(
                                        len(row) for row in extracted_keyboard.inline_keyboard) if has_keyboard else 0
                                    logger.info(
                                        f"‚úÖ SUCCESS: User {user_id} received message {result.message_id} via @{bot_info.username} (keyboard: {button_count} rows, {total_buttons} buttons)")
                            else:
                                error_count += 1
                                other_errors_count += 1
                                logger.error(
                                    f"‚ùå FAILED: User {user_id} - no valid result returned via @{bot_info.username}")

                        except Exception as e:
                            error_count += 1
                            error_text = str(e).lower()

                            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                            if "chat not found" in error_text:
                                chat_not_found_count += 1
                            elif "blocked" in error_text:
                                bot_blocked_count += 1
                            else:
                                other_errors_count += 1

                            if error_count <= 10:
                                logger.error(f"‚ùå EXCEPTION: User {user_id} via @{bot_info.username}: {e}")

                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        if user_index % 20 == 0:
                            import asyncio
                            await asyncio.sleep(0.1)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        if (sent_count + error_count) % 100 == 0:
                            progress = ((sent_count + error_count) / total_count) * 100
                            try:
                                await stats_msg.edit_text(
                                    f"üöÄ –†–ê–°–°–´–õ–ö–ê –í –ü–†–û–¶–ï–°–°–ï...\n\n"
                                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                                    f"ü§ñ –ë–æ—Ç–æ–≤: {len(active_bots)}\n"
                                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count}\n"
                                    f"üìù –¢–∏–ø: {message.content_type} ({keyboard_status})\n\n"
                                    f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {sent_count + error_count}/{total_count} ({progress:.1f}%)\n"
                                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent_count}\n"
                                    f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
                                )
                            except:
                                pass

            except Exception as e:
                logger.error(f"Error with bot token ...{bot_token[-10:]}: {e}")
                error_count += len(user_ids)
                other_errors_count += len(user_ids)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (sent_count / total_count) * 100 if total_count > 0 else 0

        final_text = (
            f"‚úÖ –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!\n\n"
            f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"ü§ñ –ë–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(active_bots)}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count}\n"
            f"üìù –¢–∏–ø: {message.content_type} ({keyboard_status})\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {error_count}\n"
            f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
            f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n"
            f"‚Ä¢ –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {chat_not_found_count}\n"
            f"‚Ä¢ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {bot_blocked_count}\n"
            f"‚Ä¢ –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏: {other_errors_count}\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.full_name}\n"
            f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        await stats_msg.edit_text(final_text)

        logger.info(f"Broadcast completed: {sent_count} sent, {error_count} errors, extracted keyboard: {has_keyboard}")

        await state.clear()

    except Exception as e:
        logger.error(f"Error in broadcast: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å"
        )
        await state.clear()

async def notify_admins_about_broadcast(bot, admin_name, admin_id, sent_count, error_count, total_count):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    try:
        success_rate = (sent_count / total_count) * 100 if total_count > 0 else 0

        text = (
            f"üì£ –†–ê–°–°–´–õ–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_name} ({admin_id})\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"
            f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        for aid in ADMIN_IDS:
            if aid != admin_id:
                try:
                    await bot.send_message(aid, text)
                except:
                    pass
    except Exception as e:
        logger.error(f"Error notifying admins about broadcast: {e}")
