from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import BotBlocked
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from loader import *
from sql import *
import os.path
from function import *
import time
import re
import module
import asyncio # –ø–∞—É–∑—ã await asyncio.sleep(1)

import matplotlib.pyplot as plt
import numpy as np



async def pay_install():

    cur.execute("""CREATE TABLE IF NOT EXISTS pay_wallet (
                id SERIAL PRIMARY KEY,
                active INT DEFAULT 0, 
                company TEXT NOT NULL DEFAULT '',
                shop_id TEXT NOT NULL DEFAULT '', 
                phone TEXT NOT NULL DEFAULT '',
                token TEXT NOT NULL DEFAULT '',
                token2 TEXT NOT NULL DEFAULT '',
                other TEXT NOT NULL DEFAULT '')""")
    # –≥–¥–µ other = {–ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏–µ—Ç–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä–µ}

    # ========== –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ op
    table_colomn = []
    cur.execute("SELECT * FROM information_schema.columns WHERE table_name = 'pay_wallet'")
    for row in cur.fetchall():
        table_colomn.append(row['column_name'])
    if 'other' not in table_colomn:
        cur.execute("ALTER TABLE pay_wallet ADD COLUMN other TEXT NOT NULL DEFAULT ''")
    if 'token2' not in table_colomn:
        cur.execute("ALTER TABLE pay_wallet ADD COLUMN token2 TEXT NOT NULL DEFAULT ''")

    cur.execute("""CREATE TABLE IF NOT EXISTS pay_payment (
                id SERIAL PRIMARY KEY,
                wallet_id INT DEFAULT 0,
                user_id TEXT NOT NULL DEFAULT '',
                status TEXT NOT NULL DEFAULT '',
                date_pay TEXT NOT NULL DEFAULT '',
                price FLOAT DEFAULT 0,
                types TEXT NOT NULL DEFAULT '',
                option INT DEFAULT 0,
                recurrent TEXT NOT NULL DEFAULT '',
                answer TEXT NOT NULL DEFAULT '',
                good TEXT NOT NULL DEFAULT '')""")


    table_colomn = []
    cur.execute("SELECT * FROM information_schema.columns WHERE table_name = 'pay_payment'")
    for row in cur.fetchall():
        table_colomn.append(row['column_name'])
    if 'recurrent' not in table_colomn:
        cur.execute("ALTER TABLE pay_payment ADD COLUMN recurrent TEXT NOT NULL DEFAULT ''")
    if 'date_pay' not in table_colomn:
        cur.execute("ALTER TABLE pay_payment ADD COLUMN date_pay TEXT NOT NULL DEFAULT ''")
    if 'types' not in table_colomn:
        cur.execute("ALTER TABLE pay_payment ADD COLUMN types TEXT NOT NULL DEFAULT ''")
    if 'good' not in table_colomn:
        cur.execute("ALTER TABLE pay_payment ADD COLUMN good TEXT NOT NULL DEFAULT ''")

    # ========== –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ users
    table_colomn = []
    cur.execute("SELECT * FROM information_schema.columns WHERE table_name = 'users'")
    for row in cur.fetchall():
        table_colomn.append(row['column_name'])
    if module_main == 'bot':
        if await module.bot.bot_balance():
            if 'balance' not in table_colomn:
                cur.execute("ALTER TABLE users ADD COLUMN balance FLOAT DEFAULT 0")
                cur.execute("SELECT * FROM pay_payment WHERE status = 'paid'")
                for row in cur.fetchall():
                    cur.execute("UPDATE users SET balance = balance + {} WHERE user_id = '{}'".format(float(row['price']), row['user_id']))

    save = await saver()
    if "pay_messageText" in save['setting']: # –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –≤ –Ω–æ–≤—É—é
        save = await saver('add', {'setting': {
            "pay_message_text": save['setting']['pay_messageText'],
            "pay_message_entities": save['setting']['pay_messageEntities'],
            "pay_message_fileType": save['setting']['pay_messageFileType'],
            "pay_message_fileId": save['setting']['pay_messageFileId'],
        }})
        save = await saver('drop', {'setting': ['pay_messageText', 'pay_messageEntities', 'pay_messageFileType', 'pay_messageFileId']})
    if "pay_message_text" not in save['setting']:
        if 'anon' in modules:
            pay_message_text = "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP üëë:"
            pay_message_text += "\n\n‚öúÔ∏è –í–æ–∑–º–æ–∂–µ–Ω –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É (–º—É–∂—Å–∫–æ–π –∏ –∂–µ–Ω—Å–∫–∏–π)"
            pay_message_text += "\n\n‚öúÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–∞—Ç—å—Å—è –≤ –ü–æ—à–ª–æ–º–∞ —á–∞—Ç–µ üíÉüèª"
            pay_message_text += "\n\n‚öúÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ"
            pay_message_text += "\n\n‚öúÔ∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ"
            pay_message_text += "\n\n‚öúÔ∏è –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è —Ä–µ–∫–ª–∞–º–∞"
            pay_message_text += "\n\n‚öúÔ∏è –ë–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"
            pay_message_text += "\n\n‚úÖ VIP –≤—ã–¥–∞—ë—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"
        elif 'rating' in modules:
            pay_message_text = "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP üëë:"
            pay_message_text += "\n\n‚öúÔ∏è –û–¢–ö–†–´–¢–ò–ï"
            pay_message_text += "\n     ‚ûï –ü–æ–∑–≤–æ–ª–∏—Ç —É–∑–Ω–∞—Ç—å –∫—Ç–æ –æ—Ü–µ–Ω–∏–ª —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É, –∏ –¥–∞—Å—Ç –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∫—É. –û–¥–Ω–æ –û–¢–ö–†–´–¢–ò–ï = 1 —Å—Å—ã–ª–∫–∞ –Ω–∞ —é–∑–µ—Ä–∞"
            pay_message_text += "\n\nüëë VIP"
            pay_message_text += "\n     ‚ûï –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è —Ä–µ–∫–ª–∞–º–∞"
            pay_message_text += "\n     ‚ûï –ë–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"
            pay_message_text += "\n     ‚ûï –û–∫–æ–ª–æ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ –≤ –∞–Ω–∫–µ—Ç–µ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ: üëë VIP"
            pay_message_text += "\n\n‚úÖ VIP –≤—ã–¥–∞—ë—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ –ù–ê–í–°–ï–ì–î–ê"
        elif 'clicker' in modules:
            pay_message_text = "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP üëë:"
            pay_message_text += "\n\n‚öúÔ∏è –ö–∞–∂–¥—ã–π –ö–õ–ò–ö —É VIP –ø—Ä–∏–Ω–æ—Å–∏—Ç 5 —Ä–æ–±—É–∫—Å–æ–≤ –≤–º–µ—Å—Ç–æ 1"
            pay_message_text += "\n\n‚öúÔ∏è –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è —Ä–µ–∫–ª–∞–º–∞"
            pay_message_text += "\n\n‚öúÔ∏è –ë–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"
            pay_message_text += "\n\n‚úÖ VIP –≤—ã–¥–∞—ë—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"
        else:
            pay_message_text = "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP üëë:"
            pay_message_text += "\n\n‚öúÔ∏è –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è —Ä–µ–∫–ª–∞–º–∞"
            pay_message_text += "\n\n‚öúÔ∏è –ë–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"
            pay_message_text += "\n\n‚úÖ VIP –≤—ã–¥–∞—ë—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"
        save = await saver('add', {'setting': {
            "pay_message_text": pay_message_text,
            "pay_message_entities": "[]",
        }})

    if "pay_message_fileType" not in save['setting']:
        pay_message_fileId = ''
        if os.path.exists('files'):
            try:
                with open('files/pay/pay.jpg', 'rb') as photo:
                    answer = await bot.send_photo(355590439, photo=photo)
                if 'message_id' in answer:
                    await bot.delete_message(chat_id=355590439, message_id=answer['message_id'])
                    pay_message_fileId = answer['photo'][0]['file_id']
            except Exception as ex:
                pass
        else:
            print("!!!!!!!!!!!!!!  Not folder 'files'")
            sys.exit()
        save = await saver('add', {'setting': {
            "pay_message_fileType": "photo",
            "pay_message_fileId": pay_message_fileId,
        }})

    if 'op' in modules:
        save = await saver('add', {'setting': {
            "pay_payShowInOp": 1, # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "üëé –ù–µ —Ö–æ—á—É –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è" –≤ –û–ü
            "pay_OP_messageButton": "üëé –ù–µ —Ö–æ—á—É –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è",
        }})
    save = await saver('add', {'setting': {
        "pay_payFree": 1,
        "pay_payFree_Button": "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
        "pay_walletDescription": f"–û–ø–ª–∞—Ç–∞ –≤ –±–æ—Ç–µ @{save['bot']['username']}"
    }})

    pay_folder = 'files/image_pay_graph'
    if not os.path.exists(pay_folder):
        os.mkdir(pay_folder)


# –∫–Ω–æ–ø–∫–∞ pay_
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('pay_'), state='*')
async def pay_callback(tg: types.CallbackQuery, state: FSMContext):
    save = await saver()
    if tg.from_user.id in eval(save['setting']['ban_users']):
        return False
    # user = await user_load(tg, state)
    await send(tg, {'callback': True})
    error = ''
    m = {0: {}}
    page = await page_split(tg.data)
    memory = await memory_start(state)
    if page['page'] == 'walletAdd':
        m[0]['text'] = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—à–µ–ª—å–∫–∞:"
        m[0]['but'] = [
            [{'text': "üá∑üá∫ aaio.so", 'callback_data': "pay_walletAddAaioSo"}],
            [{'text': "üá∑üá∫ –Æmoney", 'callback_data': "pay_walletAddYoomoney"}],
            [{'text': "üá∑üá∫ Qiwi", 'callback_data': "pay_walletAddQiwi"}],
            # [{'text': "–°loudPayments (Widget)", 'callback_data': "pay_walletAdd–°loudPaymentsWidget"}],
            [{'text': "üá∑üá∫ Payselection (—Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π)", 'callback_data': "pay_walletAddPayselection"}],
            [{'text': "üá∑üá∫üá∞üáø Robokassa", 'callback_data': "pay_walletAddRobokassa"}],
            [{'text': "üáßüáæ WebPay.by (–¥–ª—è –ë–µ–ª–∞—Ä—É—Å–∏)", 'callback_data': "pay_walletAddCommon_WebpayBy"}],
            [{'text': "üáßüáæ BePaid.by (–¥–ª—è –ë–µ–ª–∞—Ä—É—Å–∏)", 'callback_data': "pay_walletAddCommon_BepaidBy"}],
            [{'text': "–†—É—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞", 'callback_data': "pay_walletManual"}],
            [{'text': but_back, 'callback_data': "pay_walletList"}]
        ]
    elif page['page'] == 'walletOne':
        walletId = int(page['param'])
        async with state.proxy() as data:
            data['pay_walletId'] = walletId
        cur.execute("SELECT * FROM pay_wallet WHERE id = '{}'".format(walletId))
        for row in cur.fetchall():
            wal = dict(row)
        m[0]['text'] = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ ‚Ññ {wal['id']} - <b>{wal['company']}</b>"
        if row['company'] == 'manual':
            m[0]['text'] += f"\n\n‚ûñ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n{await hide_string(wal['shop_id'])}"
            m[0]['text'] += f"\n\n‚ûñ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:\n{wal['token']}"
        else:
            m[0]['text'] += f"\n\n‚ûñ ID –º–∞–≥–∞–∑–∏–Ω–∞:\n{wal['shop_id']}"
            if wal['token']:
                m[0]['text'] += f"\n\n‚ûñ –¢–æ–∫–µ–Ω:\n{await hide_string(wal['token'])}"
        if wal['other']:
            other = eval(wal['other'])
            if 'recurrent_repeat_payment' in other : # {'recurrent_period_type': 'day', 'recurrent_period_count': 3}
                m[0]['text'] += f"\n\n‚ûñ –†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂:\n"
                if 'recurrent_period_type' in other and 'recurrent_period_type' in other:
                    m[0]['text'] += f"–∫–∞–∂–¥—ã–µ {other['recurrent_period_count']} {other['recurrent_period_type']} –ø–æ {other['recurrent_price']} "
                else:
                    m[0]['text'] += "–¢–∞–∫–æ–π –∂–µ –∫–∞–∫ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑"
        m[0]['but'] = []
        m[0]['but'].append([{'text': "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", 'callback_data': "pay_walletDelete"}])
        if not wal['active']:
            m[0]['but'].append([{'text': "‚úîÔ∏è –ü—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫", 'callback_data': "pay_walletThis"}])
        m[0]['but'].append([{'text': but_back, 'callback_data': "pay_walletList"}])
    elif page['page'] == 'walletDelete':
        async with state.proxy() as data:
            walletId = data['pay_walletId']
        cur.execute("DELETE FROM pay_wallet WHERE id = '{}'".format(walletId))
        answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω")
        memory['mes_new'].append(answer.message_id)
        page['page'] = 'walletList'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletThis':
        async with state.proxy() as data:
            walletId = data['pay_walletId']
        cur.execute("UPDATE pay_wallet SET active = 0")
        cur.execute("UPDATE pay_wallet SET active = 1 WHERE id = '{}'".format(walletId))
        page['page'] = 'walletList'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'showInOp':
        pay_payShowInOp = 0 if int(save['setting']['pay_payShowInOp']) else 1
        save = await saver('replace', {"setting": {"pay_payShowInOp": pay_payShowInOp}})
        page['page'] = 'adminMenu'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'showInFree':
        pay_payFree = 0 if int(save['setting']['pay_payFree']) else 1
        save = await saver('replace', {"setting": {"pay_payFree": pay_payFree}})
        page['page'] = 'adminMenu'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddPayselection4':
        if page['param']:
            if int(page['param']): # –µ—Å–ª–∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –ø–µ—Ä–≤—ã–π
                async with state.proxy() as data:
                    cur.execute("SELECT COUNT(*) FROM pay_wallet")
                    active = 0 if cur.fetchall()[0]['count'] else 1
                    other_param = str({'recurrent_repeat_payment': 1})
                    cur.execute("INSERT INTO pay_wallet (active, company, shop_id, token, other) VALUES (%s, %s, %s, %s, %s)", [active, 'Payselection', data['pay_walletAdd'], data['pay_walletAdd2'], other_param])
                    page['page'] = 'walletList'
                    answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ü–ª–∞—Ç–µ–∂–∫–∞ Payselection —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                    memory['mes_new'].append(answer.message_id)
            else: # –µ—Å–ª–∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞–¥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
                async with state.proxy() as data:
                    data['pay_walletAdd3'] = 0
        else:
            page['page'] = 'walletAddYoomoney3'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddPayselection5':
        if page['param']:
            async with state.proxy() as data:
                data['pay_walletAdd4'] = page['param']
        else:
            page['page'] = 'walletAddYoomoney4'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'statistic':
        mes = {}
        mes['photo'] = 'files/loading_graph.jpg'
        mes['text'] = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...'
        answer = await send(tg.from_user.id, mes)
        message_id = answer.message_id
        memory['mes_new'].append(message_id)
        cur.execute("SELECT SUM(price) FROM pay_payment WHERE status = 'paid' or status = 'recurrent'")
        pay_sum = cur.fetchall()[0]['sum']
        if not pay_sum:
            pay_sum = 0
        mes['text'] = f"–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {await money(pay_sum)}"
        if 'pay_time' in modules:
            cur.execute("SELECT COUNT(*) FROM users WHERE pay_time >= '{}'".format(int(time.time())))
            count = cur.fetchall()[0]['count']
            mes['text'] += f"\n\nüëë VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {await money(count)}"
            mes['text'] += f"\n\nüëë VIP:"
        pay_option = {}
        cur.execute("SELECT DISTINCT option FROM pay_payment")
        for row in cur.fetchall():
            cur.execute("SELECT SUM(price) FROM pay_payment WHERE status = 'paid' AND option = '{}'".format(row['option']))
            pay_option[row['option']] = cur.fetchall()[0]['sum']
        if 'pay_time' in modules:
            payTime_list = eval(save['setting']['payTime_list'])
            payTime_list['–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π'] = {'name': '–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π'}
            for k, v in pay_option.items():
                mes['text'] += f"\n{payTime_list[k]['name']}: {await money(v)}"
        mes['but'] = [[{'text': but_back, 'callback_data': "pay_adminMenu"}]]
        mes['message_id'] = message_id
        await send(tg.from_user.id, {'caption': mes['text'], 'message_id': message_id, 'but': mes['but']})
        ###### –≥—Ä–∞—Ñ–∏–∫
        # —Å–æ–∑–¥–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –ø–∞–ø–∫—É
        info_folder = 'files/graph'
        image = f'{info_folder}/pay.jpg'
        if not os.path.exists(info_folder):
            os.mkdir(info_folder)
        elif os.path.exists(image):
            os.remove(image)
        # –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ—É
        x = [] # –¥–∞—Ç–∞
        y1 = [] # —Å—É–º–º–∞ –∑–∞–¥–µ–Ω—å
        y2 = [] # –∫–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫ –∑–∞ –¥–µ–Ω—å
        y1_max = 0
        y2_max = 0
        pay_sum_max = 1
        now = datetime.datetime.now()
        for i in range(20):
            date_pay = now - datetime.timedelta(days=i)
            date_check = date_pay.strftime("%Y-%m-%d")
            date_start = f"{date_check} 00:00:00"
            date_finish = f"{date_check} 23:59:59"
            cur.execute("SELECT COUNT(*) FROM pay_payment WHERE date_pay >= '{}' AND date_pay <= '{}' AND (status = 'paid' or status = 'recurrent')".format(date_start, date_finish))
            count = cur.fetchall()[0]['count']
            y2.append(count)
            if y1_max < count:
                y1_max = count
            cur.execute("SELECT SUM(price) FROM pay_payment WHERE date_pay >= '{}' AND date_pay <= '{}' AND (status = 'paid' or status = 'recurrent')".format(date_start, date_finish))
            pay_sum = cur.fetchall()[0]['sum']
            if not pay_sum:
                pay_sum = 0
            y1.append(pay_sum - count)
            x_date = date_pay.strftime("%d %m")
            x_date = x_date[1:] if int(x_date[:1]) == 0 else x_date
            x.append(x_date)
            if pay_sum_max < pay_sum:
                pay_sum_max = pay_sum
        x.reverse()
        y1.reverse()
        y2.reverse()

        ######## –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        x_len = np.arange(len(x))  # the label locations
        width = 0.75  # —à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å–æ–∫ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö

        fig, ax = plt.subplots(layout='constrained', figsize=(10, 6))

        rects = ax.bar(x_len, y2, width, label='y2', color='orange')
        ax.bar_label(rects, padding=3, color='white')

        rects = ax.bar(x_len, y1, width, label='y1', color='orange', bottom=y2)
        ax.bar_label(rects, padding=3)

        ax.set_xticks(x_len + width - 0.8, x, rotation=66)
        pay_sum_max = pay_sum_max + 1 if pay_sum_max <= 10 else pay_sum_max + round(pay_sum_max / 10)
        ax.set_ylim(0, pay_sum_max)

        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_visible(False)
        ax.spines['bottom'].set_color('#DDDDDD')
        ax.tick_params(bottom=True, left=False, grid_color='#DDDDDD')
        ax.set_axisbelow(True)
        ax.yaxis.grid(True, color='#EEEEEE')
        ax.xaxis.grid(False)
        ax.set_title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –¥–Ω–µ–π')

        plt.savefig(image) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º

        await send(tg, {'photo': image, 'text': mes['text'], 'message_id': message_id, 'but': mes['but']})
        # with open(image, 'rb') as photo:
        #     im = types.input_media.InputMediaPhoto(photo, caption=mes['text'])
        #     await send(tg, {'media': im,  'message_id': message_id, 'but': mes['but']})
    elif page['page'] == 'yyy':
        m[0]['text'] = "–¢–µ–∫—Å—Ç"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_go"}]]
        answer = await send(tg, {'text': '—Ç–µ–∫—Å—Ç'})
        memory['mes_new'].append(answer.message_id)
        page['page'] = 'yy'
        memory['dop'] = await pay_dop(tg, state, page, error)
    else:
        # –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≥–¥–µ –º—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –≤ –î–û–ü
        memory['dop'] = await pay_dop(tg, state, page)
    await memory_finish(tg, state, memory, page, m)

# —Ç–µ–∫—Å—Ç
async def pay_message(tg, state, page):
    save = await saver()
    error = ''
    m = {0: {}}
    memory = await memory_start(state)
    if page['page'] == 'walletAddCommon' and 'text' in tg: # –û–±—â–∏–π –¥–ª—è –≤–≤–æ–¥–∞ ID_–º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Ç–æ–∫–µ–Ω–∞
        async with state.proxy() as data:
            if 'pay_walletAdd' in data:
                company = data['pay_walletAdd']['company']
                text = tg.text.replace(" ", '')
                if re.search(r'^[1-9][0-9]{3,}$', text):
                    wal = False
                    cur.execute("SELECT * FROM pay_wallet WHERE company = '{}' and shop_id = '{}'".format(company, text))
                    for row in cur.fetchall():
                        wal = dict(row)
                    if not wal:
                        data['pay_walletAdd']['shop_id'] = text
                        page['page'] = 'walletAddCommon2'
                    else:
                        error = f"‚ùå –î–∞–Ω–Ω—ã–π ID –ú–∞–≥–∞–∑–∏–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ"
                else:
                    error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π ID –ú–∞–≥–∞–∑–∏–Ω–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã."
            else:
                page['page'] = 'walletList'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddCommon2' and 'text' in tg: # –û–±—â–∏–π –¥–ª—è –≤–≤–æ–¥–∞ ID_–º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Ç–æ–∫–µ–Ω–∞
        async with state.proxy() as data:
            if 'pay_walletAdd' in data:
                text = tg.text.replace(" ", '')
                if re.search(r'^[0-9|a-z|A-Z]{10,}$', text):
                    cur.execute("SELECT COUNT(*) FROM pay_wallet")
                    active = 0 if cur.fetchall()[0]['count'] else 1
                    company = data['pay_walletAdd']['company']
                    shop_id = data['pay_walletAdd']['shop_id']
                    cur.execute("INSERT INTO pay_wallet (active, company, shop_id, token) VALUES (%s, %s, %s, %s)", [active, company, shop_id, text])
                    page['page'] = 'walletList'
                    if company == 'WebpayBy':
                        name = 'Webpay.by'
                    elif company == 'BepaidBy':
                        name = 'BePaid.by'
                    else:
                        name = company
                    answer = await bot.send_message(chat_id=tg.from_user.id, text=f"‚úÖ –ü–ª–∞—Ç–µ–∂–∫–∞ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                    memory['mes_new'].append(answer.message_id)
                else:
                    error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã. 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –±–æ–ª—å—à–µ"
            else:
                page['page'] = 'walletList'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddQiwi' and 'text' in tg:  # Qiwi
        text = tg.text.replace(" ", '')
        if re.search(r'^[0-9|a-z]{189}$', text):
            wal = False
            cur.execute("SELECT * FROM pay_wallet WHERE company = '{}' and token = ".format('Qiwi', text))
            for row in cur.fetchall():
                wal = dict(row)
            if not wal:
                cur.execute("SELECT COUNT(*) FROM pay_wallet")
                count = cur.fetchall()[0]['count']
                if count:
                    active = 0
                else:
                    active = 1
                cur.execute("INSERT INTO pay_wallet (active, company, shop_id, token) VALUES (%s, %s, %s, %s)", [active, 'Qiwi', '', text])
                page['page'] = 'walletList'
                answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ü–ª–∞—Ç–µ–∂–∫–∞ Qiwi —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                memory['mes_new'].append(answer.message_id)
            else:
                error = f"‚ùå –î–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω Qiwi —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã), –ª–∏–±–æ —Ç–æ–∫–µ–Ω –≤—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddAaioSo' and 'text' in tg: # aaio.so
        text = tg.text.replace(" ", '')
        if re.search(r'^[0-9|a-z|A-Z|-]{36}$', text):
            wal = False
            cur.execute("SELECT * FROM pay_wallet WHERE company = '{}' and shop_id = '{}'".format('AaioSo', text))
            for row in cur.fetchall():
                wal = dict(row)
            if not wal:
                async with state.proxy() as data:
                    data['pay_walletAdd'] = text
                page['page'] = 'walletAddAaioSo2'
            else:
                error = f"‚ùå –î–∞–Ω–Ω—ã–π ID –ú–∞–≥–∞–∑–∏–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ"
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π ID –ú–∞–≥–∞–∑–∏–Ω–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±—É–∫–≤—ã –∏ —Ç–∏—Ä–µ. –û–Ω –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–º–∏–µ—Ä–Ω–æ –≤–æ—Ç —Ç–∞–∫:\n4d101317-1111-22e2-a33f-d322251abefa"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddAaioSo2' and 'text' in tg: # aaio.so
        text = tg.text.replace(" ", '')
        if re.search(r'^[0-9|a-z|A-Z]{32}$', text):
            cur.execute("SELECT COUNT(*) FROM pay_wallet")
            active = 0 if cur.fetchall()[0]['count'] else 1
            async with state.proxy() as data:
                cur.execute("INSERT INTO pay_wallet (active, company, shop_id, token) VALUES (%s, %s, %s, %s)", [active, 'AaioSo', data['pay_walletAdd'], text])
            page['page'] = 'walletList'
            answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ü–ª–∞—Ç–µ–∂–∫–∞ aaio.so —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            memory['mes_new'].append(answer.message_id)
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddYoomoney' and 'text' in tg:  # YooMoney
        text = tg.text.replace(" ", '')
        if re.search(r'^[0-9]{10,}$', text):
            wal = False
            cur.execute("SELECT * FROM pay_wallet WHERE company = '{}' and shop_id = '{}'".format('YooMoney', text))
            for row in cur.fetchall():
                wal = dict(row)
            if not wal:
                async with state.proxy() as data:
                    data['pay_walletAdd'] = text
                page['page'] = 'walletAddYoomoney2'
            else:
                error = f"‚ùå –î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –Æ–º–∞–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddYoomoney2' and 'text' in tg:  # YooMoney
        text = tg.text
        if re.search(r'^[0-9|a-z|A-Z|+|/]{10,}$', text):
            cur.execute("SELECT COUNT(*) FROM pay_wallet")
            active = 0 if cur.fetchall()[0]['count'] else 1
            async with state.proxy() as data:
                cur.execute("INSERT INTO pay_wallet (active, company, shop_id, token) VALUES (%s, %s, %s, %s)",
                            [active, 'YooMoney', data['pay_walletAdd'], text])
            page['page'] = 'walletList'
            answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ü–ª–∞—Ç–µ–∂–∫–∞ YooMoney —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            memory['mes_new'].append(answer.message_id)
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddRobokassa' and 'text' in tg: # YooMoney
        text = tg.text.replace(" ", '')
        if re.search(r'^[0-9|a-z|A-Z|_]{2,}$', text):
            cur.execute("SELECT * FROM pay_wallet WHERE company = 'Robokassa' and shop_id = '{}'".format(text))
            for row in cur.fetchall():
                wal = dict(row)
            if 'wal' not in locals():
                async with state.proxy() as data:
                    data['pay_walletAdd'] = text
                page['page'] = 'walletAddRobokassa2'
            else:
                error = f"‚ùå –î–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ Robokassa —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±—É–∫–≤—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddRobokassa2' and 'text' in tg: # YooMoney
        text = tg.text
        if re.search(r'^[0-9|a-z|A-Z]{3,}$', text):
            cur.execute("SELECT COUNT(*) FROM pay_wallet")
            active = 0 if cur.fetchall()[0]['count'] else 1
            async with state.proxy() as data:
                cur.execute("INSERT INTO pay_wallet (active, company, shop_id, token) VALUES (%s, %s, %s, %s)", [active, 'Robokassa', data['pay_walletAdd'], text])
            page['page'] = 'walletList'
            answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ü–ª–∞—Ç–µ–∂–∫–∞ Robokassa —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            memory['mes_new'].append(answer.message_id)
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletManual' and 'text' in tg:
        text = tg.text
        if text[:1] == '@':
            text = text[1:]
        text.replace('<', '').replace('>', '')
        async with state.proxy() as data:
            data['pay_walletAdd'] = text
        page['page'] = 'walletManual2'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletManual2' and 'text' in tg:
        async with state.proxy() as data:
            wallet_1 = data['pay_walletAdd']
        text = tg.text
        if text[:1] == '@':
            text = text[1:]
        text.replace('<', '').replace('>', '')
        cur.execute("SELECT COUNT(*) FROM pay_wallet")
        count = cur.fetchall()[0]['count']
        if count:
            active = 0
        else:
            active = 1
        cur.execute("INSERT INTO pay_wallet (active, company, shop_id, token) VALUES (%s, %s, %s, %s)", [active, 'manual', wallet_1, text])
        page['page'] = 'walletList'
        answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –†—É—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        memory['mes_new'].append(answer.message_id)
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAdd–°loudPaymentsWidget': # –°loudPayments Widget
        text = tg.text
        if re.search(r'^[0-9|a-z|A-Z|_]{10,}$', text):
            cur.execute("SELECT COUNT(*) FROM pay_wallet")
            count = cur.fetchall()[0]['count']
            if count:
                active = 0
            else:
                active = 1
            cur.execute("INSERT INTO pay_wallet (active, company, token) VALUES (%s, %s, %s)", [active, '–°loudPaymentsWidget', text])
            page['page'] = 'walletList'
            answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ü–ª–∞—Ç–µ–∂–∫–∞ –°loudPayments Widget —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            memory['mes_new'].append(answer.message_id)
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä Public ID, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±—É–∫–≤—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddPayselection' and 'text' in tg: # Payselection
        text = tg.text
        if re.search(r'^[1-9][0-9]{4,5}$', text):
            wal = False
            cur.execute("SELECT * FROM pay_wallet WHERE company = '{}' and shop_id = '{}'".format('Payselection', text))
            for row in cur.fetchall():
                wal = dict(row)
            if not wal:
                async with state.proxy() as data:
                    data['pay_walletAdd'] = text
                page['page'] = 'walletAddPayselection2'
            else:
                error = f"‚ùå –î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ Payselection —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddPayselection2' and 'text' in tg: # Payselection
        text = tg.text
        if re.search(r'^[0-9|a-z]{130}$', text):
            async with state.proxy() as data:
                data['pay_walletAdd2'] = text
            page['page'] = 'walletAddPayselection9'

        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–π, –∏–º–µ–µ—Ç 130 —Å–∏–º–≤–æ–ª–æ–≤."
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddPayselection9' and 'text' in tg: # Payselection
        text = tg.text
        if re.search(r'^[0-9|a-z|A-Z]{16}$', text):
            async with state.proxy() as data:
                data['pay_walletAdd9'] = text
            page['page'] = 'walletAddPayselection3'
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞. –ö–ª—é—á  –∏–º–µ–µ—Ç 16 —Å–∏–º–≤–æ–ª–æ–≤."
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddPayselection5' and 'text' in tg: # Payselection
        text = tg.text
        if re.search(r'^[1-9][0-9]*$', text):
            async with state.proxy() as data:
                data['pay_walletAdd5'] = text
            page['page'] = 'walletAddPayselection6'
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletAddPayselection6' and 'text' in tg: # Payselection
        text = tg.text
        if re.search(r'^[1-9][0-9]*$', text):
            cur.execute("SELECT COUNT(*) FROM pay_wallet")
            active = 0 if cur.fetchall()[0]['count'] else 1
            async with state.proxy() as data:
                other_param = str({'recurrent_repeat_payment': data['pay_walletAdd3'] ,'recurrent_period_type': data['pay_walletAdd4'], 'recurrent_period_count': data['pay_walletAdd5'], 'recurrent_price': int(text)})
                cur.execute("INSERT INTO pay_wallet (active, company, shop_id, token, token2, other) VALUES (%s, %s, %s, %s, %s, %s)", [active, 'Payselection', data['pay_walletAdd'], data['pay_walletAdd2'], data['pay_walletAdd9'], other_param])
            page['page'] = 'walletList'
            answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ü–ª–∞—Ç–µ–∂–∫–∞ Payselection —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            memory['mes_new'].append(answer.message_id)
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'editCronMessage':
        mes_tg = await message_load(tg, button=False, file=True)
        if not await message_change(tg, state, mes_tg, eval(save['setting']['payTime_cron_message']), setting_name='payTime_cron_message'):
            return False # –µ—Å–ª–∏ –≥—Ä—É–∑–∏–ª–∏ –≥–∞–ª–µ—Ä–µ—é, —Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å—Ç–∏–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–º–æ–∑–Ω–µ–º
        memory['page_new'] = 'editCronMessage'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'editMessage':
        await message_processing(tg, 'pay', button=False, save_setting=True)
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'priceOneSet' and 'text' in tg:
        text = tg.text.replace(',', '.')
        if re.search(r'^(0|[1-9][0-9]*)(\.[0-9]{1,2})?$', text):
            save = await saver('replace', {'setting': {"pay_price": float(text)}})
            answer = await send(tg, {'text': f'‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {text}'})
            memory['mes_new'].append(answer.message_id)
            page['page'] = 'adminMenu'
        else:
            error = f"‚ùå –ù–µ –≤–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –≤–æ–∑–º–æ–∂–Ω–æ—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'userBalanceEdit' and 'text' in tg:
        text = tg.text.replace('https://', '').replace('t.me/', '').replace('@', '')
        cust = {}
        cust_check = False
        if re.search(r'^[0-9]+$', text):
            cust_check = True
            cur.execute("SELECT * FROM users WHERE user_id = '{}'".format(text))
            for row in cur.fetchall():
                cust = dict(row)
        elif re.search(r'^[0-9|a-z|_]+$', text):
            cust_check = True
            cur.execute("SELECT * FROM users WHERE username = '{}'".format(text))
            for row in cur.fetchall():
                cust = dict(row)
        if cust_check:
            if cust:
                async with state.proxy() as data:
                    data['pay_userBalanceEdit'] = cust
                page['page'] = 'userBalanceEdit2'
            else:
                error = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥"
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'userBalanceEdit2' and 'text' in tg:
        cust = {}
        async with state.proxy() as data:
            if 'pay_userBalanceEdit' in data:
                cust = data['pay_userBalanceEdit']
        if cust:
            text = tg.text.replace(',', '.')
            if re.search(r'^(-)?(0|[1-9][0-9]*)(\.[0-9]{1,2})?$', text):
                balance_new = cust['balance'] + float(text)
                cur.execute("UPDATE users SET balance = '{}' WHERE user_id = '{}'".format(balance_new, cust['user_id']))
                answer = await send(tg, {'text': f'‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {await money(balance_new)}'})
                memory['mes_new'].append(answer.message_id)
                page['page'] = 'adminMenu'
            else:
                error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–∏–Ω—É—Å –∏ —Ç–æ—á–∫—É"
        else:
            page['page'] = 'userBalanceEdit'
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'walletDescription' and 'text' in tg:
        text = tg.text.replace("'", "`")
        save = await saver('replace', {"setting": {"pay_walletDescription": text}})
        memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'xx' and 'text' in tg:
        m[0]['text'] = '—Ç–µ–∫—Å—Ç'
        m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_go"}]]
        answer = await send(tg, {'text': '—Ç–µ–∫—Å—Ç'})
        memory['mes_new'].append(answer.message_id)
        error = f"‚ùå –î–∞–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        page['page'] = 'yy'
        memory['dop'] = await pay_dop(tg, state, page, error)
        memory['page_new'] = 'pay_xx'
    else:
        memory['stop'] = True
        memory['dop'] = await pay_dop(tg, state, page, error)
    await memory_finish(tg, state, memory, page, m)

async def pay_dop(tg, state, page, error_mes=False):
    save = await saver()
    if tg.from_user.id in eval(save['setting']['ban_users']):
        return False
    error = ''
    m = {0: {}}
    memory = await memory_start(state, load_memory=False)
    if page['page'] == 'adminMenu' and tg.from_user.id in save['admins']:
        await memory_reset(state, 'pay')
        await memory_reset(state, 'payTime')
        user = await user_load(tg, state)
        m[0]['text'] = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ VIP:"
        m[0]['but'] = []
        m[0]['but'].append([{'text': "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç", 'callback_data': "pay_statistic"}])
        if 'pay_price' in save['setting']:
            m[0]['but'].append([{'text': f"üí≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—ã: {save['setting']['pay_price']}", 'callback_data': "pay_priceOneSet"}])
        if module_main == 'bot':
            if await module.bot.bot_balance():
                m[0]['but'].append([{'text': f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 'callback_data': "pay_userBalanceEdit"}])
        if 'payTime' in modules:
            m[0]['but'].append([{'text': "ü´Ö –°–ø–∏—Å–æ–∫ VIP —é–∑–µ—Ä–æ–≤", 'callback_data': "payTime_userList"}])
            m[0]['but'].append([{'text': "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π VIP –Ω–∞ —Å—Ç–∞—Ä—Ç–µ", 'callback_data': "payTime_startVipFree"}])
            m[0]['but'].append([{'text': "üí≤ –ü—Ä–∞–π—Å —Ü–µ–Ω –Ω–∞ VIP", 'callback_data': "payTime_priceList"}])
        if 'payRating' in modules:
            m[0]['but'].append([{'text': "ü´Ö –°–ø–∏—Å–æ–∫ VIP —é–∑–µ—Ä–æ–≤", 'callback_data': "payRating_userList"}])
            m[0]['but'].append([{'text': "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –û–¢–†–´–¢–ò–Ø –Ω–∞ —Å—Ç—Ä–∞—Ç–µ", 'callback_data': "payRating_startOpenFree"}])
            m[0]['but'].append([{'text': "üí≤ –ü—Ä–∞–π—Å —Ü–µ–Ω –Ω–∞ VIP + –û–¢–ö–†–´–¢–ò–Ø", 'callback_data': "payRating_priceList"}])
        if 'op' in modules and 'pay' in modules:
            smile = "üü¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º" if int(save['setting']['pay_payShowInOp']) else "‚ö´Ô∏è –°–∫—Ä—ã–≤–∞–µ–º"
            m[0]['but'].append([{'text': f"{smile} –∫–Ω–æ–ø–∫—É: –ù–ï –•–û–ß–£ –ü–û–î–ü–ò–°–´–í–ê–¢–¨–°–Ø", 'callback_data': f"pay_showInOp"}])
        if 'payTime' in modules or 'payRating' in modules:
            m[0]['but'].append([{'text': "üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VIP —Å–æ–æ–±—â–µ–Ω–∏—è", 'callback_data': "pay_editMessage"}])
            m[0]['but'].append([{'text': "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ VIP", 'callback_data': "pay_editCronMessage"}])
            smile = "üü¢ –í–∫–ª" if int(save['setting']['pay_payFree']) else "‚ö´Ô∏è –í—ã–∫–ª"
            m[0]['but'].append([{'text': f"–ö–Ω–æ–ø–∫–∞ –ü–û–õ–£–ß–ò–¢–¨ VIP –ë–ï–°–ü–õ–ê–¢–ù–û: {smile}", 'callback_data': f"pay_showInFree"}])
        m[0]['but'].append([{'text': "ü™™ –û–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–ª–∞—Ç–µ–∂–∫–µ", 'callback_data': "pay_walletDescription"}])
        m[0]['but'].append([{'text': "ü™™ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏", 'callback_data': "pay_walletList"}])
        m[0]['but'].append([{'text': but_back, 'callback_data': "start_start"}])
    elif page['page'] == 'walletDescription':
        m[0]['text'] = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥–∏—Ç —é–∑–µ—Ä –ø–µ—Ä–µ–π–¥—è –≤ –ø–ª–∞—Ç–µ–∂–∫—É(–ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã):"
        m[0]['text'] += f"\n\n<b>{save['setting']['pay_walletDescription']}</b>"
        m[0]['text'] += "\n\n<i>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.</i>"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_adminMenu"}]]
    elif page['page'] == 'userBalanceEdit':
        m[0]['text'] = f"–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ id"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_adminMenu"}]]
    elif page['page'] == 'userBalanceEdit2':
        cust = {}
        async with state.proxy() as data:
            if 'pay_userBalanceEdit' in data:
                cust = data['pay_userBalanceEdit']
        if cust:
            m[0]['text'] = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            name = f"{cust['first_name']} {cust['last_name']}".strip()
            if not name:
                name = cust['user_id']
            m[0]['text'] += f"<a href='{cust['user_id']}'>{name}</a>"
            if cust['username']:
                m[0]['text'] += f" @{cust['username']}"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_adminMenu"}]]
            m[0]['text'] += f"\n\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {await money(cust['balance'])}"
            m[0]['text'] += f"\n\n<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞</b>"
            m[0]['text'] += f"\n<i>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —É–≤–µ–ª–∏—á–∏—Ç –±–∞–ª–∞–Ω—Å.</i>"
            m[0]['text'] += f"\n<i>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —É–º–µ–Ω—å—à–∏—Ç –±–∞–ª–∞–Ω—Å.</i>"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_adminMenu"}]]
        else:
            page['page'] = 'userBalanceEdit'
            memory['dop'] = await pay_dop(tg, state, page, error)
    elif page['page'] == 'priceOneSet':
        m[0]['text'] = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {save['setting']['pay_price']}"
        m[0]['text'] += f"\n\n<i>–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é</i>"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_adminMenu"}]]
    elif page['page'] == 'editCronMessage':
        m[0] = await message_show(setting_name='payTime_cron_message')
        m[1] = {}
        m[1]['text'] = "‚¨ÜÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ‚¨ÜÔ∏è\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ:"
        m[1]['text'] += "\n\n–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: <a href='https://telegra.ph/ppp-03-14-6'>–ü–†–û–ß–ò–¢–ê–¢–¨</a>"
        m[1]['but'] = [[{'text': but_back, 'callback_data': "pay_adminMenu"}]]
    elif page['page'] == 'editMessage':
        m[0] = await show_message_from_setting('pay')
        m[1] = {}
        m[1]['text'] = "‚¨ÜÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ‚¨ÜÔ∏è\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ:"
        m[1]['text'] += "\n\n–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: <a href='https://telegra.ph/PP-09-17-6'>–ü–†–û–ß–ò–¢–ê–¢–¨</a>"
        m[1]['but'] = [[{'text': but_back, 'callback_data': "pay_adminMenu"}]]
    elif page['page'] == 'walletList':
        m[0]['text'] = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤: "
        m[0]['but'] = []
        cur.execute("SELECT * FROM pay_wallet ORDER BY id")
        for row in cur.fetchall():
            if row['company'] == 'manual':
                row['company'] = "–†—É—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞"
            smile = "üü¢" if row['active'] else "‚ö´Ô∏è"
            m[0]['but'].append([{'text': f"{smile} ‚Ññ {row['id']} - {row['company']}", 'callback_data': f"pay_walletOne_{row['id']}"}])
        m[0]['but'].append([{'text': "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", 'callback_data': "pay_walletAdd"}])
        m[0]['but'].append([{'text': but_back, 'callback_data': "pay_adminMenu"}])
    elif re.search(r'^walletAdd', page['page']):
        if page['page'] == 'walletAddRobokassa':  # Payselection
            m[0]['text'] = '1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ Robokassa –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", –∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏:'
            m[0]['text'] += f"\n\nResult Url:<code>\nhttps://{pay_link}/robokassa</code>"
            m[0]['text'] += f"\n\nSuccess Url:<code>\nhttps://{pay_link}/success</code>"
            m[0]['text'] += f"\n\nFail Url:<code>\nhttps://{pay_link}/fail</code>"
            m[0]['text'] += '\n\n2Ô∏è‚É£ –¢–∞–º –∂–µ –≤ —Ç—Ä–µ—Ö –º–µ—Å—Ç–∞ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä "–ú–µ—Ç–æ–¥ –æ—Ç—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ Result Url", –≤—ã–±–µ—Ä–∏—Ç–µ POST –≤–æ –≤—Å–µ—Ö 3 –º–µ—Å—Ç–∞—Ö'
            m[0]['text'] += '\n\n3Ô∏è‚É£ –í "–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ —Ö–µ—à–∞" –≤—ã–±–µ—Ä–∏—Ç–µ "MD5"'
            m[0]['text'] += '\n\n4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ'
            m[0]['text'] += '\n\n5Ô∏è‚É£ –¢–∞–º –∂–µ –Ω–∞–≤–µ—Ä—Ö—É, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É:'
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddRobokassa2':  # Payselection
            m[0]['text'] = "–í–≤–µ–¥–∏—Ç–µ <b>–ü–∞—Ä–æ–ª—å #1</b> –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ Robokassa:"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddPayselection': # Payselection
            m[0]['text'] = "1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ Payselection, –∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏:"
            m[0]['text'] += f"\n\nURL —É—Å–ø–µ—Ö–∞:<code>\nhttps://{pay_link}/success</code>"
            m[0]['text'] += f"\n\nURL –æ—à–∏–±–∫–∏:<code>\nhttps://{pay_link}/fail</code>"
            m[0]['text'] += f"\n\nURL –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:<code>\nhttps://{pay_link}/PayselectionAnswer</code>"
            m[0]['text'] += "\n\n2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ ID —Å–∞–π—Ç–∞ (–º–∞–≥–∞–∑–∏–Ω–∞) –Ω–∞ Payselection:"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddPayselection2': # Payselection
            m[0]['text'] = "–í–≤–µ–¥–∏—Ç–µ <b>–ø—É–±–ª–∏–Ω—ã–π –∫–ª—é—á</b> –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ Payselection:"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddPayselection9': # Payselection
            m[0]['text'] = "–í–≤–µ–¥–∏—Ç–µ <b>—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á</b> –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ Payselection:"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddPayselection3': # Payselection
            m[0]['text'] = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"
            m[0]['text'] += "\n\n<b>1Ô∏è‚É£ –≤–∞—Ä–∏–∞–Ω—Ç</b>: –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–ª–∞—Ç–∏—Ç—å —Ç–∞–∫—É—é –∂–µ —Å—É–º–º—É –∏ –Ω–∞ —Ç–∞–∫–æ–π –∂–µ —Å—Ä–æ–∫, –∫–∞–∫–æ–π –≤—ã–±—Ä–∞–ª –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ"
            m[0]['text'] += "\n\n<b>2Ô∏è‚É£ –≤–∞—Ä–∏–∞–Ω—Ç</b>: –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–ª–∞—Ç–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Ü–µ–Ω—É –∏ –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —Å–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ –¥–∞–ª–µ–µ"
            m[0]['but'] = [
                [
                    {'text': "–í–∞—Ä–∏–∞–Ω—Ç 1Ô∏è‚É£", 'callback_data': "pay_walletAddPayselection4_1"},
                    {'text': "–í–∞—Ä–∏–∞–Ω—Ç 2Ô∏è‚É£", 'callback_data': "pay_walletAddPayselection4_0"},
                ],
                [{'text': but_back, 'callback_data': "pay_walletList"}]
            ]
        elif page['page'] == 'walletAddPayselection4': # Payselection
            m[0]['text'] = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:\n\n<i>–ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É —Ä–∞–∑ 3, 5 –∏–ª–∏ 10 –¥–Ω–µ–π, –≤—ã–±–µ—Ä–∏—Ç–µ –î–ï–ù–¨. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –∏–ª–∏ —Ä–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –ù–ï–î–ï–õ–Ø. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –≤—ã–±–µ—Ä–∏—Ç–µ –ú–ï–°–Ø–¶</i>"
            m[0]['but'] = [
                [
                    {'text': "–î–µ–Ω—å", 'callback_data': "pay_walletAddPayselection5_day"},
                    {'text': "–ù–µ–¥–µ–ª—è", 'callback_data': "pay_walletAddPayselection5_week"},
                    {'text': "–ú–µ—Å—è—Ü", 'callback_data': "pay_walletAddPayselection5_month"},
                ],
                [{'text': but_back, 'callback_data': "pay_walletList"}]
            ]
        elif page['page'] == 'walletAddPayselection5': # Payselection
            async with state.proxy() as data:
                if 'pay_walletAdd3' in data:
                    walletAdd4 = data['pay_walletAdd3']
                    if data['pay_walletAdd4'] == 'day':
                        dop_mes = "–ù–∞–ø–∏–º–µ—Ä: –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É 3, —á—Ç–æ–± —Å–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å. –¶–∏—Ñ—Ä—É 1, —á—Ç–æ–± —Å–Ω–∏–º–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
                        dop_mes_2 = "–¥–Ω–µ–π"
                    elif data['pay_walletAdd4'] == 'week':
                        dop_mes = "–ù–∞–ø–∏–º–µ—Ä: –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É 1, —á—Ç–æ–± —Å–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é. –¶–∏—Ñ—Ä—É 2, —á—Ç–æ–± —Å–Ω–∏–º–∞—Ç—å 1 —Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏"
                        dop_mes_2 = "–Ω–µ–¥–µ–ª—å"
                    elif data['pay_walletAdd4'] == 'month':
                        dop_mes = "–ù–∞–ø–∏–º–µ—Ä: –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É 1, —á—Ç–æ–± —Å–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –¶–∏—Ñ—Ä—É 2, —á—Ç–æ–± —Å–Ω–∏–º–∞—Ç—å 1 —Ä–∞–∑ –≤ 2 –º–µ—Å—è—Ü–∞"
                        dop_mes_2 = "–º–µ—Å—è—Ü–µ–≤"
                    m[0]['text'] = f"–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–π –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ {dop_mes_2} –º–µ–∂–¥—É —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏:\n\n<i>{dop_mes}</i>"
                    m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
                else:
                    page['page'] = 'walletList'
                    memory['dop'] = await pay_dop(tg, state, page, error)
        elif page['page'] == 'walletAddPayselection6': # Payselection
            m[0]['text'] = f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–æ–π, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAdd–°loudPaymentsWidget': # –°loudPayments Widget
            m[0]['text'] = "–í–≤–µ–¥–∏—Ç–µ Public ID –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ –°loudPayments:"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddQiwi': # Qiwi
            m[0]['video'] = 'files/pay/Qiwi.mp4'
            m[0]['text'] = "1Ô∏è‚É£ –°–ª–µ–¥—É–π—Ç–µ –≤–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
            m[0]['text'] += "\n\n2Ô∏è‚É£ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:"
            m[0]['text'] += f"\nhttps://{pay_link}/QiwiAnswer"
            m[0]['text'] += "\n\n3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ <b>–ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á</b> –∫–æ—à–µ–ª—å–∫–∞:"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddYoomoney': # YooMoney
            m[0]['text'] = "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\nhttps://yoomoney.ru/settings\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ (—Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä, –æ–∫–æ–ª–æ –∞–≤–∞—Ç–∞—Ä–∫–∏) –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –≤ –±–æ—Ç"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddYoomoney2': # YooMoney
            web = save["bot"]["username"].replace("_", "-")
            m[0]['text'] = '1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://yoomoney.ru/transfer/myservices/http-notification –∏ –≤ –≥—Ä–∞—Ñ—É '
            m[0]['text'] += f'"–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (URL —Å–∞–π—Ç–∞)" –≤–≤–µ–¥–∏—Ç–µ https://{pay_link}/YooMoney'
            m[0]['text'] += '\n\n2Ô∏è‚É£ –ù–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –æ–∫–æ–ª–æ "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å HTTP-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"'
            m[0]['text'] += '\n\n3Ô∏è‚É£ –ù–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ä–µ—Ç", —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ—è–≤–∏–≤—à–∏–π—Å—è –∫–æ–¥, –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –±–æ—Ç'
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddAaioSo': # aaio.so
            m[0]['text'] = "–ü—Ä–∏—à–ª–∏—Ç–µ ID –í–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞\n\n–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ https://aaio.so/cabinet/merchants –ø–µ—Ä–µ–π–¥—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddAaioSo2': # aaio.so
            m[0]['text'] = '1Ô∏è‚É£ –ù–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, —Å–ø—É—Å—Ç–∏—Ç–µ—Å—å –≤–Ω–∏–∑ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ —Å—Ç—Ä–æ–∫—É <b>"URL –û–ø–æ–≤–µ—â–µ–Ω–∏—è"</b>:'
            m[0]['text'] += f"\n<code>https://{pay_link.lower()}/aaioso</code>"
            m[0]['text'] += f'\n–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</b>'
            m[0]['text'] += '\n\n2Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ <b>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á ‚Ññ1</b>, –≤—ã –µ–≥–æ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å–µ —Ç–∞–º –∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏"'
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddCommon': # –û–±—â–∏–π –¥–ª—è –≤–≤–æ–¥–∞ ID_–º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Ç–æ–∫–µ–Ω–∞
            async with state.proxy() as data:
                data['pay_walletAdd'] = {'company': page['param']}
            m[0]['text'] = "–ü—Ä–∏—à–ª–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
        elif page['page'] == 'walletAddCommon2': # –û–±—â–∏–π –¥–ª—è –≤–≤–æ–¥–∞ ID_–º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Ç–æ–∫–µ–Ω–∞
            m[0]['text'] = "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á "
            m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
    elif page['page'] == 'walletManual':
        m[0]['text'] = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'
        ###
    elif page['page'] == 'walletManual2':
        m[0]['text'] = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: '
        m[0]['text'] += '\n\n<code>–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–ø–∞ –∫ –±–æ—Ç—É.\n–î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞</code>'
        m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_walletList"}]]
    elif page['page'] == 'showInFree':
        m[0]['text'] = "–¢–µ–∫—Å—Ç"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_go"}]]
    elif page['page'] == 'xx':
        m[0]['text'] = "–¢–µ–∫—Å—Ç"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_go"}]]
        answer = await send(tg, {'text': '—Ç–µ–∫—Å—Ç'})
        memory['mes_new'].append(answer.message_id)
        page['page'] = 'yy'
        memory['dop'] = await pay_dop(tg, state, page, error)
    if error_mes and 'text' in m[0]:
        m[0]['text'] = f'{error_mes}\n\n{m[0]["text"]}'
    await memory_finish(tg, state, memory, page, m, dop=True)
    return True # —á—Ç–æ–± –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–∂–∞ –∑–∞–ø–∏—Å–∏ page

# await module.pay.pay_create(tg.from_user.id, price, option)
async def pay_create(user_id, price, option, types='pay'):
    global pay_link
    wallet_id = 0
    save = await saver()
    cur.execute("SELECT * FROM pay_wallet WHERE active = 1 LIMIT 1")
    for row in cur.fetchall():
        wallet_id = row['id']
    #if wallet_id:
    if True:
        if type(option) != str:
            option = str(option).replace("'", '"')
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cur.execute("INSERT INTO pay_payment (wallet_id, user_id, status, price, good, date_pay, types) VALUES (%s, %s, 'create', %s, %s, %s, %s)", [wallet_id, user_id, price, option, now, types])
        cur.execute("SELECT MAX(id) FROM pay_payment WHERE user_id = '{}'".format(user_id))
        pay_id = cur.fetchall()[0]['max']
        pay_url = f"https://{pay_link}/?bot={save['bot']['username']}&user={user_id}&pay={pay_id}"
        return {'link': pay_url, 'pay_id': pay_id}