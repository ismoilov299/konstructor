from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import BotBlocked
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

import time
import re
import module
import asyncio # –ø–∞—É–∑—ã await asyncio.sleep(1)
import sys
import os.path
import requests
from threading import Thread
from time import sleep

import matplotlib.pyplot as plt
import numpy as np

from loader import *
from sql import *
from function import *

async def op_install():
    save = await saver()
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã op
    cur.execute("""CREATE TABLE IF NOT EXISTS op (
                id SERIAL PRIMARY KEY,
                orders INT DEFAULT 0, 
                types TEXT NOT NULL DEFAULT '',
                op_name TEXT NOT NULL DEFAULT '', 
                op_id TEXT NOT NULL DEFAULT '',
                op_title TEXT NOT NULL DEFAULT '',
                op_link TEXT NOT NULL DEFAULT '', 
                check_sub INT DEFAULT 0, 
                count_in INT DEFAULT 0, 
                count_out INT DEFAULT 0)""")

    # ========== –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ op
    table_colomn = []
    cur.execute("SELECT * FROM information_schema.columns WHERE table_name = 'op'")
    for row in cur.fetchall():
        table_colomn.append(row['column_name'])
    if 'check_sub' not in table_colomn:
        cur.execute("ALTER TABLE op ADD COLUMN check_sub INT DEFAULT 0")
    if 'level' not in table_colomn:
        cur.execute("ALTER TABLE op ADD COLUMN level INT DEFAULT 1")
    if 'count_in' not in table_colomn:
        cur.execute("ALTER TABLE op ADD COLUMN count_in INT DEFAULT 0")
    if 'count_out' not in table_colomn:
        cur.execute("ALTER TABLE op ADD COLUMN count_out INT DEFAULT 0")

    # ========== –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ users
    table_colomn = []
    cur.execute("SELECT * FROM information_schema.columns WHERE table_name = 'users'")
    for row in cur.fetchall():
        table_colomn.append(row['column_name'])
    if 'sub_start' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN sub_start INT DEFAULT 0")
    if 'sub_now' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN sub_now INT DEFAULT 0")
    if 'op' in table_colomn: # —É–¥–∞–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –ª–∏—à–Ω—è—è
        cur.execute("ALTER TABLE users DROP COLUMN op")

    # ========== –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ info
    if 'info' in modules:
        table_colomn = []
        cur.execute("SELECT * FROM information_schema.columns WHERE table_name = 'info'")
        for row in cur.fetchall():
            table_colomn.append(row['column_name'])
        if 'count_op' not in table_colomn:
            cur.execute("ALTER TABLE info ADD COLUMN count_op INT DEFAULT 0")
        if 'count_op_not' not in table_colomn:
            cur.execute("ALTER TABLE info ADD COLUMN count_op_not INT DEFAULT 0")
            print('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è info, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã, –æ–∂–∏–¥–∞–π—Ç–µ... –∫–æ–ª–æ–Ω–∫–∞ count_op –∏ count_op_not')
            cur.execute("SELECT * FROM info")
            for row in cur.fetchall():
                cur.execute("SELECT COUNT(*) FROM users WHERE sub_start = 1 AND date_write = '{}'".format(row['date_write']))
                sub_start = cur.fetchall()[0]['count']
                cur.execute("SELECT COUNT(*) FROM users WHERE sub_start = 1 AND sub_now = 0 AND date_write = '{}'".format(row['date_write']))
                sub_now = cur.fetchall()[0]['count']
                cur.execute("UPDATE info SET count_op = '{}', count_op_not = '{}' WHERE id = '{}'".format(sub_start, sub_now, row['id']))


    if 'bot_version' in locals():
        bot_version = 0
    if module_main in ['anon', 'rating']:
        start_message_switch = 0
    else:
        start_message_switch = 1

    cur.execute("DELETE FROM setting WHERE name = 'start_message_button'")
    save = await saver('add', {'setting': {
        "op_message_startShow": start_message_switch,
        "op_message_type": "2",
        "op_message_type_dopText": "‚ûï –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø",
        "op_message_1_text": "üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
        "op_message_1_entities": "",
        "op_message_1_button": "üëç –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø",
        "op_message_2_text": "üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
        "op_message_2_entities": "",
        "op_message_2_button": "üëç –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø"
    }})

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ v4.04 –£–î–ê–õ–Ø–ï–ú —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π
    if 'op_message_text' in save["setting"]:
        cur.execute("DELETE FROM setting WHERE name = 'op_message_text'")
    if 'op_message_button' in save["setting"]:
        cur.execute("DELETE FROM setting WHERE name = 'op_message_button'")
    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ v4.21 —Ç–∞–∫ –∫–∞–∫ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –±–æ—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ id, —Ç–æ –≤—Å–µ –±–æ—Ç—ã –ë–ï–ó –¢–û–ö–ï–ù–ê, —Å—Ç–∞–Ω—É—Ç—å –ë–û–¢–´ –ë–ï–ó –ü–†–û–í–ï–†–ö–ò
    cur.execute("UPDATE op SET types = 'bot_not_check' WHERE types = 'bot' AND op_id = '' ")

######################################################

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è start_message_... —Å —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
async def load_start_message(mes, module=False, but="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è"):
    error = False
    if module:
        if os.path.exists('files'):
            if os.path.exists('files/image_start'):
                file = f'files/image_start/{module}.jpg'
                if os.path.exists(file):
                    try:
                        with open(file, 'rb') as photo:
                            answer = await bot.send_photo(355590439, photo=photo)
                        if 'message_id' in answer:
                            await bot.delete_message(chat_id=355590439, message_id=answer['message_id'])
                            start_file_id = answer['photo'][0]['file_id']
                            save = await saver('add', {"setting": {
                                "start_message_fileId": start_file_id,
                                "start_message_fileType": 'photo',
                            }})
                    except Exception as ex:
                        pass
                else:
                    save = await saver('add', {"setting": {
                        "start_message_fileId": '',
                        "start_message_fileType": '',
                    }})
                    # error = f"–ù–µ—Ç —Ñ–∞–π–ª–∞ {file}"
            else:
                error = "–ù–µ—Ç –ø–∞–ø–∫–∏ files/image_start"
        else:
            error = "–ù–µ—Ç –ø–∞–ø–∫–∏ files"
    if error:
        print(f"!!!!!!!!!!!!!! Error: {error}")
        sys.exit()
    save = await saver('add', {"setting": {
        "start_message_keyb": but,
        "start_message_text": mes,
        "start_message_entities": '',
        "start_message_fileId": '',
        "start_message_fileType": '',
        "start_message_startShow": 1,
    }})

# callback op_
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('op_'), state='*')
async def op_callback(tg: types.CallbackQuery, state: FSMContext):
    save = await saver()
    if tg.from_user.id in eval(save['setting']['ban_users']):
        return False
    await send(tg, {'callback': True})
    error = ''
    m = {0: {}}
    page = await page_split(tg.data)
    memory = await memory_start(state)
    if page['page'] == 'go':
        if not int(save['setting']['op_message_startShow']):
            await module.Zuser.module_go(tg, state)
            return False
        elif page['param'] == 'notCheck':
            await op_check_message(tg, state, 'START_FULL')
            return False
        elif await op_check_FULL(tg, state, dop='START_FULL'):
            await module.Zuser.module_go(tg, state)
            return False
    elif page['page'] == 'check':
        an_mi = ''
        try:
            await bot.delete_message(tg.from_user.id, tg.message.message_id)
            answer = await send(tg, {'text': '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–π—Ç–µ...'})
            an_mi = answer.message_id
            # print(an_mi)
        except Exception as ex:
            pass
        if int(tg.from_user.id) == 5079442067:
            print(f"param = {page['param']}")
        channels_error = await op_check_user(tg, state, level=page['param'])
        if channels_error:
            if int(tg.from_user.id) == 5079442067:
                print(f'check 1 | {page["param"]} | {channels_error}')
            await op_check_message(tg, state, channels_error, level=page['param'])
        else:
            if int(page['param']) == 1:
                channels_error = await op_check_user(tg, state, level=2)
                if int(tg.from_user.id) == 5079442067:
                    print(f'check 2 | {page["param"]} | {channels_error} ')
                if channels_error:
                    await op_check_message(tg, state, channels_error, level=2)
                else:
                    await module.Zuser.module_go(tg, state)
            else:
                if int(tg.from_user.id) == 5079442067:
                    print(f'check 3 | {page["param"]} | {channels_error} ')
                await module.Zuser.module_go(tg, state)
            page = ''
        if an_mi:
            try:
                await bot.delete_message(tg.from_user.id, an_mi)
            except Exception as ex:
                pass
    elif page['page'] == 'add':
        m[0]['text'] = "–í–µ–±–∏—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –û–ü:"
        m[0]['but'] = [
            [{'text': "üì£ –ö–∞–Ω–∞–ª", 'callback_data': "op_addChannel"}],
            [{'text': "üì£ –ö–∞–Ω–∞–ª üö´ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏", 'callback_data': "op_addChannelNot"}],
            # [{'text': "ü§ñ –ë–æ—Ç", 'callback_data': "op_addBotBotMembersRobot"}],
            [{'text': "ü§ñ –ë–æ—Ç", 'callback_data': "op_addBot"}],
            [{'text': "ü§ñ –ë–æ—Ç üö´ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏", 'callback_data': "op_addBotNot"}],
            [{'text': "üìÇ –ü–∞–ø–∫—É", 'callback_data': "op_addFolder"}],
            # [{'text': "üí¨ –ì—Ä—É–ø–ø—É", 'callback_data': "op_addGroup"}],
            # [{'text': "üí¨ –ì—Ä—É–ø–ø—É üö´ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏", 'callback_data': "op_addGroupNot"}],
            [{'text': but_back, 'callback_data': "op_menu"}],
        ]
        await memory_reset(state, 'op')
    elif page['page'] == 'delete':
        async with state.proxy() as data:
            slot_id = data['op_id']
        cur.execute("DELETE FROM op WHERE id = '{}'".format(slot_id))
        answer = await bot.send_message(chat_id=tg.from_user.id, text="‚ùé –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
        memory['mes_new'].append(answer.message_id)
        save = await saver(action='reset', param='op')
        page['page'] = 'menu'
        memory['dop'] = await op_dop(tg, state, page)
    elif page['page'] == 'up':
        cur.execute("SELECT * FROM op WHERE id = {}".format(page['param']))
        for row in cur.fetchall():
            up = dict(row)
        if up:
            cur.execute("SELECT * FROM op WHERE orders < '{}' AND level = '{}' ORDER BY orders DESC LIMIT 1".format(up['orders'], up['level']))
            for row in cur.fetchall():
                cur.execute("UPDATE op SET orders = '{}' WHERE id = '{}'".format(up['orders'], row['id']))
                cur.execute("UPDATE op SET orders = '{}' WHERE id = '{}'".format(row['orders'], up['id']))
        save = await saver(action='reset', param='op')
        page['page'] = 'menu'
        memory['dop'] = await op_dop(tg, state, page)
    elif page['page'] == 'level':
        cur.execute("SELECT * FROM op WHERE id = {}".format(page['param']))
        for row in cur.fetchall():
            level_old = dict(row)
        if level_old['level'] == 1:
            level_new = 2
        else:
            level_new = 1
        cur.execute("SELECT MAX(orders) FROM op WHERE level = '{}'".format(level_new))
        maximum = cur.fetchall()[0]['max']
        if not maximum:
            maximum = 0
        maximum = maximum + 1
        cur.execute("UPDATE op SET level = '{}', orders = '{}' WHERE id = '{}'".format(level_new, maximum, page['param']))
        save = await saver(action='reset', param='op')
        page['page'] = 'menu'
        memory['dop'] = await op_dop(tg, state, page)
    elif page['page'] == 'none':
        page['page'] = 'menu'
        memory['dop'] = await op_dop(tg, state, page)
    elif page['page'] == 'addBotNotSave':
        async with state.proxy() as data:
            if 'op_bot' in data:
                await op_saver(data['op_bot']) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ—Ç–∞
                save = await saver(action='reset', param='op')
                answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
                memory['mes_new'].append(answer.message_id)
        page['page'] = 'menu'
        memory['dop'] = await op_dop(tg, state, page)
    elif page['page'] == 'addBotSave':
        async with state.proxy() as data:
            if 'op_bot' in data:
                await op_saver(data['op_bot']) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ—Ç–∞
                save = await saver(action='reset', param='op')
                answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
                memory['mes_new'].append(answer.message_id)
        page['page'] = 'menu'
        memory['dop'] = await op_dop(tg, state, page)
    elif page['page'] == 'linkTypeEdit':
        m[0]['text'] = f"–¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö: {save['setting']['op_message_type_dopText']}"
        m[0]['text'] += "\n\n<b>–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç</b>"
        m[0]['text'] += "\n\n<i>- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—É 1, –∫–∞–∫ —Å–∏–º–≤–æ–ª –≥–¥–µ –Ω—É–∂–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ 2, 3, 4 –∏ —Ç.–¥. </i>"
        m[0]['text'] += "\n<i>- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–æ –¢–ò–ü, —á—Ç–æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–ª–æ–≤–∞  –ö–ê–ù–ê–õ, –ë–û–¢, –ì–†–£–ü–ü–ê</i>"
        m[0]['text'] += "\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–ò–ü #1\n–±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å:</i>"
        m[0]['text'] += "\n<code>–ö–ê–ù–ê–õ #1\n–ö–ê–ù–ê–õ #2\n–ë–û–¢ #3\n–ì–†–£–ü–ü–ê #4</code>"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "op_linkType"}]]
    elif page['page'] == 'mesEdit':
        async with state.proxy() as data:
            data['op_mesEdit'] = page['param']
        memory['dop'] = await op_dop(tg, state, page)
    elif page['page'] == 'butEdit':
        async with state.proxy() as data:
            data['op_butEdit'] = page['param']
        memory['dop'] = await op_dop(tg, state, page)
    elif page['page'] == 'switchOnShop':
        if save['setting']['op_message_startShow'] == '1':
            op_message_startShow = 0
        else:
            op_message_startShow = 1
        save = await saver('replace', {"setting": {"op_message_startShow": op_message_startShow}})
        page['page'] = 'set'
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'FolderDelete':
        async with state.proxy() as data:
            if 'op_id' in data:
                cur.execute("DELETE FROM op WHERE id = '{}'".format(data['op_id']))
                save = await saver(action='reset', param='op')
                answer = await bot.send_message(chat_id=tg.from_user.id, text="‚ùé –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
                memory['mes_new'].append(answer.message_id)
        page['page'] = 'menu'
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'yyy':
        m[0]['text'] = "–¢–µ–∫—Å—Ç"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "XXX_go"}]]
        answer = await send(tg, {'text': '—Ç–µ–∫—Å—Ç'})
        memory['mes_new'].append(answer.message_id)
        page['page'] = 'yy'
        memory['dop'] = await op_dop(tg, state, page, error)
    else:
        # –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≥–¥–µ –º—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –≤ –î–û–ü
        memory['dop'] = await op_dop(tg, state, page)
    await memory_finish(tg, state, memory, page, m)


# —Ç–µ–∫—Å—Ç
async def op_message(tg, state, page):
    save = await saver()
    error = ''
    m = {0: {}}
    memory = await memory_start(state)
    if page['page'] == 'addChannel' and 'text' in tg:
        text = tg.text.replace(' ', '+')
        if re.search(r'^https://t.me/\+(.|_){5,}$', text): # –∏–Ω–≤–∞–π—Ç
            cur.execute("SELECT * FROM op WHERE op_link = '{}'".format(text))
            result = cur.fetchall()
            if result:
                error = "‚ùå –î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
            else:
                async with state.proxy() as data:
                    data['op_invite'] = text
                page['page'] = 'addChannel=2'
        elif re.search(r'^@([0-9]|[a-z]|[A-Z]|_){5,}$', text) or re.search(r'^https://t.me/([0-9]|[a-z]|_){5,}$', text): # —Å—Å—ã–ª–∫–∞
            text = text.replace('https://t.me/', '@')
            result = ''
            cur.execute("SELECT * FROM op WHERE op_name = '{}'".format(text))
            for row in cur.fetchall():
                result = dict(row)
            if result:
                error = "‚ùå –î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
            else:
                result = await op_saver({'chat': text, 'type': 'channel', 'chat_invite': ''})
                if result:
                    answer = await bot.send_message(tg.from_user.id, text="‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω")
                    memory['mes_new'].append(answer.message_id)
                    page['page'] = 'menu'
                    save = await saver(action='reset', param='op')
                else:
                    error = '‚ùå –ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π –±–æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –±–æ—Ç–µ –Ω–µ –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ "–î–æ–±–∞–≤–ª–µ–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"'
        else:
            error = "‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ:\n- –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞: @channel\n- –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/channel\n- –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/+xxxxxxxxxx"
        await asyncio.sleep(1)
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'addChannel=2':
        if 'forward_from_chat' in tg: # –µ—Å–ª–∏ –∫–∏–Ω—É–ª–∏ —Ä–µ–ø–æ—Å—Ç, —Ç–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º id –∫–∞–Ω–∞–ª–∞
            if tg['forward_from_chat']['type'] == 'channel':
                text = tg['forward_from_chat']['id']
            else:
                text = ''
        else: # –µ—Å–ª–∏ –±—ã–ª –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, —Ç–æ –¥—É–º–∞–µ–º —á—Ç–æ —ç—Ç–æ id –∫–∞–Ω–∞–ª–∞
            text = tg.text
        if text:
            if re.search(r'^-[0-9]{5,}$', str(text)):
                cur.execute("SELECT * FROM op WHERE op_id = '{}'".format(text))
                check = cur.fetchall()
                if not check:
                    async with state.proxy() as data:
                        result = await op_saver({'chat': text, 'chat_invite': data['op_invite'], 'type': 'channel'})
                    if result:
                        answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω")
                        memory['mes_new'].append(answer.message_id)
                        page['page'] = 'menu'
                        await asyncio.sleep(1)
                        save = await saver(action='reset', param='op')
                    else:
                        error = f'‚ùå –ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π –±–æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –±–æ—Ç–µ –Ω–µ –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ "–î–æ–±–∞–≤–ª–µ–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤". –¢–∞–∫ –∂–µ –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–æ—Å—Ç–Ω—É—Ç—å –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç–µ (–ù–∞ –Ω—É–∂–Ω–æ–º –∫–∞–Ω–∞–ª–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ–ø–æ—Å—Ç—ã —Å –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –∏—Ö –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–ª—å–∑—è)'
                else:
                    error = f"‚ùå –î–∞–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            else:
                error = f"‚ùå –ù–µ –≤–µ—Ä–Ω–æ–µ id –∫–∞–Ω–∞–ª–∞, –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—Å—è —Å–æ –∑–Ω–∞–∫–∞ –º–∏–Ω—É—Å –∏ –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ —à–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤"
        else:
            error = f"‚ùå –†–µ–ø–æ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞"
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'reinvate' and 'text' in tg:
        async with state.proxy() as data:
            slot_id = data['op_id']
        text = tg.text.replace(' ', '+')
        if re.search(r'^https://t\.me/\+(.|_){5,}$', text):
            cur.execute("SELECT * FROM op WHERE op_link = '{}'".format(text))
            result = cur.fetchall()
            if result:
                error = "‚ùå –î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
            else:
                cur.execute("UPDATE op SET op_link = '{}' WHERE id = '{}'".format(text, slot_id))
                save = await saver()
                answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                memory['mes_new'].append(answer.message_id)
                page['page'] = 'one'
        else:
            error = "‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Å—Å—ã–ª–∫–∞, –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—Å—è —Å https://t.me/+"
        save = await saver(action='reset', param='op')
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'addChannelNot' and 'text' in tg:
        text = tg.text.replace(' ', '+')
        if re.search(r'^https://t.me/\+(.|_){5,}$', text):
            cur.execute("SELECT * FROM op WHERE op_link = '{}'".format(text))
            result = cur.fetchall()
            if result:
                error = "‚ùå –î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
            else:
                async with state.proxy() as data:
                    data['op_invite'] = text
                page['page'] = 'addChannelNot=2'
        else:
            error = "‚ùå –ù–µ –≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—Å—è —Å https://t.me/+\n\n–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É"
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'addChannelNot=2':
        if 'forward_from_chat' in tg:
            if tg['forward_from_chat']['type'] == 'channel':
                text = tg['forward_from_chat']['id']
                if text:
                    cur.execute("SELECT * FROM op WHERE op_id = '{}'".format(text))
                    check = cur.fetchall()
                    if not check:
                        async with state.proxy() as data:
                            if 'op_invite' not in data:
                                data['op_invite'] = ''
                            await op_saver({'chat': text, 'chat_invite': data['op_invite'], 'type': 'channel_not_check', 'channel_info': tg['forward_from_chat']})
                        answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω")
                        memory['mes_new'].append(answer.message_id)
                        page['page'] = 'menu'
                        await asyncio.sleep(1)
                        save = await saver(action='reset', param='op')
                    else:
                        error = "‚ùå –î–∞–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                else:
                    error = "‚ùå –û—à–∏–±–∫–∞ ID –∫–∞–Ω–∞–ª–∞"
            else:
                error = "‚ùå –†–µ–ø–æ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞"
        else:
            error = "‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–ø–æ—Å—Ç"
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'addBot' and 'text' in tg:
        text = tg.text
        if re.search(r'^[0-9]+:[0-9|a-z|A-Z|_|-]+$', text): # 6951655418:AAHwr9f1y41l226hi1yUrhYJfo_WdOE8Img
            try:
                link = f'https://api.telegram.org/bot{text}/getMe'
                res = requests.post(link)
                res = res.json()
            except Exception as ex:
                pass
            if res['ok']:
                slot = False
                cur.execute("SELECT * FROM op WHERE op_name = '{}'".format(res['result']['username']))
                for row in cur.fetchall():
                    slot = dict(row)
                if not slot:
                    async with state.proxy() as data:
                        data['op_bot'] = {'type': 'bot', 'token': text, 'username': res['result']['username'], 'title': res['result']['first_name'], 'link': f"https://t.me/{res['result']['username']}"}
                        page['page'] = 'addBot2'
                else:
                    error = "‚ùå –î–∞–Ω–Ω—ã–π –±–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –û–ü"
            else:
                error = "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π"
        else:
            error = "‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'addBot2' and 'text' in tg:
        text = tg.text
        async with state.proxy() as data:
            if 'op_bot' in data:
                print(f'text = {text}')
                link = f"https://t.me/{data['op_bot']['username']}?"
                print(f'link = {link}')
                if re.search(rf"^{link}", text):
                    print(f'1111')
                    answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
                    memory['mes_new'].append(answer.message_id)
                    data['op_bot']['link'] = text
                    await op_saver(data['op_bot']) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ—Ç–∞
                    data.pop('op_bot')
                    page['page'] = 'menu'
                    save = await saver(action='reset', param='op')
                else:
                    print(f'2222')
                    error = f"‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å:\n{link}..."
            else:
                page['page'] = 'menu'
            memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'addBot=BotMembersRobot' and 'text' in tg:
        text = tg.text
        if re.search(r'^[0-9|a-z|-]{30,40}$', text): # 123a12aa-1234-1a23-1a23-baab123b1ba1
            res = await checkBot_BotMembersRobot(tg.from_user.id, text)
            if res == 'ok':
                page['page'] = 'addBot2'
            else:
                error = "‚ùå –û—à–∏–±–∫–∞"
        else:
            error = "‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'addBotNot' and 'text' in tg:
        text = tg.text.replace(' ', '+')
        if re.search(r'^@([0-9]|[a-z]|_){3,}bot$', text.lower()) or re.search(r'^https://t.me/([0-9]|[a-z]|_){3,}bot(\?start=(.)*)?$',text.lower()):  # —Å—Å—ã–ª–∫–∞
            bot_link = text.replace('@', 'https://t.me/') if '@' in text else text
            bot_name = text.replace('https://t.me/', '').replace('@', '').split('?')[0]
            if bot_name != save['bot']['username']:
                slot = ''
                cur.execute("SELECT * FROM op WHERE op_name = '{}'".format(bot_name))
                for row in cur.fetchall():
                    slot = dict(row)
                if not slot:
                    async with state.proxy() as data:
                        data['op_bot'] = {'type': 'bot_not_check', 'username': bot_name, 'link': bot_link, 'title': bot_name}
                        if save["setting"]['op_message_type'] == '2':
                            page['page'] = 'addBotNot=2'
                        else:
                            await op_saver(data['op_bot']) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ—Ç–∞
                            answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
                            memory['mes_new'].append(answer.message_id)
                            page['page'] = 'menu'
                else:
                    error = "‚ùå –î–∞–Ω–Ω—ã–π –±–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            else:
                error = "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≤ –û–ü —ç—Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –±–æ—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å—Ç–∞–≤–∏—Ç–µ –û–ü"
        else:
            error = "‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç –Ω–µ –≤–µ—Ä–Ω–∞"
        save = await saver(action='reset', param='op')
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'addBotNot=2' and 'text' in tg:
        async with state.proxy() as data:
            if 'op_bot' in data:
                data['op_bot']['title'] = tg.text[:40]
                await op_saver(data['op_bot']) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ—Ç–∞
                save = await saver(action='reset', param='op')
                answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
                memory['mes_new'].append(answer.message_id)
        page['page'] = 'menu'
        memory['dop'] = await op_dop(tg, state, page)
    elif page['page'] == 'addFolder' and 'text' in tg:
        text = tg.text
        # https://t.me/addlist/SCpMwYZIiTs3MGUy
        if re.search(r"^https://t.me/addlist/([0-9]|[a-z]|[A-Z]|_|-|=){10,25}$", text):
            cur.execute("SELECT COUNT(*) FROM op WHERE op_link = '{}' LIMIT 1".format(text))
            if not cur.fetchall()[0]['count']:
                folder_id = await op_saver({'type': 'folder', 'folder_link': text}) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ—Ç–∞
                async with state.proxy() as data:
                    data['op_id'] = folder_id
                page['page'] = 'FolderList'
                save = await saver(action='reset', param='op')
            else:
                error = "‚ùå –î–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else:
            error = "‚ùå –ù–µ –≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: https://t.me/addlist/xxxxxxxxxx"
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'FolderAddChannel':
        async with state.proxy() as data:
            if 'op_id' in data:
                folder_id = data['op_id']
                if 'forward_from_chat' in tg: # –µ—Å–ª–∏ –∫–∏–Ω—É–ª–∏ —Ä–µ–ø–æ—Å—Ç, —Ç–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º id –∫–∞–Ω–∞–ª–∞
                    if tg['forward_from_chat']['type'] == 'channel':
                        text = tg['forward_from_chat']['id']
                    else:
                        text = ''
                else: # –µ—Å–ª–∏ –±—ã–ª –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, —Ç–æ –¥—É–º–∞–µ–º —á—Ç–æ —ç—Ç–æ id –∫–∞–Ω–∞–ª–∞
                    text = tg.text
                if text:
                    if re.search(r'^-[0-9]{5,}$', str(text)):
                        cur.execute("SELECT * FROM op WHERE id = '{}'".format(folder_id))
                        for row in cur.fetchall():
                            folder_load = row['op_id']
                        op_check = False
                        if not folder_load or folder_load == '{}':
                            op_check = True
                        elif text not in eval(folder_load):
                            op_check = True
                        if op_check:
                            result = await op_saver({'type': 'folder_add', 'folder_id': data['op_id'], 'channel_id': text})
                            if result:
                                answer = await bot.send_message(chat_id=tg.from_user.id, text="‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω")
                                memory['mes_new'].append(answer.message_id)
                                page['page'] = 'FolderList'
                                await asyncio.sleep(1)
                                save = await saver(action='reset', param='op')
                            else:
                                error = f'‚ùå –ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π –±–æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –±–æ—Ç–µ –Ω–µ –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ "–î–æ–±–∞–≤–ª–µ–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤". –¢–∞–∫ –∂–µ –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–æ—Å—Ç–Ω—É—Ç—å –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç–µ (–ù–∞ –Ω—É–∂–Ω–æ–º –∫–∞–Ω–∞–ª–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ–ø–æ—Å—Ç—ã —Å –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –∏—Ö –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–ª—å–∑—è)'
                        else:
                            error = f"‚ùå –î–∞–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
                    else:
                        error = f"‚ùå –ù–µ –≤–µ—Ä–Ω–æ–µ id –∫–∞–Ω–∞–ª–∞, –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—Å—è —Å–æ –∑–Ω–∞–∫–∞ –º–∏–Ω—É—Å –∏ –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ —à–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤"
                else:
                    error = f"‚ùå –†–µ–ø–æ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞"
            else:
                page['page'] = 'menu'
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'FolderList' and 'text' in tg:
        if re.search(r'^/delete_[1-9][0-9]*$', tg.text):
            num = int(tg.text.replace('/delete_', ''))
            async with state.proxy() as data:
                if 'op_id' in data:
                    folder_id = data['op_id']
                    cur.execute("SELECT * FROM op WHERE id = '{}' LIMIT 1".format(folder_id))
                    for row in cur.fetchall():
                        folder_load = eval(row['op_id'])
                        i = 0
                        for k, v in folder_load.items():
                            i += 1
                            if i == num:
                                channel_delete = k
                        folder_load.pop(channel_delete)
                        folder_load = str(folder_load).replace("'", '"')
                        cur.execute("UPDATE op SET op_id = '{}' WHERE id = '{}'".format(folder_load, folder_id))
                        save = await saver(action='reset', param='op')
                        answer = await bot.send_message(chat_id=tg.from_user.id, text="‚ùé –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
                        memory['mes_new'].append(answer.message_id)
                        page['page'] = 'FolderList'
                        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'linkTypeEdit' and 'text' in tg:
        text = tg.text.replace("\n", '').replace("<", '').replace('>', '')
        text = text[:40]
        answer = await bot.send_message(chat_id=tg.from_user.id, text=f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ:\n{text}")
        memory['mes_new'].append(answer.message_id)
        save = await saver('replace', {"setting": {"op_message_type_dopText": text}})
        page['page'] = 'linkType'
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'mesEdit':
        if re.search(r'[^@|<|>]', tg.text):
            async with state.proxy() as data:
                i = data['op_mesEdit']
            entities = str(tg.entities)
            entities = entities.replace("<MessageEntity ", '').replace(">", '')
            save = await saver('replace', {"setting": {f"op_message_{i}_text": tg.text, f'op_message_{i}_entities':entities}})
        else:
            mes = "‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã < –∏ >, —Ç–∞–∫ –∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å —Å–∏–º–≤–æ–ª–∞ @"
            answer = await bot.send_message(chat_id=tg.from_user.id, text=mes)
            memory['mes_new'].append(answer.message_id)
        memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'butEdit':
        async with state.proxy() as data:
            i = data['op_butEdit']
        text = tg.text[:40]
        save = await saver('replace', {"setting": {f'op_message_{i}_button': text}})
        memory['dop'] = await op_dop(tg, state, page, error)
    else:
        memory['stop'] = True
        memory['dop'] = await op_dop(tg, state, page, error)
    await memory_finish(tg, state, memory, page, m)


async def op_dop(tg, state, page, error_mes=''):
    save = await saver()
    if tg.from_user.id in eval(save['setting']['ban_users']):
        return False
    level_ico = {1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£'}
    error = ''
    m = {0: {}}
    memory = {'mes_new': [], 'mes_old': [], 'dop': [], 'page_new': [], 'stop': [], 'page': []}
    if page['page'] == 'menu' and tg.from_user.id in save['admins']:
        mes = {}
        mes['photo'] = 'files/loading_graph.jpg'
        mes['text'] = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:"
        mes_load = '\n\n‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...'
        answer = await send(tg.from_user.id, {'text': f"{mes['text']}{mes_load}", 'photo': mes['photo']})
        mes['message_id'] = answer.message_id
        memory['mes_new'].append(answer.message_id)
        kb = []
        if len(save['op']):
            # mes['photo'] = 'files/loading_graph.jpg'
            mes['text'] += "\n\n–ù–∞–∑–≤–∞–Ω–∏–µ | –£—Ä–æ–≤–µ–Ω—å | –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å"
            i = 0
            level_2 = False
            for key, row in save['op'].items():
                if not level_2 and int(str(row['level'])[0]) == 2:
                    level_2 = True
                    i = 0
                if row['types'] == 'channel':
                    smile = "üì£"
                elif row['types'] == 'channel_not_check':
                    smile = "üö´ üì£"
                elif row['types'] == 'bot_not_check':
                    smile = "üö´ ü§ñ"
                elif row['types'] == 'bot':
                    smile = "ü§ñ"
                elif row['types'] == 'group':
                    smile = "üí¨"
                elif row['types'] == 'group_not_check':
                    smile = "üö´ üí¨"
                elif row['types'] == 'folder':
                    if not row['op_id'] or row['op_id'] == '{}':
                        smile = "üö´ üìÇ –ü–∞–ø–∫–∞"
                    else:
                        smile = "üìÇ –ü–∞–ø–∫–∞"
                else:
                    smile = "üò± "
                if i:
                    but_up = {'text': "‚¨ÜÔ∏è", 'callback_data': f"op_up_{row['id']}"}

                else:
                    but_up = {'text': "‚ûñÔ∏è", 'callback_data': "op_none"}
                # print(f"LEVEL = {row}")
                kb.append([
                    {'text': f"{smile} {row['op_title']}", 'callback_data': f"op_one_{row['id']}"},
                    {'text': level_ico[row['level']], 'callback_data': f"op_level_{row['id']}"},
                    but_up
                ])
                i += 1
        else:
            mes['text'] += "\n\nüö´ –°–ª–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        kb.append([
            {'text': "‚ûï –î–æ–±–∞–≤–∏—Ç—å", 'callback_data': "op_add"},
            {'text': "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 'callback_data': "op_set"}
        ])
        # op_subNow
        kb.append([{'text': but_back, 'callback_data': "start"}])
        mes['but'] = kb

        ###### –≥—Ä–∞—Ñ–∏–∫

        # –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ—É
        x = []
        y1 = []
        y2 = []
        y3 = []
        pay_sum_max = 2
        for i in range(0, 20):
            info_row = {'count_unic': 0, 'count_op': 0, 'count_op_not': 0}
            date = datetime.date.today() if i == 0 else datetime.datetime.now() - datetime.timedelta(days=i)
            # x
            x_date = date.strftime("%d %m")
            x_date = x_date[1:] if int(x_date[:1]) == 0 else x_date
            x.append(x_date)
            # y1 y2 y3 y4
            date_full = date.strftime("%Y-%m-%d")
            cur.execute("SELECT * FROM info WHERE date_write = '{}' LIMIT 1".format(date_full))
            for row in cur.fetchall():
                info_row = dict(row)
            y1.append(info_row['count_unic'])
            y2.append(info_row['count_op'])
            y3.append(info_row['count_op_not'])
            if pay_sum_max < info_row['count_unic']:
                pay_sum_max = info_row['count_unic']
        pay_sum_max = pay_sum_max + 1 if pay_sum_max <= 10 else pay_sum_max + round(pay_sum_max / 10)
        x.reverse()
        y1.reverse()
        y2.reverse()
        y3.reverse()

        # —Å–æ–∑–¥–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –ø–∞–ø–∫—É
        info_folder = 'files/graph'
        image = f'{info_folder}/op.jpg'
        if not os.path.exists(info_folder):
            os.mkdir(info_folder)
        elif os.path.exists(image):
            os.remove(image)
        ######## –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫


        x_len = np.arange(len(x))  # the label locations
        width = 0.7  # —à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å–æ–∫ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö
        shift_width = width/ 2

        fig, ax = plt.subplots(layout='constrained', figsize=(8, 5))
        # plt.figure()


        rects = ax.bar(x_len, y1, width, label='–£–Ω–∏–∫–∏–ª—å–Ω—ã–µ —é–∑–µ—Ä—ã', color='#AAAAAB')
        ax.bar_label(rects, padding=3, color='#AAAAAB')
        rects = ax.bar(x_len, y2, width, label='–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –û–ü', color='#3A77D4')
        ax.bar_label(rects, padding=3, color='#3A77D4')
        rects = ax.bar(x_len, y3, width, label='–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –û–ü', color='#3A0905')
        ax.bar_label(rects, padding=3, color='#3A0905')


        ax.set_xticks(x_len + width - 0.8, x, rotation=66)
        ax.set_ylim(0, pay_sum_max)

        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_visible(False)
        ax.spines['bottom'].set_color('#DDDDDD')
        ax.tick_params(bottom=True, left=False, grid_color='#DDDDDD')
        ax.set_axisbelow(True)
        ax.yaxis.grid(True, color='#EEEEEE')
        ax.xaxis.grid(False)
        ax.set_title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        ax.legend(loc='upper left', ncols=1)

        plt.savefig(image)
        mes['photo'] = image
        m[0] = mes
        # await send(tg, {'photo': image, 'text': mes_info_1, 'message_id': message_id, 'but': but})

        # answer = await send(tg.from_user.id, mes)
        # memory['mes_new'].append(answer.message_id)
        # if len(save['op']):
        #     op_gr = threading.Thread(target=op_graph, args=(answer, mes))
        #     op_gr.start()
        await memory_reset(state, 'op')
    elif page['page'] == 'subNow':
        if page['param']:
            cur.execute("SELECT * FROM op WHERE id = '{}'".format(page['param']))
            for row in cur.fetchall():
                if row['check_sub']:
                    rerow = 0
                else:
                    rerow = 1
            cur.execute("UPDATE op SET check_sub = '{}' WHERE id = '{}'".format(rerow, page['param']))
            save = await saver('reset', 'op')
        m[0]['but'] = []
        if len(save['op']):
            m[0]['text'] = '‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —é–∑–µ—Ä–æ–≤ –Ω–∞ –∏—Ö –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –Ω–∏—Ö, –∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ø–∏—à—É—Ç—Å—è, —Ç–æ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É "–ø–æ–¥–ø–∏—Å–∞–Ω—ã –¥–æ —Å–∏—Ö –ø–æ—Ä"'
            m[0]['text'] += '\n\nüü¢ –ø—Ä–æ–≤–µ—Ä—è–µ–º\n‚ö´Ô∏è –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º'
            for key, row in save['op'].items():
                if row['types'] == 'channel':
                    smile = "üì£"
                elif row['types'] == 'group':
                    smile = "üí¨"
                if row['check_sub']:
                    check_sub = "üü¢"
                else:
                    check_sub = "‚ö´Ô∏è"
                if row['types'] in ['channel', 'group']:
                    m[0]['but'].append([{'text': f"{check_sub} {smile} {row['op_title']}", 'callback_data': f"op_subNow_{row['id']}"}])
        else:
            m[0]['text'] = "üö´ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        m[0]['but'].append([{'text': but_back, 'callback_data': "op_set"}])
    elif page['page'] == 'one':
        slot_id = ''
        if 'param' in page:
            if page['param']:
                slot_id = page['param']
        if not slot_id:
            async with state.proxy() as data:
                slot_id = data['op_id']
        if slot_id:
            slot = {}
            cur.execute("SELECT * FROM op WHERE id = '{}'".format(slot_id))
            for row in cur.fetchall():
                slot = dict(row)
            if slot:
                async with state.proxy() as data:
                    data['op_id'] = slot['id']
                if slot['types'] == 'folder':
                    page['page'] = 'FolderList'
                    memory['dop'] = await op_dop(tg, state, page)
                else:
                    m[0]['text'] = ''
                    kb = []
                    kb.append([{'text': "‚ùå –£–î–ê–õ–ò–¢–¨", 'callback_data': "op_delete"}])
                    if slot['types'] in ['bot', 'bot_not_check']:
                        m[0]['text'] += "ü§ñ –ë–æ—Ç\n"
                        if slot['op_title']:
                            m[0]['text'] += f"\n–ù–∞–∑–≤–∞–Ω–∏–µ: {slot['op_title']}"
                        m[0]['text'] += f"\n–°—Å—ã–ª–∫–∞: {slot['op_link']}"
                        m[0]['text'] += f"\n–¢–æ–∫–µ–Ω: {await hide_string(slot['op_id'])}"
                    else:
                        if slot['types'] in ['group', 'group_not_check']:
                            m[0]['text'] += "üí¨ –ì—Ä—É–ø–ø–∞\n"
                        elif slot['types'] in ['channel', 'channel_not_check']:
                            m[0]['text'] += "üì£ –ö–∞–Ω–∞–ª\n"
                        m[0]['text'] += f"\n–ù–∞–∑–≤–∞–Ω–∏–µ: {slot['op_title']}"
                        if slot['types'] in ['channel', 'channel_not_check'] and slot['op_id']:
                            m[0]['text'] += f"\nID: {slot['op_id']}"
                        if slot['op_name']:
                            m[0]['text'] += f"\n–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞: {slot['op_name']}"
                        m[0]['text'] += f"\nC—Å—ã–ª–∫–∞ –≤ –û–ü: {slot['op_link']}"
                        if '/+' in slot['op_link']:
                            kb.append([{'text': "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", 'callback_data': "op_reinvate"}])
                        if slot['types'] in ['channel']:
                            m[0]['text'] += f"\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
                            m[0]['text'] += f"\n‚ûï –ü–æ–¥–ø–∏—Å–∞–ª–æ—Å—å: {slot['count_in']}"
                            m[0]['text'] += f"\n‚ûñ –û—Ç–ø–∏—Å–∞–ª–æ—Å—å: {slot['count_out']}"
                            m[0]['text'] += f"\n‚úîÔ∏è –û—Å—Ç–∞–ª–æ—Å—å: {slot['count_in'] - slot['count_out']}"
                        print(slot['types'])
                    kb.append([{'text': but_back, 'callback_data': "op_menu"}])
                    m[0]['but'] = kb
            else:
                page['page'] = 'menu'
                memory['dop'] = await op_dop(tg, state, page)
        else:
            page['page'] = 'menu'
            memory['dop'] = await op_dop(tg, state, page)
    elif page['page'] == 'addFolder':
        m[0]['text'] = '–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É:\n\n<i>–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: https://t.me/addlist/xxxxxxxxxx</i>'
        m[0]['but'] = [[{'text': but_back, 'callback_data': 'op_add'}]]
    elif page['page'] == 'FolderList':
        async with state.proxy() as data:
            if 'op_id' in data:
                folder_id = data['op_id']
                cur.execute("SELECT * FROM op WHERE id = '{}' LIMIT 1".format(folder_id))
                for row in cur.fetchall():
                    folder_info = dict(row)
                if folder_info:
                    m[0]['text'] = f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ <a href='{folder_info['op_link']}'>–ø–∞–ø–∫–µ</a>:"
                    if not folder_info['op_id'] or folder_info['op_id'] == '{}':
                        m[0]['text'] += '\n\nüö´ –ù–µ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –±–µ–∑ –Ω–∏—Ö –ø–∞–ø–∫–∞ –±—É–¥–µ—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏'
                    else:
                        i = 0
                        for k, v in eval(folder_info['op_id']).items():
                            i += 1
                            m[0]['text'] += f'\n\nüì£ {v} /delete_{i}'
                    m[0]['but'] = [
                        [{'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', 'callback_data': 'op_FolderAddChannel'}],
                        [{'text': '‚ùå –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É', 'callback_data': 'op_FolderDelete'}],
                        [{'text': but_back, 'callback_data': 'op_menu'}]
                    ]
                else:
                    page['page'] = 'menu'
                    memory['dop'] = await op_dop(tg, state, page, error)
            else:
                page['page'] = 'menu'
                memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'FolderAddChannel':
        m[0]['text'] = '1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª, —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º "–¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"\n\n2Ô∏è‚É£ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞\n\n‚ùî –ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ id –∫–∞–Ω–∞–ª–∞ (—É–∑–Ω–∞—Ç—å id –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç–µ —Ç—É—Ç: @username_to_id_bot –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–º—É –∏–Ω–≤–∞–π—Ç)'
        m[0]['but'] = [[{'text': but_back, 'callback_data': 'op_FolderList'}]]
    elif page['page'] == 'addChannelNot':
        m[0]['text'] = "–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –±–µ–∑ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –Ω–∞–∂–º–∏—Ç–µ –ë–ï–ó –°–°–´–õ–û–ö"
        m[0]['but'] = [
            [{'text': "–ë–ï–ó –°–°–´–õ–û–ö", 'callback_data': 'op_addChannelNot=2'}],
            [{'text': but_back, 'callback_data': 'op_add'}]
        ]
    elif page['page'] == 'addChannelNot=2':
        m[0]['text'] = "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞"
        m[0]['but'] = [[{'text': but_back, 'callback_data': 'op_add'}]]
    elif page['page'] == 'addChannel':
        m[0]['text'] = '1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª, —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º "–¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"\n\n2Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ (@name) –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:'
        m[0]['but'] = [[{'text': but_back, 'callback_data': 'op_add'}]]
    elif page['page'] == 'addChannel=2':
        m[0]['text'] = f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞\n\n‚ùî –ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ id –∫–∞–Ω–∞–ª–∞ (—É–∑–Ω–∞—Ç—å id –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç–µ —Ç—É—Ç: @username_to_id_bot –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–º—É –∏–Ω–≤–∞–π—Ç)"
        m[0]['but'] = [[{'text': but_back, 'callback_data': 'op_add'}]]
    elif page['page'] == 'addBot':
        m[0]['text'] = "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –±–æ—Ç–∞"
        m[0]['but'] = [[{'text': but_back, 'callback_data': 'op_add'}]]
    elif page['page'] == 'addBot2':
        async with state.proxy() as data:
            if 'op_bot' in data:
                m[0]['text'] = "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∏ –ø–æ —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –ø—Ä–∏—à–ª–∏—Ç–µ –µ–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü–†–û–ü–£–°–¢–ò–¢–¨"
                m[0]['text'] += f" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É: \nhttps://t.me/{data['op_bot']['username']}"
                m[0]['but'] = [
                    [{'text': "–ü–†–û–ü–£–°–¢–ò–¢–¨", 'callback_data': 'op_addBotSave'}],
                    [{'text': but_back, 'callback_data': 'op_add'}]
                ]
            else:
                page['page'] = 'menu'
                memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'addBot=BotMembersRobot':
        m[0]['text'] = "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–æ—Ç–æ–≤ –º–µ–∂–¥—É –¥—Ä—É–≥ –¥—Ä—É–≥–æ–º –ø–æ —Å—Ä–µ–¥—Å—Ç–≤—É —Å–µ—Ä–≤–∏—Å–∞: @BotMembersRobot"
        m[0]['text'] += "\n\n1Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å"
        m[0]['text'] += "\n\n2Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –±–æ—Ç–∞ –≤ –û–ü –≤ —Å–µ—Ä–≤–∏—Å–µ @BotMembersRobot"
        m[0]['text'] += "\n\n<i>‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n–ê–¥–º–∏–Ω –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –û–ü –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –±–æ—Ç –≤ @BotMembersRobot"
        m[0]['text'] += " –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–∞–º —Ç–æ–∫–µ–Ω –≤–∞–º, –∞ –≤—ã –¥–æ–ª–∂–Ω—ã –µ–≥–æ –≤–≤–µ—Å—Ç–∏ —Å–µ–π—á–∞—Å —Å—é–¥–∞. –ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞: 123a12aa-1234-1a23-1a23-baab123b1ba1"
        m[0]['text'] += "\n\n‚ùóÔ∏è –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç –ø–æ–ª—É—á–µ–Ω –Ω–µ –≤–∞–º–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –±–æ—Ç, –∞ –Ω–∞ —Ç–æ—Ç —á—Ç–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –û–ü –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"
        m[0]['text'] += "\n\n–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–æ–∫–µ–Ω: 123a12aa-1234-1a23-1a23-baab123b1ba1</i>"
        m[0]['but'] = [[{'text': but_back, 'callback_data': 'op_add'}]]
    elif page['page'] == 'addBotNot':
        m[0]['text'] = "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –±–æ—Ç–∞\n\n‚ùî –†–∞–∑—Ä–µ—à–µ–Ω—ã —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞: \n@name_bot \nhttps://t.me/name_bot \nhttps://t.me/name_bot?start=xxx"
        m[0]['but'] = [[{'text': but_back, 'callback_data': 'op_add'}]]
    elif page['page'] == 'addBotNot=2':
        async with state.proxy() as data:
            if 'op_bot' in data:
                m[0]['text'] = f'‚úîÔ∏è {data["op_bot"]["link"]}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ —É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ '
                m[0]['text'] += f'–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–†–û–ü–£–°–¢–ò–¢–¨", —á—Ç–æ–± –Ω–∞ –∫–Ω–æ–ø–∫–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç - @{data["op_bot"]["username"]} '
                m[0]['but'] = [
                    [{'text': "–ü–†–û–ü–£–°–¢–ò–¢–¨", 'callback_data': 'op_addBotNotSave'}],
                    [{'text': but_back, 'callback_data': 'op_add'}]
                ]
            else:
                page['page'] = 'menu'
                memory['dop'] = await op_dop(tg, state, page, error)
    elif page['page'] == 'reinvate':
        m[0]['text'] = "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
        m[0]['but'] = [[{'text': but_back, 'callback_data': 'op_one'}]]
    elif page['page'] == 'linkType':
        if page['param']:
            save = await saver('replace', {"setting": {"op_message_type": page['param']}})
        if save['setting']['op_message_type'] == '1':
            smile = ["üü¢", "‚ö´Ô∏è", "‚ö´Ô∏è", "‚ö´Ô∏è"]
        elif save['setting']['op_message_type'] == '2':
            smile = ["‚ö´Ô∏è", "üü¢", "‚ö´Ô∏è", "‚ö´Ô∏è"]
        elif save['setting']['op_message_type'] == '3':
            smile = ["‚ö´Ô∏è", "‚ö´Ô∏è", "üü¢", "‚ö´Ô∏è"]
        elif save['setting']['op_message_type'] == '4':
            smile = ["‚ö´Ô∏è", "‚ö´Ô∏è", "‚ö´Ô∏è", "üü¢"]
        m[0]['text'] = "–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Å—ã–ª–æ–∫, –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ (–ø—Ä–∏–º–µ—Ä, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤—ã—à–µ):"
        op_message_type_dopText = save['setting']['op_message_type_dopText']
        if len(op_message_type_dopText) > 15:
            op_message_type_dopText = f"{op_message_type_dopText[:15]}..."
        m[0]['but'] = [
            [{'text': f"{smile[0]} –í —Å–ø–∏—Å–∫–µ —Ç–µ–∫—Å—Ç–æ–º - —Å—Å—ã–ª–∫–∞–º–∏", 'callback_data': "op_linkType_1"}],
            [{'text': f"{smile[3]} –í —Å–ø–∏—Å–∫–µ —Ç–µ–∫—Å—Ç–æ–º - –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏", 'callback_data': "op_linkType_4"}],
            [{'text': f"{smile[1]} –ö–Ω–æ–ø–∫–∞–º–∏ c –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏", 'callback_data': "op_linkType_2"}],
            [
                {'text': f"{smile[2]} –ö–Ω–æ–ø–∫–∞–º–∏ —Å–æ —Å–≤–æ–∏–º —Ç–µ–∫—Å—Ç–æ–º", 'callback_data': "op_linkType_3"},
                {'text': f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç", 'callback_data': "op_linkTypeEdit"}
            ],
            [{'text': but_back, 'callback_data': "op_set"}]
        ]
    elif page['page'] == 'mesEdit':
        async with state.proxy() as data:
            i = data['op_mesEdit']
        m[0]['text'] = save['setting'][f'op_message_{i}_text']
        m[0]['ent'] = save['setting'][f'op_message_{i}_entities']
        m[1] = {}
        m[1]['text'] = f"‚¨ÜÔ∏è –°–û–û–ë–©–ï–ù–ò–ï {i}-–≥–æ –û–ü ‚¨ÜÔ∏è"
        m[1]['text'] += "\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–± –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä–æ–µ"
        m[1]['but'] = [[{'text': but_back, 'callback_data': "op_set"}]]
    elif page['page'] == 'butEdit':
        async with state.proxy() as data:
            i = data['op_butEdit']
        m[0]['text'] = save['setting'][f'op_message_{i}_button']
        m[1] = {}
        m[1]['text'] = f"‚¨ÜÔ∏è –ö–Ω–æ–ø–∫–∞ {i}-–≥–æ –û–ü ‚¨ÜÔ∏è"
        m[1]['text'] += "\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–± –∑–∞–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É"
        m[1]['but'] = [[{'text': but_back, 'callback_data': "op_set"}]]
    elif page['page'] == 'set':
        m[0]['text'] = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:"
        m[0]['but'] = []
        if save['setting']['op_message_startShow'] == '1':
            smile = "üü¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç–∞—Ä—Ç–µ"
        else:
            smile = "‚ö´Ô∏è –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç–∞—Ä—Ç–µ"
        m[0]['but'].append([{'text': smile, 'callback_data': "op_switchOnShop"}])
        if len(save['op']):
            m[0]['but'].append([{'text': "üìâ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª—ã –Ω–∞ –æ—Ç–ø–∏—Å–∫—É", 'callback_data': "op_subNow"}])
        m[0]['but'].append([{'text': "‚úèÔ∏è 1 –û–ü: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 'callback_data': "op_mesEdit_1"}])
        m[0]['but'].append([{'text': "‚úèÔ∏è 1 –û–ü: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É", 'callback_data': "op_butEdit_1"}])
        m[0]['but'].append([{'text': "‚úèÔ∏è 2 –û–ü: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 'callback_data': "op_mesEdit_2"}])
        m[0]['but'].append([{'text': "‚úèÔ∏è 2 –û–ü: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É", 'callback_data': "op_butEdit_2"}])
        m[0]['but'].append([{'text': "üìÉ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", 'callback_data': "op_linkType"}])
        m[0]['but'].append([{'text': but_back, 'callback_data': "op_menu"}])
    if error_mes and 'text' in m[0]:
        m[0]['text'] = f'{error_mes}\n\n{m[0]["text"]}'
    await memory_finish(tg, state, memory, page, m, dop=True)
    return True # —á—Ç–æ–± –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–∂–∞ –∑–∞–ø–∏—Å–∏ page


# —Å–æ—Ö—Ä—è–Ω–µ–º –≤ –ë–î –∫–∞–Ω–∞–ª –∏–ª–∏ –±–æ—Ç –≤ —Å–ø–∏—Å–∫–µ –û–ü
async def op_saver(info): # info = {'type': 'channel', 'chat': '-111111111', 'chat_invite': 'link', 'bot_title' = '@username_bot'}
    save = await saver()
    print(info)
    cur.execute("SELECT MAX(orders) FROM op WHERE level = 1")
    max_orders = cur.fetchall()[0]['max']
    max_orders = max_orders + 1 if max_orders else 1
    if info['type'] == 'channel':
        chat_info = await load_info_chat(info['chat'], chat_invite='', rules=['can_invite_users'])
        if chat_info:
            chat_info["title"] = chat_info["title"].replace('"', '').replace("'", '')
            channel_name = ''
            chat_link = ''
            if 'username' in chat_info:
                channel_name = f'@{chat_info["username"]}'
            if 'chat_invite' in info:
                if info['chat_invite']:
                    chat_link = info['chat_invite']
            if not chat_link:
                chat_link = f'https://t.me/{chat_info["username"]}'
            cur.execute("INSERT INTO op (op_id, op_name, op_title, op_link, types, orders) VALUES (%s, %s, %s, %s, %s, %s)", (chat_info["id"], channel_name, chat_info["title"], chat_link, info['type'], max_orders))
            return True # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ
    elif info['type'] == 'channel_not_check':
        chat_info = info['channel_info']
        channel_name = ''
        chat_link = ''
        if 'username' in chat_info:
            channel_name = f'@{chat_info["username"]}'
        if 'chat_invite' in info:
            if info['chat_invite']:
                chat_link = info['chat_invite']
        if not chat_link:
            chat_link = f'https://t.me/{chat_info["username"]}'
        cur.execute("INSERT INTO op (op_id, op_name, op_title, op_link, types, orders) VALUES (%s, %s, %s, %s, %s, %s)",(chat_info["id"], channel_name, chat_info["title"], chat_link, info['type'], max_orders))
    elif info['type'] in ['bot', 'bot_not_check']:
        if 'token' not in info:
            info['token'] = ''
        cur.execute("INSERT INTO op (op_id, types, op_name, op_title, op_link, orders) VALUES (%s, %s, %s, %s, %s, %s)", (info['token'], info['type'], info['username'], info['title'], info['link'], max_orders))
    elif info['type'] == 'folder':
        cur.execute("INSERT INTO op (types, op_link, orders, op_id) VALUES (%s, %s, %s, '{}')", ('folder', info['folder_link'], max_orders))
        cur.execute("SELECT MAX(id) FROM op WHERE level = 1 and types = 'folder' and orders = '{}' ".format(max_orders))
        return cur.fetchall()[0]['max']
    elif info['type'] == 'folder_add':
        chat_info = await load_info_chat(info['channel_id'], chat_invite='', rules=['can_invite_users'])
        if chat_info:
            chat_title = chat_info["title"].replace('"', '').replace("'", '')
            folder_load = ''
            cur.execute("SELECT * FROM op WHERE id = '{}'".format(info['folder_id']))
            for row in cur.fetchall():
                folder_load = dict(row)
            if folder_load:
                if not folder_load['op_id'] or folder_load['op_id'] == '{}':
                    folder_channel = {info['channel_id']: chat_title}
                else:
                    folder_channel = eval(folder_load['op_id'])
                    folder_channel[info['channel_id']] = chat_title
                cur.execute("UPDATE op SET op_id = '{}' WHERE id = '{}'".format(str(folder_channel).replace("'", '"'), info['folder_id']))
                return True  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ

# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–∞–º–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
async def op_check_message(tg, state, channels_error=[], level=1):
    # print(f'channels_error = {channels_error} | level = {level}')
    save = await saver()
    if await op_check_pay(tg, state):
        channels_error = []
        # print('–ü–†–û–ü–£–°–ö–ê–ï–ú VIP')
    elif channels_error == 'START_FULL':
        channels_error = []
        for level_i in range(1, 3):
            for key, row in save['op'].items():
                if int(str(row['level'])[0]) == level_i:
                    if row['types'] == 'folder': # –µ—Å–ª–∏ –ø–∞–ø–∫–∞
                        if row['op_id'] and row['op_id'] != '{}':
                            for k, v in row['op_id'].items():
                                if int(k) not in channels_error:
                                    channels_error.append(int(k))
                    elif row['types'] == 'bot':
                        channels_error.append(row['op_id'])
                    elif row['op_id']: # –µ—Å–ª–∏ –ø–∞–ø–∫–∞
                        if row['op_id'] not in channels_error:
                            channels_error.append(int(row['op_id']))
            if channels_error:
                break
    elif not channels_error:
        channels_error = await op_check_user(tg, state)
    if channels_error:
        opm = {'text': '', 'but': ''}
        opm['text'] = f'{save["setting"][f"op_message_{level}_text"]}\n'
        opm['entities'] = save["setting"][f"op_message_{level}_entities"]
        but_ok = save["setting"][f"op_message_{level}_button"]
        kb = []
        kb2 = []
        i = 0
        ii = 0
        for key, row in save['op'].items():
            # print(f'row = {row}')
            # cur.execute("SELECT * FROM op ORDER BY orders ASC")
            # for row in cur.fetchall():
            op_add = False
            if row['types'] in ['bot_not_check', 'channel_not_check', 'group_not_check'] and row['level'] == int(level):
                op_add = True
            elif row['types'] == 'folder':
                if row['op_id'] and row['op_id'] != '{}':
                    for k, v in row['op_id'].items():
                        if int(k) in channels_error:
                            op_add = True
            elif row['op_id'] in channels_error:
                op_add = True
            # print(f'op_add = {op_add}')
            if op_add:
                ii += 1
                if ii != 4 and ii != 7:
                    i += 1 # –Ω–µ –≤—Å–µ–≥–¥–∞ —Ü–∏—Ñ—Ä–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è, –±—É–¥–µ—Ç 1 2 3 3 4 5 6 6 7 ...
                if row['types'] in ['bot', 'bot_not_check']:
                    op_types = "–±–æ—Ç"
                    op_smile = "ü§ñ"
                elif row['types'] in ['group', 'group_not_check']:
                    op_types = "–≥—Ä—É–ø–ø–∞"
                    op_smile = "üí¨"
                elif row['types'] in ['channel', 'channel_not_check']:
                    op_types = "–∫–∞–Ω–∞–ª"
                    op_smile = "üì£"
                elif row['types'] in ['folder']:
                    op_types = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
                    op_smile = "‚ûï"
                    row['op_title'] = "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
                if save["setting"]['op_message_type'] == '1': # —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ, —Å—Å—ã–ª–∫–∞–º–∏
                    link = row['op_link'].replace('https://', '').replace('http://', '').replace('www.', '')
                    opm['text'] += f"\n{op_types} {i} - {link}"
                elif save["setting"]['op_message_type'] == '4': # —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
                    link = row['op_link'].replace('www.', '')
                    opm['text'] += f"\n{i}. <a href='{link}'>{row['op_title']}</a>"
                else:
                    if save["setting"]['op_message_type'] == '2': # —Å—Å—ã–ª–∫–∏ –∫–Ω–æ–ø–∫–∞–º–∏ - –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
                        if row['op_title']:
                            op_name = row['op_title']
                        else:
                            op_name = row['op_name']
                    elif save["setting"]['op_message_type'] == '3': # —Å—Å—ã–ª–∫–∏ –∫–Ω–æ–ø–∫–∞–º–∏ - —Å–∞–º –ø–∏—à–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ
                        op_name = save['setting']['op_message_type_dopText']
                        op_name = op_name.replace("–¢–∏–ø", op_types.capitalize()).replace("—Ç–∏–ø", op_types).replace("–¢–ò–ü", op_types.upper())
                        op_name = op_name.replace('1', str(i))
                    if op_name and row["op_link"]:
                        kb2.append({'text': op_name, 'url': row['op_link']})
                        if len(kb2) > 1:
                            kb.append(kb2)
                            kb2 = []
        if len(kb2):
            kb.append(kb2)
        if save["setting"]['op_message_type'] in ['1', '4']:
            opm['text'] += "\n\n\n–ü–æ–¥–ø–∏—Å–∞–ª—Å—è? –ñ–º–∏ –∫–Ω–æ–ø–∫—Éüëá"
            if save["setting"]['op_message_type'] == '4':
                opm['text'] = f"<b>{opm['text']}</b>"
                opm['entities'] = False
        # VIP-–∫–∞ –∏–ª–∏ PAY
        if 'pay' in modules:
            pay_callback_data = ''
            if 'payTime' in modules:
                pay_callback_data = 'payTime_payList_op_go'
            elif 'payRating' in modules:
                pay_callback_data = 'payRating_payList_op_go'
            if pay_callback_data and int(save['setting']['pay_payShowInOp']):
                kb.append([{'text': save['setting']['pay_OP_messageButton'], 'callback_data': pay_callback_data}])
        # –∫–Ω–æ–ø–∫–∞ –î–ê–õ–ï–ï
        kb.append([{'text': but_ok, 'callback_data': f"op_check_{level}"}])
        opm['but'] = kb
        #answer = await send(tg, opm)
        kb = {"inline_keyboard": opm['but']}
        answer = ''
        try:
            answer = await send(tg.from_user.id, opm)
            # if opm['entities']:
            #     answer = await bot.send_message(tg.from_user.id, text=opm['text'], entities=opm['entities'], reply_markup=kb)
            # else:
            #     answer = await bot.send_message(tg.from_user.id, text=opm['text'], reply_markup=kb)
        except Exception as ex:
            if str(ex) == 'Forbidden: user is deactivated' or str(ex) == 'Forbidden: bot was blocked by the user':  # –∑–∞–±–ª–æ—á–∏–ª–∏
                await sql_user_block(tg.from_user.id)
            else:
                print(f'OP not send: {ex}')
        if answer:
            if 'message_id' in answer:
                async with state.proxy() as data:
                    if 'memory' not in data:
                        data['memory'] = []
                    data['memory'].append(answer.message_id)
            else:
                print(f'OP answer = {answer}')
    else:
        await module.Zuser.module_go(tg, state)

async def op_multi_check(find_id, user_id):
    try:
        res = await bot.get_chat_member(find_id, user_id)
        res = dict(res)
        res['type'] = 'op_multi_check'
        res['op_id'] = find_id
        return res
    except Exception as ex:
        print(f'ERROR 1 op_multi_check | id –∫–∞–Ω–∞–ª–∞: {find_id} | –æ—à–∏–±–∫–∞: {ex} ')


async def op_multi_bot(token, user_id):
    res = ''
    try:
        # res = requests.post(f'https://api.telegram.org/bot{token}/sendMessage', data={'chat_id': user_id, "text": '‚ûø'})
        res = requests.post(f'https://api.telegram.org/bot{token}/sendChatAction', data={'chat_id': user_id, "action": 'typing'})
        res = res.json()
        # print(f"\nOP BOT = {res}\n")
        # if 'result' in res:
        #     if 'message_id' in res['result']:
        #         requests.post(f'https://api.telegram.org/bot{token}/deleteMessage', data={'chat_id': user_id, "message_id": res['result']['message_id']})
        res['type'] = 'op_multi_bot'
        res['op_id'] = token
        return res
    except Exception as ex:
        print(f'ERROR 1 op_multi_bot | —Ç–æ–∫–µ–Ω –±–æ—Ç: {token} | –æ—à–∏–±–∫–∞: {ex} ')
    return res

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —é–∑–µ—Ä–æ–≤ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—ÉERROR 1 op_check
async def op_check_user(tg, state, level='ALL'):
    async with state.proxy() as data:
        user_id = tg.from_user.id
        user = await user_load(tg, state)
        if 'user' not in data:
            data['user'] = user

        save = await saver()
        channels_error = []
        finds = {}
        # finds = []

        user_op = []
        if 'user_op' in data:
            user_op = data['user_op']
        # print(f'user_op = {user_op}')

        if not save['op']:
            return []

        for key, row in save['op'].items():
            if row['types'] in ['channel', 'group', 'folder', 'bot']:
                if level != 'ALL':
                    if int(level) != row['level']:
                        continue
                if row['types'] == 'folder':
                    if row['op_id'] and row['op_id'] != '{}':
                        for k, v in row['op_id'].items():
                            if int(k) not in finds:
                                if int(k) not in user_op:
                                    # finds.append(int(k))
                                    finds[int(k)] = 'folder'
                elif row['types'] == 'bot':
                    if row['op_id'] not in finds and row['op_id'] not in user_op:
                        # finds.append(row['op_id'])
                        finds[row['op_id']] = 'bot'
                elif row['op_id']:
                    if row['op_id'] not in finds and row['op_id'] not in user_op:
                        # finds.append(int(row['op_id']))
                        finds[row['op_id']] = 'other'
                # elif row['op_name']:
                #     if row['op_name'] not in finds:
                #         if row['op_name'] not in user_op:
                #             # finds.append(int(row['op_name']))
                #             finds[int(row['op_id'])] = 'other'

        # print(f'finds = {finds}')
        tasks = []
        for k, v in finds.items():
            if v == 'bot':
                task = asyncio.create_task(op_multi_bot(k, user_id))
            else:
                task = asyncio.create_task(op_multi_check(k, user_id))
            tasks.append(task)
        result = await asyncio.gather(*tasks)

        # key = 0
        for one in result:
            if not one:
                print(f'!!!!! –û–î–ò–ù –ò–ó –ö–ê–ù–ê–õ–û–í –ì–õ–Æ–ß–ù–´–ô –í –û–ü, –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ—Ç –Ω–µ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª')
            elif one['type'] == 'op_multi_check':
                if 'status' in one:
                    if one['status'] in ['member', 'creator', 'administrator']:
                        if one['op_id'] not in user_op:
                            user_op.append(one['op_id'])
                        # if int(finds[key]) not in user_op:
                        #     user_op.append(int(finds[key]))
                    else:
                        channels_error.append(one['op_id'])
                        # channels_error.append(finds[key])
                else:
                    print(f'ERROR 2 get_chat_member = {one}')
            elif one['type'] == 'op_multi_bot':
                if one['ok']:
                    pass
                    # –±–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
                    # —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –∏—Ö –±–ª–æ—á–∞—Ç
                    # user_op.append(one['op_id'])
                else:
                    channels_error.append(one['op_id'])
            #key += 1

        data['user_op'] = user_op

        # print(f'channels_error = {channels_error}')

        if channels_error and (user['sub_now'] or user['sub_start']):
            cur.execute("UPDATE users SET sub_now = '{}' WHERE user_id = '{}'".format('0', user_id))
            data['user']['sub_now'] = 0
            data['user']['sub_start'] = 0
        elif not channels_error and (user['sub_now'] == 0 or user['sub_start'] == 0):
            cur.execute("UPDATE users SET sub_now = '{}', sub_start = '{}' WHERE user_id = '{}'".format('1', '1', user_id))
            data['user']['sub_now'] = 1
            data['user']['sub_start'] = 1
            if re.search(r"^u[1-9][0-9]*$", data['user']['referal']): # –ø—Ä–∏–≤–µ–ª –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏ VIP
                if 'payTime' in modules:
                    await module.payTime.payTime_free_vip(data['user']['referal'])
                elif 'payRating' in modules:
                    await module.payRating.payRating_free_vip(data['user']['referal'])
        return channels_error

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —é–∑–µ—Ä–∞ –Ω–∞ VIP
async def op_check_pay(tg, state):
    if 'payTime' in modules:
        return await module.payTime.payTime_check(tg, state)
    elif 'payRating' in modules:
        return await module.payRating.payRating_check(tg, state)
    else:
        return False


async def op_check_FULL(tg, state, page=False, dop=False, level='ALL'): # –≥–¥–µ page –¥–µ–π—Å—Ç–≤–∏–µ —é–∑–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø—Ä–µ—Ä—ã–≤–∞–µ–º, —á—Ç–æ–± –ø–æ—Å–ª–µ –û–ü –µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–¥–µ –Ω–∞—Ö–æ–¥–∏–ª—Å—è —é–∑–µ—Ä, —á—Ç–æ–± –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–∞ –Ω–µ–µ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ –û–ü
    async with state.proxy() as data:
        if 'page' in data:
            data['user_op_save_page'] = data['page']



    channels_error = []
    # if page:
    #     print(f'op_check_FULL PAGE = {page}')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç –ª–∏ —ç—Ç–æ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–µ–π—Å—Ç–≤–∏—é –ø–æ—Å–ª–µ –û–ü
    # async with state.proxy() as data:
    #     if 'op_savePage' in data:
    #         savePage = data['op_savePage']
    #         data.pop('op_savePage')
    #         if page:
    #             if savePage['module'] == page['module'] and savePage['page'] == page['page']:
    #                 return True # –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ –û–ü –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ VIP
    if await module.op.op_check_pay(tg, state):
        return True
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –Ω–∞ –û–ü
    channels_error = await module.op.op_check_user(tg, state, level=level)
    if channels_error:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —é–∑–µ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–µ
        # if page:
        #     async with state.proxy() as data:
        #         data['op_savePage'] = page
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –û–ü
        if dop == 'START_FULL':
            channels_error = dop
        await module.op.op_check_message(tg, state, channels_error)
        return False
    else:
        return True

async def checkBot_BotMembersRobot(user_id, token):
    link = f"https://api.botstat.io/checksub/{token}/{user_id}"
    res = requests.get(link)
    res = res.content

def op_graph(answer, mes):
    print(f"answer = {answer}")
    # files = {'photo': open('sity.jpg', 'rb')}
    # #
    mes = "<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>"
    mes += "\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª:"
    date = {}
    date[0] = datetime.date.today()  # —Å–µ–≥–æ–¥–Ω—è
    date[1] = datetime.datetime.now() - datetime.timedelta(days=1)
    date[1] = date[1].strftime("%Y-%m-%d")  # –≤—á–µ—Ä–∞
    date[2] = datetime.datetime.now() - datetime.timedelta(days=7)
    date[2] = date[2].strftime("%Y-%m-%d")  # –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
    date[3] = datetime.datetime.now() - datetime.timedelta(days=30)
    date[3] = date[3].strftime("%Y-%m-%d")  # –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
    date[4] = datetime.datetime.now() - datetime.timedelta(days=2000)
    date[4] = date[4].strftime("%Y-%m-%d")  # –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
    texts = {}
    texts[0] = f'\n<code>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:'
    texts[1] = f'\n–ó–∞ –≤—á–µ—Ä–∞:'
    texts[2] = f'\n–ó–∞ –Ω–µ–¥–µ–ª—é:'
    texts[3] = f'\n–ó–∞ –º–µ—Å—è—Ü:'
    texts[4] = f'\n–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:'
    —Åount_user = {}
    for key, value in date.items():
        count_2_3 = 0
        —Åount_user[key] = []
        if key < 2:
            cur.execute("SELECT COUNT(id) FROM users WHERE date_write = '{}'".format(value))
            —Åount_user[key].append(cur.fetchall()[0]['count'])
            cur.execute("SELECT COUNT(id) FROM users WHERE date_write = '{}' AND sub_start > 0".format(value))
            —Åount_user[key].append(cur.fetchall()[0]['count'])
            if save['op_list_check']:
                cur.execute(
                    "SELECT COUNT(id) FROM users WHERE date_write = '{}' AND sub_start > 0 AND sub_now > 0".format(
                        value))
                —Åount_user[key].append(cur.fetchall()[0]['count'])
        else:
            cur.execute("SELECT COUNT(id) FROM users WHERE date_write >= '{}'".format(value))
            —Åount_user[key].append(cur.fetchall()[0]['count'])
            cur.execute("SELECT COUNT(id) FROM users WHERE date_write >= '{}' AND sub_start > 0".format(value))
            —Åount_user[key].append(cur.fetchall()[0]['count'])
            if save['op_list_check']:
                cur.execute(
                    "SELECT COUNT(id) FROM users WHERE date_write >= '{}' AND sub_start > 0  AND sub_now > 0".format(
                        value))
                —Åount_user[key].append(cur.fetchall()[0]['count'])
        mes += f' {texts[key]} {—Åount_user[key][0]}'
        mes += f' | {—Åount_user[key][1]}'
        if save['op_list_check']:
            mes += f' | {—Åount_user[key][2]}'
    mes += '</code>'
    mes += "\n\n–ù–∞–∑–≤–∞–Ω–∏–µ | –£—Ä–æ–≤–µ–Ω—å | –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å"
    kb = json.dumps(eval(str(answer['reply_markup'])))
    data = {
        'chat_id': answer['chat']['id'],
        'caption': mes,
        'message_id': answer['message_id'],
        'reply_markup': kb,
        'parse_mode': 'HTML',
    }
    answer_2 = requests.post(f"https://api.telegram.org/bot{TOKEN['telegram_bot']}/editMessageCaption", data=data)

    ###### –≥—Ä–∞—Ñ–∏–∫
    # —Å–æ–∑–¥–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –ø–∞–ø–∫—É
    info_folder = 'files/graph'
    image = f'{info_folder}/op.jpg'
    if not os.path.exists(info_folder):
        os.mkdir(info_folder)
    elif os.path.exists(image):
        os.remove(image)
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ—É
    x = []
    y_1 = []
    y_2 = []
    y_3 = []
    for i in range(0, 30):
        date = datetime.date.today() if i == 0 else datetime.datetime.now() - datetime.timedelta(days=i)
        x_date = date.strftime("%d %m")
        x_date = x_date[1:] if int(x_date[:1]) == 0 else x_date
        x.append(x_date)
        date_full = date.strftime("%Y-%m-%d")
        if i < 2:
            y_1.append(—Åount_user[i][0])
            y_2.append(—Åount_user[i][1])
            if save['op_list_check']:
                y_3.append(—Åount_user[i][2])
        else:
            cur.execute("SELECT COUNT(id) FROM users WHERE date_write = '{}'".format(date_full))
            y_1.append(cur.fetchall()[0]['count'])
            cur.execute("SELECT COUNT(id) FROM users WHERE date_write = '{}' AND sub_start > 0".format(date_full))
            y_2.append(cur.fetchall()[0]['count'])
            if save['op_list_check']:
                cur.execute(
                    "SELECT COUNT(id) FROM users WHERE date_write = '{}' AND sub_start > 0  AND sub_now > 0".format(
                        date_full))
                y_3.append(cur.fetchall()[0]['count'])
    x.reverse()
    y_1.reverse()
    y_2.reverse()
    y_3.reverse()

    ######## –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    # # —Ñ–æ–Ω –∫–∞—Ä—Ç–∏–Ω–∫–∏
    # fig = plt.figure()
    # fig.patch.set_facecolor("#DBDBDB")
    # # —Ñ–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞
    ax = plt.axes()
    # ax.set_facecolor("#DBDBDB")
    # —É–±–∏—Ä–∞—Ç—å —Ä–∞–º–∫—É
    # plt.subplots_adjust(left=0.1, bottom=0.055, right=1, top=0.999)

    plt.plot(x, y_1, color='#06FF06', label="–í–æ—à–ª–∏ –≤ –±–æ—Ç")
    ax.fill_between(x, 0, y_1, color='#06FF06', alpha=.1)
    if 'op' in modules:
        plt.plot(x, y_2, color='#00B3FF', label="–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –û–ü")
        ax.fill_between(x, 0, y_2, color='#00B3FF', alpha=.1)
        if save['op_list_check']:
            plt.plot(x, y_3, color='#FF8900', label="–ü–æ–¥–ø–∏—Å–∞–Ω—ã –¥–æ —Å–∏—Ö –ø–æ—Ä")
            ax.fill_between(x, 0, y_3, color='#FF8900', alpha=.1)

    ax.set_title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π')

    # ax.spines['top'].set_visible(False) # —É–±–∏—Ä–∞—Ç—å —Ä–∞–º–∫—É
    # ax.spines['right'].set_visible(False)
    # ax.spines['left'].set_visible(False)
    # ax.spines['bottom'].set_color('#DDDDDD')
    # ax.tick_params(bottom=True, left=False, grid_color='#DDDDDD')
    # ax.set_axisbelow(True)
    # ax.yaxis.grid(True, color='#EEEEEE')
    # ax.xaxis.grid(False)

    plt.savefig(image)


    with open(image, 'rb') as photo:
        im = types.input_media.InputMediaPhoto(photo, caption=mes)
        data = {
            'chat_id': answer['chat']['id'],
            'media': im,
            'message_id': answer['message_id'],
            'reply_markup': kb,
            'parse_mode': 'HTML',
        }
        answer = requests.post(f"https://api.telegram.org/bot{TOKEN['telegram_bot']}/editMessageMedia", data=data)



