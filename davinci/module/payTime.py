from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import BotBlocked
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

import os.path
import time
import re
import math


from loader import *
from sql import *
from function import *
import module

async def payTime_install():
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É users —Å—Ç–æ–ª–±—Ü–æ–≤ users
    table_colomn = []
    cur.execute("SELECT * FROM information_schema.columns WHERE table_name = 'users'")
    for row in cur.fetchall():
        table_colomn.append(row['column_name'])
    if 'pay_time' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN pay_time INT DEFAULT 0")

    payTime_list = {
        0: {'name': "1 –¥–µ–Ω—å", 'day': 1, 'recurrent': True, 'smile': 'üí∞'},
        1: {'name': "2 –¥–Ω—è", 'day': 2, 'recurrent': True, 'smile': 'üí∞'},
        2: {'name': "3 –¥–Ω—è", 'day': 3, 'recurrent': True, 'smile': 'üí∞'},
        3: {'name': "4 –¥–Ω—è", 'day': 4, 'recurrent': True, 'smile': 'üí∞'},
        4: {'name': "5 –¥–Ω–µ–π", 'day': 5, 'recurrent': True, 'smile': 'üí∞'},
        5: {'name': "6 –¥–Ω–µ–π", 'day': 6, 'recurrent': True, 'smile': 'üí∞'},
        6: {'name': "10 –¥–Ω–µ–π", 'day': 10, 'recurrent': True, 'smile': 'üí∞'},
        7: {'name': "1 –Ω–µ–¥–µ–ª—è", 'day': 7, 'recurrent': True, 'smile': 'üí∞'},
        8: {'name': "2 –Ω–µ–¥–µ–ª–∏", 'day': 14, 'recurrent': True, 'smile': 'üí∞'},
        9: {'name': "3 –Ω–µ–¥–µ–ª–∏", 'day': 21, 'recurrent': True, 'smile': 'üí∞'},
        10: {'name': "1 –º–µ—Å—è—Ü", 'day': 30, 'recurrent': True, 'smile': 'üí∞'},
        11: {'name': "2 –º–µ—Å—è—Ü–∞", 'day': 61, 'recurrent': True, 'smile': 'üí∞'},
        12: {'name': "3 –º–µ—Å—è—Ü–∞", 'day': 91, 'recurrent': True, 'smile': 'üí∞'},
        13: {'name': "4 –º–µ—Å—è—Ü–∞", 'day': 122, 'recurrent': True, 'smile': 'üí∞'},
        14: {'name': "5 –º–µ—Å—è—Ü–µ–≤", 'day': 152, 'recurrent': True, 'smile': 'üí∞'},
        15: {'name': "6 –º–µ—Å—è—Ü–µ–≤", 'day': 183, 'recurrent': True, 'smile': 'üí∞'},
        16: {'name': "7 –º–µ—Å—è—Ü–µ–≤", 'day': 213, 'recurrent': True, 'smile': 'üí∞'},
        17: {'name': "8 –º–µ—Å—è—Ü–µ–≤", 'day': 244, 'recurrent': True, 'smile': 'üí∞'},
        18: {'name': "9 –º–µ—Å—è—Ü–µ–≤", 'day': 274, 'recurrent': True, 'smile': 'üí∞'},
        19: {'name': "10 –º–µ—Å—è—Ü–µ–≤", 'day': 305, 'recurrent': True, 'smile': 'üí∞'},
        20: {'name': "11 –º–µ—Å—è—Ü–µ–≤", 'day': 335, 'recurrent': True, 'smile': 'üí∞'},
        21: {'name': "1 –≥–æ–¥", 'day': 365, 'recurrent': True, 'smile': 'üí∞'},
        22: {'name': "–ù–∞–≤—Å–µ–≥–¥–∞", 'day': 3650, 'recurrent': False, 'smile': 'üí∞'},
    }

    save = await saver('add', {'setting': {
        "payTime_price": '{}',
        "payTime_list": str(payTime_list),
        "payTime_start_vip_free": 0,
        "pay_payFree_message": "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–∑–µ–π –∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∏—à—å +1 –¥–µ–Ω—å VIP üëë\n\n–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n%–†–ï–§–ö–ê% \n–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã\n\n–í—ã –ø—Ä–∏–≤–µ–ª–∏: %–†–ï–§–ö–ê–û–¢–ß–ï–¢%",
        "payTime_cron_message": str({"text": "%–ò–ú–Ø%, –≤–∞—à–µ VIP üëë –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å VIP –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ–ø–ª–∞—Ç—É"}).replace("'", '"')
    }})

    payTime_list = eval(save['setting']['payTime_list'])
    if 'smile' not in payTime_list[0]:
        payTime_list_new = {}
        for k, v in payTime_list.items():
            v['smile'] = 'üí∞'
            payTime_list_new[k] = v
        save = await saver('replace', {'setting': {"payTime_list": str(payTime_list_new).replace("'", '"')}})


# –∫–Ω–æ–ø–∫–∞ payTime_
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('payTime_'), state='*')
async def payTime_callback(tg: types.CallbackQuery, state: FSMContext):
    save = await saver()
    if tg.from_user.id in eval(save['setting']['ban_users']):
        return False
    await send(tg, {'callback': True})
    error=''
    m = {0: {}}
    page = await page_split(tg.data)
    memory = await memory_start(state)
    if page['page'] == 'userAdd3':
        async with state.proxy() as data:
            userAdd = data['payTime_userAdd']
        cur.execute("SELECT * FROM users WHERE user_id = '{}' LIMIT 1".format(userAdd['user_id']))
        for row in cur.fetchall():
            userLoad = dict(row)
        now = int(time.time())
        pay_time = int(userLoad['pay_time'])
        payTime_list = eval(save['setting']['payTime_list'])
        time_plus = (payTime_list[int(page['param'])]['day'] * 24 * 60 * 60)
        if pay_time >= now:
            new_date = pay_time + time_plus
            answer = await send(tg, {'text': '‚úÖ VIP —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'})
        else:
            new_date = now + time_plus
            answer = await send(tg, {'text': '‚úÖ VIP —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω'})
        memory['mes_new'].append(answer.message_id)
        cur.execute("UPDATE users SET pay_time = '{}' WHERE user_id = '{}'".format(new_date, userAdd['user_id']))
        page['page'] = 'userList'
        memory['dop'] = await payTime_dop(tg, state, page, error)
        # –ø–∏—à–µ–º —é–∑–µ—Ä—É —á—Ç–æ –≤—ã–¥–∞–ª–∏ –≤–∏–ø
        forever = now + (5 * 365 * 24 * 60 * 60) # + 5 –ª–µ—Ç
        if new_date > forever:
            date_finish = "–Ω–∞–≤—Å–µ–≥–¥–∞"
        else:
            date_finish = datetime.datetime.fromtimestamp(new_date)
            date_finish = date_finish.strftime('%Y-%m-%d %H:%M')
            date_finish = f"–¥–æ {date_finish}"
        await send(userLoad['user_id'], {'text': f"üëë –í–∞–º –≤—ã–¥–∞–ª–∏ VIP –¥–æ—Å—Ç—É–ø {date_finish}"})
    elif page['page'] == 'priceClean':
        async with state.proxy() as data:
            if 'payTime_priceId' in data:
                priceId = data['payTime_priceId']
                payTime_price = eval(save['setting']['payTime_price'])
                payTime_price.pop(priceId)
                payTime_price = str(payTime_price).replace("'", '"')
                save = await saver('replace', {"setting": {"payTime_price": payTime_price }})
        page['page'] = 'priceList'
        memory['dop'] = await payTime_dop(tg, state, page, error)
    elif page['page'] == 'smileClean':
        async with state.proxy() as data:
            if 'payTime_priceId' in data:
                priceId = data['payTime_priceId']
                payTime_list = eval(save['setting']['payTime_list'])
                payTime_list[priceId]['smile'] = ''
                save = await saver('replace', {'setting': {"payTime_list": str(payTime_list).replace("'", '"')}})
        page['page'] = 'priceEdit'
        memory['dop'] = await payTime_dop(tg, state, page, error)
    elif page['page'] == 'payOnePaid':
        cur.execute("SELECT * FROM pay_wallet WHERE active = 1")
        for row in cur.fetchall():
            pay_wallet = dict(row)
        if pay_wallet:
            m[0]['text'] = pay_wallet['token'] # —Ç—É—Ç –Ω–∞–ø–∏—Å–∞–Ω —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º–∏–Ω–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            async with state.proxy() as data:
                if 'pay_back' in data:
                    back_callback_data = data['pay_back']
                else:
                    back_callback_data = ''
            if back_callback_data:
                m[0]['but'] = [[{'text': but_back, 'callback_data': back_callback_data}]]
    elif page['page'] == 'yyy':
        m[0]['text'] = "–¢–µ–∫—Å—Ç"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "payTime_go"}]]
        answer = await send(tg, {'text': '—Ç–µ–∫—Å—Ç'})
        memory['mes_new'].append(answer.message_id)
        page['page'] = 'yy'
        memory['dop'] = await payTime_dop(tg, state, page, error)
    else:
        # –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≥–¥–µ –º—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –≤ –î–û–ü
        memory['dop'] = await payTime_dop(tg, state, page)
    await memory_finish(tg, state, memory, page, m)

# —Ç–µ–∫—Å—Ç
async def payTime_message(tg, state, page):
    save = await saver()
    error=''
    m = {0: {}}
    memory = await memory_start(state)
    if page['page'] == 'userDelete' and 'text' in tg:
        cust = ''
        text = tg.text.replace('https://t.me/', '@')
        if re.search(r'^@|A-Z|a-z|0-9|_]{4,}$', text):
            text = text.replace("@", "")
            cur.execute("SELECT * FROM users WHERE username = '{}'".format(text))
            for row in cur.fetchall():
                cust = dict(row)
        elif re.search(r'^[1-9][0-9]*$', text):
            cur.execute("SELECT * FROM users WHERE user_id = '{}' LIMIT 1".format(text))
            for row in cur.fetchall():
                cust = dict(row)
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        if cust:
            cur.execute("UPDATE users SET pay_time = '{}' WHERE user_id = '{}'".format(int(time.time()), cust['user_id']))
            answer = await send(tg, {'text': '‚úñÔ∏è VIP —É–¥–∞–ª–µ–Ω'})
            memory['mes_new'].append(answer.message_id)
            page['page'] = 'userList'
        elif not error:
            error = f"‚ùå –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–æ—Ç–µ"
        memory['dop'] = await payTime_dop(tg, state, page, error)
    elif page['page'] == 'userAdd' and 'text' in tg:
        userAdd = ''
        text = tg.text.replace('https://t.me/', '@')
        if re.search(r'^@|A-Z|a-z|0-9|_]{4,}$', text):
            text = text.replace("@", "")
            cur.execute("SELECT * FROM users WHERE username = '{}'".format(text))
            for row in cur.fetchall():
                userAdd = dict(row)
        elif re.search(r'^[1-9][0-9]*$', text):
            cur.execute("SELECT * FROM users WHERE user_id = '{}' LIMIT 1".format(text))
            for row in cur.fetchall():
                userAdd = dict(row)
        else:
            error = f"‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        if userAdd:
            async with state.proxy() as data:
                data['payTime_userAdd'] = userAdd
            page['page'] = 'userAdd2'
        elif not error:
            error = f"‚ùå –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–æ—Ç–µ"
        memory['dop'] = await payTime_dop(tg, state, page, error)
    elif page['page'] == 'priceEdit' and 'text' in tg:
        text = tg.text
        if re.search(r'^[1-9][0-9]*$', text):
            async with state.proxy() as data:
                if 'payTime_priceId' in data:
                    priceId = data['payTime_priceId']
                    payTime_price = eval(save['setting']['payTime_price'])
                    payTime_price[priceId] = int(text)
                    payTime_price = dict(sorted(payTime_price.items()))
                    payTime_price = str(payTime_price).replace("'", '"')
                    save = await saver('replace', {"setting": {"payTime_price": payTime_price }})
            page['page'] = 'priceList'
        elif re.search(r'^.{1}$', text):
            print(f'smile = {text}')
            async with state.proxy() as data:
                if 'payTime_priceId' in data:
                    priceId = data['payTime_priceId']
                    payTime_list = eval(save['setting']['payTime_list'])
                    payTime_list[priceId]['smile'] = text
                    save = await saver('replace', {'setting': {"payTime_list": str(payTime_list).replace("'", '"')}})
            page['page'] = 'priceList'
        else:
            error = f"‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–æ–ª—å—à–µ –Ω—É–ª—è –∏–ª–∏ —Å–º–∞–π–ª–∏–∫"
        memory['dop'] = await payTime_dop(tg, state, page, error)
    elif page['page'] == 'startVipFree' and 'text' in tg:
        text = tg.text
        if re.search(r'^[0-9]*$', text):
            text = int(text)
            save = await saver('replace', {"setting": {"payTime_start_vip_free": text}})
            answer = await send(tg, {'text': '‚úÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ'})
            memory['mes_new'].append(answer.message_id)
        else:
            error = f"‚ùå –ù–µ –≤–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        memory['dop'] = await payTime_dop(tg, state, page, error)
    elif page['page'] == 'userListDelete' and 'text' in tg:
        text = tg.text
        if re.search(r'^/delete_[1-9][0-9]*$', text):
            user_del = int(text.split('_')[1])
            answer = await send(tg, {'text': '‚úÖ VIP —É–¥–∞–ª–µ–Ω'})
            memory['mes_new'].append(answer.message_id)
            cur.execute("UPDATE users SET pay_time = '{}' WHERE id = '{}'".format(int(time.time()), user_del))
        else:
            error = f"‚ùå –ù–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        memory['dop'] = await payTime_dop(tg, state, page, error)
    elif page['page'] == 'userList' and 'text' in tg:
        page['page'] = 'userListOne'
        memory['dop'] = await payTime_dop(tg, state, page, error)
    elif page['page'] == 'yyy' and 'text' in tg:
        m[0]['text'] = '—Ç–µ–∫—Å—Ç'
        m[0]['but'] = [[{'text': but_back, 'callback_data': "payTime_go"}]]
        answer = await send(tg, {'text': '—Ç–µ–∫—Å—Ç'})
        memory['mes_new'].append(answer.message_id)
        error = f"‚ùå –î–∞–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        page['page'] = 'yy'
        memory['dop'] = await payTime_dop(tg, state, page, error)
        memory['page_new'] = 'payTime_xx'
    else:
        memory['stop'] = True
        memory['dop'] = await payTime_dop(tg, state, page, error)
    await memory_finish(tg, state, memory, page, m)

async def payTime_dop(tg, state, page, error_mes=False):
    save = await saver()
    if tg.from_user.id in eval(save['setting']['ban_users']):
        return False
    error = ''
    m = {0: {}}
    memory = await memory_start(state, load_memory=False)
    if page['page'] == 'userList':
        forever = int(time.time()) + (3 * 365 * 24 * 60 * 60)
        m[0]['text'] = f"ü´Ö –°–ø–∏—Å–æ–∫ VIP —é–∑–µ—Ä–æ–≤:\n"
        ul = await userList(tg, state, page="payTime_userList", sql_where=f"pay_time >= {int(time.time())}")
        for row in ul['list']:
            full_name = f"{row['first_name']} {row['last_name']}".strip()
            m[0]['text'] += f"\n\n<a href='tg://user?id={row['user_id']}'>{row['user_id']} {full_name}</a>"
            if row['username']:
                m[0]['text'] += f" @{row['username']}"
            if row['pay_time'] > forever:
                m[0]['text'] += f"\nüëë –ù–∞–≤—Å–µ–≥–¥–∞"
            else:
                m[0]['text'] += f"\nüëë –î–æ {datetime.datetime.fromtimestamp(row['pay_time']).strftime('%Y-%m-%d %H:%M')}"
            m[0]['text'] += f"   /delete_{row['id']}"
        m[0]['text'] += f"\n\n<i>–ù–∞–ø–∏—à–∏—Ç–µ ID –∏–ª–∏ @username, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É</i>"
        m[0]['but'] = []
        if ul['but']:
            m[0]['but'].append(ul['but'])
        m[0]['but'].append([{'text': "üéÅ –í—ã–¥–∞—Ç—å VIP –¥–æ—Å—Ç—É–ø", 'callback_data': "payTime_userAdd"}])
        m[0]['but'].append([{'text': "‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å VIP –¥–æ—Å—Ç—É–ø", 'callback_data': "payTime_userDelete"}])
        m[0]['but'].append([{'text': but_back, 'callback_data': "pay_adminMenu"}])
    elif page['page'] == 'userListOne':
        text = tg.text.replace('https://', '').replace('t.me/', '').replace('@', '').replace('"', '').replace("'", '')
        cust = False
        now = int(time.time())
        if re.search(r'^/delete_[0-9]+$', text):
            text = text.replace('/delete_', '')
            answer = await send(tg, {'text': '‚úÖ VIP —É–¥–∞–ª–µ–Ω'})
            memory['mes_new'].append(answer.message_id)
            cur.execute("UPDATE users SET pay_time = '{}' WHERE id = '{}'".format(now, text))
            page['page'] = 'userList'
            memory['dop'] = await payTime_dop(tg, state, page, error)
        else:
            if re.search(r'^[0-9]+$', text):
                cur.execute("SELECT * FROM users WHERE user_id = '{}' LIMIT 1".format(text))
                for row in cur.fetchall():
                    cust = dict(row)
            elif re.search(r'^[a-z|0-9|A-Z|_]{3,}$', text):
                cur.execute("SELECT * FROM users WHERE username = '{}' LIMIT 1".format(text))
                for row in cur.fetchall():
                    cust = dict(row)
            if not cust:
                m[0]['text'] = '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –±–æ—Ç–∞'
            else:
                m[0]['text'] = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \n<a href='tg://user?id={cust['user_id']}'>{cust['user_id']}</a>\n"
                m[0]['text'] += f"{row['first_name']} {row['last_name']}".strip()
                if row['username']:
                    m[0]['text'] += f"\n@{row['username']}"
                if cust['pay_time'] < now:
                    m[0]['text'] += '\n\n‚úñÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç VIP —Å—Ç–∞—Ç—É—Å–∞'
                elif cust['pay_time'] >= now:
                    us_date = "–Ω–∞–≤—Å–µ–≥–¥–∞" if cust['pay_time'] > (now + (3 * 365 * 24 * 60 * 60)) else f"–¥–æ {datetime.datetime.fromtimestamp(cust['pay_time']).strftime('%Y-%m-%d %H:%M')}"
                    m[0]['text'] += f'\n\nüëë VIP {us_date}'
            m[0]['but'] = [[{'text': but_back, 'callback_data': "payTime_userList"}]]
    elif page['page'] == 'userDelete':
        m[0]['text'] = "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ Id, —É –∫–æ–≥–æ —É–±—Ä–∞—Ç—å VIP –¥–æ—Å—Ç—É–ø"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "payTime_userList"}]]
    elif page['page'] == 'userAdd':
        m[0]['text'] = "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ Id, —á—Ç–æ–± –≤—ã–¥–∞—Ç—å –µ–º—É VIP –¥–æ—Å—Ç—É–ø"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "payTime_userList"}]]
    elif page['page'] == 'userAdd2':
        m[0]['text'] = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã–¥–∞—Ç—å VIP (–ï—Å–ª–∏ —É —é–∑–µ—Ä–∞ —É–∂–µ –±—ã–ª VIP —Ç–æ —ç—Ç–æ –¥–æ–±–∞–≤–∏—Ç –µ–º—É —ç—Ç–æ—Ç —Å—Ä–æ–∫):"
        m[0]['but'] = []
        dop = []
        payTime_list = eval(save['setting']['payTime_list'])
        for key, one in payTime_list.items():
            dop.append({'text': one['name'], 'callback_data': f"payTime_userAdd3_{key}"})
            if len(dop) >= 2:
                m[0]['but'].append(dop)
                dop = []
        if dop:
            m[0]['but'].append(dop)
        m[0]['but'].append([{'text': but_back, 'callback_data': "payTime_userList"}])
    elif page['page'] == 'startVipFree':
        m[0]['text'] = '<b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π VIP: '
        hour = int(save['setting']['payTime_start_vip_free'])
        if hour >= 43800:
            m[0]['text'] += f"–Ω–∞–≤—Å–µ–≥–¥–∞"
        elif hour >= 24:
            day = math.floor(hour / 24)
            m[0]['text'] += f"{await data_count(day)} ({hour} {await words(hour, '—á–∞—Å')})"
        else:
            m[0]['text'] += f"{hour} {await words(hour, '—á–∞—Å')}"
        m[0]['text'] += "</b>"
        m[0]['text'] += "\n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤, –ø—Ä–∏—à–ª–∏—Ç–µ —Ü–∏—Ñ—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å"
        m[0]['text'] += "\n\n<i>–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —é–∑–µ—Ä –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –ø–æ–ø–∞–ª –≤ –±–æ—Ç, –æ–Ω –ø–æ–ª—É—á–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VIP. "
        m[0]['text'] += "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ –¥–Ω—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 24 —á–∞—Å–∞ = 1 –¥–µ–Ω—å, 48 —á–∞—Å–æ–≤ = 2 –¥–Ω—è –∏ —Ç.–¥</i>"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "pay_adminMenu"}]]
    elif page['page'] == 'priceList':
        m[0]['text'] = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω VIP:\n\n* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∫–Ω–æ–ø–∫–∏, –≥–¥–µ –µ—Å—Ç—å —Ü–µ–Ω–∞"
        m[0]['but'] = []
        dop = []
        payTime_price = eval(save['setting']['payTime_price'])
        payTime_list = eval(save['setting']['payTime_list'])
        for key, one in payTime_list.items():
            if key in payTime_price:
                mes = f"‚úÖ {one['name']} –∑–∞ {payTime_price[key]} —Ä"
                if one['smile']:
                    mes += f" - {one['smile']}"
            else:
                mes = f"‚ûñ {one['name']} "
            dop.append({'text': mes, 'callback_data': f"payTime_priceEdit_{key}"})
            if len(dop) >= 2:
                m[0]['but'].append(dop)
                dop = []
        if dop:
            m[0]['but'].append(dop)
        m[0]['but'].append([{'text': but_back, 'callback_data': "pay_adminMenu"}])
    elif page['page'] == 'priceEdit':
        async with state.proxy() as data:
            if page['param'] or page['param'] == '0':
                data['payTime_priceId'] = int(page['param'])
            if 'payTime_priceId' in data:
                priceId = data['payTime_priceId']
        if priceId or priceId == 0:
            payTime_price = eval(save['setting']['payTime_price'])
            payTime_list = eval(save['setting']['payTime_list'])
            m[0]['text'] = f"–°—Ä–æ–∫: {payTime_list[priceId]['name']}"
            m[0]['but'] = []
            if priceId in payTime_price:
                m[0]['text'] += f"\n\n–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {payTime_price[priceId]} —Ä"
                m[0]['text'] += f"\n\n–°–º–∞–π–ª–∏–∫: {payTime_list[priceId]['smile']}"
                m[0]['text'] += f"\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–∏—Ñ—Ä—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–º–∞–π–ª–∏–∫, —á—Ç–æ–± –∏–∑–º–µ–Ω–∏—Ç—å —Å–º–∞–π–ª–∏–∫"
                m[0]['but'].append([{'text': "‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–Ω—É", 'callback_data': "payTime_priceClean"}])
                m[0]['but'].append([{'text': "‚úñÔ∏è –°–∫—Ä—ã—Ç—å —Å–º–∞–π–ª–∏–∫", 'callback_data': "payTime_smileClean"}])
            else:
                m[0]['text'] += "\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É, —á—Ç–æ–± –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ—è–≤–∏–ª—Å—è —É —é–∑–µ—Ä–∞"
            m[0]['but'].append([{'text': but_back, 'callback_data': "payTime_priceList"}])
        else:
            page['page'] = 'priceList'
            memory['dop'] = await payTime_dop(tg, state, page, error)
    elif page['page'] == 'payList': # —Å–æ–æ—â–µ–Ω–∏–µ VIP –∏–ª–∏ PAY
        async with state.proxy() as data:
            if page['param'] and page['param_2']:
                back_callback_data = f"{page['param']}_{page['param_2']}"
                data['pay_back'] = back_callback_data
            else:
                back_callback_data = data['pay_back'] if 'pay_back' in data else ''
        m[0] = await show_message_from_setting('pay', tg) # "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP üëë: ..."
        m[0]['but'] = []
        payTime_price = eval(save['setting']['payTime_price'])
        for key, one in payTime_price.items():
            payTime_list = eval(save['setting']['payTime_list'])
            m[0]['but'].append([{'text': f"{payTime_list[key]['smile']} {payTime_list[key]['name']} –∑–∞ {one} —Ä", 'callback_data': f'payTime_payOne_{key}'}])
        if int(save['setting']['pay_payFree']):
            m[0]['but'].append([{'text': save['setting']['pay_payFree_Button'], 'callback_data': 'payTime_mesFree'}])
        if back_callback_data:
            m[0]['but'].append([{'text': but_back, 'callback_data': back_callback_data}])
    elif page['page'] == 'mesFree':
        m[0]['text'] = save['setting']['pay_payFree_message']
        m[0]['but'] = [[{'text': but_back, 'callback_data': f"payTime_payList"}]]
        m[0] = await message_replace(tg.from_user, m[0], module='payTime')
    elif page['page'] == 'payOne':
        pay_wallet = ''
        cur.execute("SELECT * FROM pay_wallet WHERE active = 1")
        for row in cur.fetchall():
            pay_wallet = dict(row)
        if not page['param']:
            page['page'] = 'payList'
            memory['dop'] = await payTime_dop(tg, state, page, error)
        elif pay_wallet:
            pay_id = int(page['param'])
            payTime_price = eval(save['setting']['payTime_price'])
            if pay_id in payTime_price:
                payTime_list = eval(save['setting']['payTime_list'])
                if pay_wallet['company'] == 'manual':
                    m[0]['text'] = f"–î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ {payTime_list[pay_id]['name']}"
                    m[0]['text'] += f" —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {payTime_price[pay_id]}—Ä –Ω–∞ –∫–∞—Ä—Ç—É üëá"
                    m[0]['text'] += f"\n\n<code>{pay_wallet['shop_id']}</code>"
                    m[0]['text'] += f"\n\n–∏ –Ω–∞–∂–º–∏—Ç–µ –Ø –û–ü–õ–ê–¢–ò–õ"
                    m[0]['but'] = [[
                        {'text': "‚úÖ –Ø –û–ü–õ–ê–¢–ò–õ", 'callback_data': "payTime_payOnePaid"},
                        {'text': but_back, 'callback_data': "payTime_payList"},
                    ]]
                else:
                    m[0]['text'] = f"üëë –û–ø–ª–∞—Ç–∞ –∑–∞  VIP –∞–∫–∫–∞—É–Ω—Ç\n\nüïî –°—Ä–æ–∫: {payTime_list[pay_id]['name']}\nüíµ –¶–µ–Ω–∞: {payTime_price[pay_id]}—Ä"
                    m[0]['but'] = [[
                        {'text': but_back, 'callback_data': "payTime_payList"},
                        {'text': "üí≥ –û–ü–õ–ê–¢–ò–¢–¨", 'url': f"https://{pay_link}/?bot={save['bot']['username']}&user={tg.from_user.id}&time={pay_id}"}
                    ]]
            else:
                m[0]['text'] = "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã"
                m[0]['but'] = [[{'text': but_back, 'callback_data': "payTime_payList"}]]
        else:
            m[0]['text'] = "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã"
            m[0]['but'] = [[{'text': but_back, 'callback_data': "payTime_payList"}]]
    elif page['page'] == 'xx':
        m[0]['text'] = "–¢–µ–∫—Å—Ç"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "payTime_go"}]]
        answer = await send(tg, {'text': '—Ç–µ–∫—Å—Ç'})
        memory['mes_new'].append(answer.message_id)
        page['page'] = 'yy'
        memory['dop'] = await payTime_dop(tg, state, page, error)
    if error_mes and 'text' in m[0]:
        m[0]['text'] = f'{error_mes}\n\n{m[0]["text"]}'
    await memory_finish(tg, state, memory, page, m, dop=True)
    return True # —á—Ç–æ–± –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–∂–∞ –∑–∞–ø–∏—Å–∏ page

async def payTime_check(tg, state):
    now = int(time.time())
    async with state.proxy() as data:
        if 'user' not in data:
            data['user'] = await sql_user_add(tg.from_user)
        else:
            if int(data['user']['pay_time']) < now: # –µ—Å–ª–∏ –≤–∏–ø —Ç–æ –Ω–µ—Ç—É —Å–º—ã—Å–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –≤–∏–ø
                # –ø—Ä–∏—Ö–æ–¥–∏—Ç—å—Å—è –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∏–Ω–∞—á–µ –≤–¥—Ä—É–≥ –æ–Ω –ø–æ–ª—É—á–∏–ª –í–ò–ü, –∞ –µ–≥–æ state –Ω–µ –≤ –∫—É—Ä—Å–µ
                cur.execute("SELECT pay_time FROM users WHERE user_id = '{}' LIMIT 1".format(tg.from_user.id))
                for row in cur.fetchall():
                    data['user']['pay_time'] = row['pay_time']
        user = data['user']
        if int(user['pay_time']) > now:
            return True # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VIP
        else:
            return False

async def startVipFree(user, state):
    save = await saver()
    vip_free = int(save['setting']['payTime_start_vip_free'])
    if vip_free > 0:
        new_time = int(time.time()) + (vip_free * 60 * 60)
        cur.execute("UPDATE users SET pay_time = '{}' WHERE user_id = '{}'".format(new_time, user['user_id']))
        async with state.proxy() as data:
            data['payTimeFree'] = new_time
            data['user']['pay_time'] = new_time
            user = data['user']
    return user

async def startVipFree_message(tg, state):
    save = await saver()
    hour = int(save['setting']['payTime_start_vip_free'])
    if hour >= 43800:
        time = "–Ω–∞–≤—Å–µ–≥–¥–∞"
    elif hour >= 24:
        time = await data_count(math.floor(hour / 24))
    else:
        time = f"{hour} {await words(hour, '—á–∞—Å')}"
    mes = f"üéä <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VIP üëë –Ω–∞ {time}</b>"
    await send(tg.from_user.id, {'text': mes})
    async with state.proxy() as data:
        data.pop('payTimeFree')

async def payTime_free_vip(tg, referal):
    cur.execute("SELECT COUNT(*) FROM users WHERE user_id = '{}'".format(tg.from_user.id))
    if not cur.fetchall()[0]['count']:
        sec_plus = 24 * 60 * 60
        now = int(time.time())
        user_id = str(referal).replace('u', '')
        cust = ''
        cur.execute("SELECT * FROM users WHERE user_id = '{}' LIMIT 1".format(user_id))
        for row in cur.fetchall():
            cust = dict(row)
        print(f'payTime_free_vip = {referal} | {cust}')
        if cust:
            if int(cust['pay_time']) < now:
                plus = now + sec_plus
            else:
                plus = int(cust['pay_time']) + sec_plus
            cur.execute("UPDATE users SET pay_time = '{}' WHERE user_id = '{}'".format(plus, user_id))
            mes = f"üéä <b>–í—ã –ø—Ä–∏–≤–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VIP üëë –Ω–∞ 1 –¥–µ–Ω—å</b>"
            await send(user_id, {'text': mes})

