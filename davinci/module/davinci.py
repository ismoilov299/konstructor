from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import BotBlocked
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from loader import *
from sql import *
import os.path
from function import *
import time
import re
import module
import urllib.request
import hashlib
import hmac
import requests
import json


async def davinci_install():
    cur.execute("""CREATE TABLE IF NOT EXISTS stopWords (
                id SERIAL PRIMARY KEY,
                word TEXT NOT NULL DEFAULT '')""")

    save = await saver('add', {'stopWords': []})
    # –°–¢–û–ü —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ë–î
    stopWords_start = ['anegaga', 'ma8rinad', 'znakomsyatg_bot', 'ssurazq']
    stopWords_db = await sql_stopWords()
    for one in stopWords_start:
        if one not in stopWords_db:
            cur.execute("INSERT INTO stopWords (word) VALUES (%s)", [one])
    save = await saver('reset', 'stopWords')


    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É users —Å—Ç–æ–ª–±—Ü–æ–≤ davinci_
    table_colomn = []
    cur.execute("SELECT * FROM information_schema.columns WHERE table_name = 'users'")
    for row in cur.fetchall():
        table_colomn.append(row['column_name'])
    if 'davinci_ban' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_ban INT DEFAULT 0")
    if 'davinci_ban_list' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_ban_list TEXT DEFAULT ''")
    if 'davinci_check' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_check INT DEFAULT 0")
    if 'davinci_couple_stop' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_couple_stop INT DEFAULT 0")
    if 'davinci_anket_active' not in table_colomn: # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—É
        cur.execute("ALTER TABLE users ADD COLUMN davinci_anket_active INT DEFAULT 0")
    if 'davinci_anket_name' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_anket_name TEXT DEFAULT ''")
    if 'davinci_anket_sex' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_anket_sex INT DEFAULT 0")
    if 'davinci_anket_search' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_anket_search INT DEFAULT 0")
    if 'davinci_anket_age' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_anket_age INT DEFAULT 0")
    if 'davinci_anket_city' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_anket_city TEXT DEFAULT ''")
    if 'davinci_anket_aboutme' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_anket_aboutme TEXT DEFAULT ''")
    if 'davinci_anket_gallary' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_anket_gallary TEXT DEFAULT '[]'")
    if 'davinci_rate_list' not in table_colomn:
        cur.execute("ALTER TABLE users ADD COLUMN davinci_rate_list TEXT DEFAULT '|'")

    cur.execute("""CREATE TABLE IF NOT EXISTS davinci_message (
                id SERIAL PRIMARY KEY,
                cust_id TEXT NOT NULL DEFAULT '',
                cust TEXT NOT NULL DEFAULT '',
                skip INT DEFAULT 0,
                date_save TEXT NOT NULL DEFAULT '',
                rate TEXT NOT NULL DEFAULT '[]')""")

    r_mm = {
        'button': [
            ['üöÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã', 'üëë Boost'],
            ['üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞', 'üíé VIP']
        ],
        'list': {
            'üöÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã': "davinci_rate",
            'üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞': "davinci_account",
            'üëë Boost': 'davinci_boost',
            'üíé Boost': 'davinci_boost',
            '‚û°Ô∏è': 'davinci_couple',
            '–î–∞–ª—å—à–µ ‚û°Ô∏è': 'davinci_couple',
            "‚ù§Ô∏è": 'davinci_ratePlus',
            "üíå/üìπ": 'davinci_sendMes',
            "üëé": 'davinci_rateMinus',
            "üí§": 'davinci_go',
            "‚§¥Ô∏è": 'davinci_go',
            "‚ö†Ô∏è": 'davinci_rateComp',
            "–í –º–µ–Ω—é ‚§¥Ô∏è": 'davinci_go',
            "üëå –ü–æ–Ω—è—Ç–Ω–æ": 'davinci_rate',
            "–ö—É–ø–∏—Ç—å VIP üëë": "payTime_payList_davinci_go",
            'üëë VIP': "payTime_payList_davinci_go",  # –≤ –∫–æ–Ω—Ü–µ - –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
            'üíé VIP': "payTime_payList__",  # –≤ –∫–æ–Ω—Ü–µ - –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
        }
    }
    save = await saver('add', {'menu': r_mm})

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è save['setting']['start_message_...']
    if 'start_message_text' not in save["setting"]:
        mes = "–£–∂–µ –º–∏–ª–ª–∏–æ–Ω—ã –ª—é–¥–µ–π –∑–Ω–∞–∫–æ–º—è—Ç—Å—è –≤ –î–∞–π–≤–∏–Ω—á–∏–∫–µ üòç\n\n–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–∑–µ–π üë´"
        await module.op.load_start_message(mes, 'davinci', but='üëå –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º')

    save = await saver('add', {'setting': {
        "main_message_text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "main_message_entities": "",
        "main_message_fileId": "",
        "main_message_fileType": "",
        "davinci_ban_max": 3, # —Å–∫–æ–ª—å–∫–æ –¥–æ–∂–Ω–æ –±—ã—Ç—å –ñ–ê–õ–û–ë —á—Ç–æ–± –ø–æ–ø–∞—Å—Ç—å –∫ –∞–¥–º–∏–Ω—É
        "davinci_ban_limit": 5, # —Å–∫–æ–ª—å–∫–æ –∂–∞–ª–æ–± –Ω–∞ –∞–Ω–∫–µ—Ç—ã, –º–æ–∂–Ω–æ –∫–∏–Ω—É—Ç—å –≤ –¥–µ–Ω—å
        "davinci_create_anket": 1, # –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è 1 - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, 0 –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Ç–æ–º
        "davinci_anket_before_op": 2, # –°–∫–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç —é–∑–µ—Ä –º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –µ–º—É –≤—ã–ø–∞–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –û–ü
        "davinci_anket_max": 50, # –°–∫–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç —é–∑–µ—Ä –º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –¥–µ–Ω—å –º–∞–∫—Å–∏–º—É–º
    }})

    # –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥—É–ª—å advFlyer
    if 'advFlyer' in modules:
        save = await saver('add', {'setting': {"davinci_anket_before_flyer": 1}})




@dp.message_handler(commands=['view'], state='*')
async def user_start(tg: types.Message, state: FSMContext):
    page = {'module': 'davinci', 'page': 'rate'}
    await davinci_dop(tg, state, page, False)

@dp.message_handler(commands=['anket'], state='*')
async def user_start(tg: types.Message, state: FSMContext):
    page = {'module': 'davinci', 'page': 'account'}
    await davinci_dop(tg, state, page, False)

@dp.message_handler(commands=['boost'], state='*')
async def user_start(tg: types.Message, state: FSMContext):
    page = {'module': 'davinci', 'page': 'boost'}
    await davinci_dop(tg, state, page, False)

@dp.message_handler(commands=['vip'], state='*')
async def user_start(tg: types.Message, state: FSMContext):
    page = {'module': 'payTime', 'page': 'payList', 'param': '', 'param_2': ''}
    await module.payTime.payTime_dop(tg, state, page, False)

@dp.message_handler(commands=['vipcancel'], state='*')
async def user_start(tg: types.Message, state: FSMContext):
    wallet = {}
    cur.execute("SELECT * FROM pay_wallet WHERE active = 1 LIMIT 1")
    for row in cur.fetchall():
        wallet = dict(row)
    if wallet['company'] == 'Payselection':
        cur.execute("SELECT * FROM pay_payment WHERE status = 'paid' AND user_id = '{}'".format(tg.from_user.id))
        for row in cur.fetchall():
            if row['answer']:
                answer = eval(row['answer'])
                if "RebillId" in answer:
                    arr = {"RebillId": answer["RebillId"]}
                    res = await payselection_recurring('/payments/recurring/search', arr, wallet, tg.from_user.id)  # —É–∑–Ω–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                    for one in res:
                        if 'RecurringId' in one:
                            arr = {"RecurringId": one['RecurringId']}
                            res = await payselection_recurring('/payments/recurring/unsubscribe', arr, wallet, tg.from_user.id)
                else:
                    print(f"–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø–∏c–∞—Ç—å —Ä–µ–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –Ω–µ –Ω–∞—à–ª–∏ RebillId –≤ —Ç–∞–±–ª–∏—Ü–µ pay_payment –≤ —Å—Ç–æ–ª–±—Ü–µ answer. –≥–¥–µ id —Å—Ç—Ä–æ–∫–∏ = {row['id']}")
        await send(tg, {'text': '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'})

async def payselection_recurring(action, param, wallet, user_id):
    url = f"https://gw.payselection.com{action}"
    x_site_id = wallet['shop_id']
    site_secret_key = wallet['token2']
    request_body = json.dumps(param)
    x_request_id = str(time.time()).replace('.', '')
    x_request_id += str(user_id)
    #  —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    signature_string = f"POST\n{action}\n{x_site_id}\n{x_request_id}\n{request_body}"
    signature = hmac.new(key=site_secret_key.encode(), msg=signature_string.encode(), digestmod=hashlib.sha256,).hexdigest()
    headers = {
        'X-SITE-ID': x_site_id,
        'X-REQUEST-SIGNATURE': signature,
        'X-REQUEST-ID': x_request_id,
        'Content-Type': 'application/json'
    }
    response = requests.request("POST", url, headers=headers, data=request_body)
    res = response.json()
    return res



async def davinci_sex_my(sex, only_smile=False):
    sex = int(sex)
    if sex == 1:
        text = "üôé‚Äç‚ôÇÔ∏è "
        if not only_smile:
            text += "–Ø –ø–∞—Ä–µ–Ω—å"
    elif sex == 2:
        text = "üôç‚Äç‚ôÄÔ∏è "
        if not only_smile:
            text += "–Ø –¥–µ–≤—É—à–∫–∞"
    else:
        text = "üö´ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    return text

async def davinci_search(search):
    search = int(search)
    if search == 1:
        text = "üôé‚Äç‚ôÇÔ∏è –ü–∞—Ä–Ω–∏"
    elif search == 2:
        text = "üôç‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫–∏"
    elif search == 3:
        text = "–í—Å–µ—Ö"
    else:
        text = "üö´ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    return text

async def davinci_complaint(param):
    param = int(param)
    if param == 1:
        return "üîû –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö"
    elif param == 2:
        return "üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥"
    elif param == 3:
        return "üò¥ –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    elif param == 4:
        return "ü¶® –î—Ä—É–≥–æ–µ"
    elif param == 9:
        return "üëÄ –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–Ω–∫–µ—Ç–∞"
    else:
        return f"‚ùî –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è: {param}"

# –∫–Ω–æ–ø–∫–∞ davinci_
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('davinci_'), state='*')
async def davinci_callback(tg: types.CallbackQuery, state: FSMContext):
    save = await saver()
    if tg.from_user.id in eval(save['setting']['ban_users']):
        return False
    user = await user_load(tg, state)
    await send(tg, {'callback': True})
    error = ''
    m = {0: {}}
    page = await page_split(tg.data)
    memory = await memory_start(state)
    if page['page'] == 'anketSex':
        cur.execute("UPDATE users SET davinci_anket_sex = '{}' WHERE user_id = '{}'".format(page['param'], tg.from_user.id))
        async with state.proxy() as data:
            data['user']['davinci_anket_sex'] = int(page['param'])
        page['page'] = page['param_2']
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'anketAge2':
        m[0]['text'] = "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
        age_list = page['param'].split('-')
        m[0]['but'] = []
        kb = []
        for i in range(int(age_list[0]), int(age_list[1]) + 1):
            if len(kb) >= 6:
                m[0]['but'].append(kb)
                kb = []
            kb.append({'text': i, 'callback_data': f"davinci_anketAge3_{i}_{page['param_2']}"})
        if kb:
            m[0]['but'].append(kb)
    elif page['page'] == 'anketAge3':
        cur.execute("UPDATE users SET davinci_anket_age = '{}' WHERE user_id = '{}'".format(page['param'], tg.from_user.id))
        async with state.proxy() as data:
            data['user']['davinci_anket_age'] = page['param']
        page['page'] = page['param_2']
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'anketSearch':
        cur.execute("UPDATE users SET davinci_anket_search = '{}' WHERE user_id = '{}'".format(page['param'], tg.from_user.id))
        async with state.proxy() as data:
            data['user']['davinci_anket_search'] = int(page['param'])
        page['page'] = page['param_2']
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'anketNameFirstname' and page['param']:
        user = await user_load(tg, state)
        cur.execute("UPDATE users SET davinci_anket_name = '{}' WHERE user_id = '{}'".format(user['first_name'], tg.from_user.id))
        async with state.proxy() as data:
            data['user']['davinci_anket_search'] = user['first_name']
        page['page'] = page['param']
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'anketAboutMe':
        page['page'] = 'anketGallary'
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'anketGallaryLoadAcc':
        # import urllib.request
        answer = await bot.get_chat(chat_id=tg.from_user.id) # —É–∑–Ω–∞–µ–º Id  —Ñ–æ—Ç–æ —É –∞–∫–∫–∞—É–Ω—Ç–∞
        answer = await bot.get_file(file_id=answer['photo']['big_file_id']) # —É–∑–Ω–∞–µ–º –ø—É—Ç—å –≤ —Ç–µ–ª–µ–≥–µ –≥–¥–µ —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ
        link = f"https://api.telegram.org/file/bot{TOKEN['telegram_bot']}/{answer['file_path']}"
        name = tg.from_user.id # int(time.time())
        file_format = answer['file_path'].split(".")[-1]
        file_adress = f'files/{name}.{file_format}'
        urllib.request.urlretrieve(link, f"{file_adress}") # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        answer = await send(tg.from_user.id, {'photo': file_adress}) # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —é–∑–µ—Ä—É —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π id —Ñ–∞–π–ª–∞
        async with state.proxy() as data:
            if 'davinci_gallary' not in data:
                data['davinci_gallary'] = []
            data['davinci_gallary'].append({'type': "photo", 'media': answer['photo'][-1]['file_id']})
        page['page'] = 'anketGallary' if page['param'] == 'anketFinish' else 'editGallary'
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'GallarySave':
        async with state.proxy() as data:
            if 'davinci_gallary' not in data:
                page['page'] = 'anketGallary'
            else:
                page['page'] = page['param']
                davinci_anket_gallary = str(data['davinci_gallary']).replace("'", '"')
                data['user']['davinci_anket_gallary'] = davinci_anket_gallary
                cur.execute("UPDATE users SET davinci_anket_gallary = '{}', davinci_anket_active = 1 WHERE user_id = '{}'".format(davinci_anket_gallary, tg.from_user.id))
                if 'davinci_gallary' in data:
                    data.pop('davinci_gallary')
        user = await user_load(tg, state, load=True)
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'adminCreateAnket':
        if int(save['setting']['davinci_create_anket']):
            davinci_create_anket = 0
        else:
            davinci_create_anket = 1
        save = await saver('replace', {'setting': {"davinci_create_anket": davinci_create_anket}})
        page['page'] = 'adminMenu'
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'adminStat':
        m[0]['text'] = "üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏"
        cur.execute("SELECT COUNT(*) FROM users WHERE davinci_anket_sex = 1")
        count = cur.fetchall()[0]['count']
        m[0]['text'] += f"\n\n–ü–∞—Ä–Ω–µ–π: {count}"
        cur.execute("SELECT COUNT(*) FROM users WHERE davinci_anket_sex = 2")
        count = cur.fetchall()[0]['count']
        m[0]['text'] += f"\n–î–µ–≤—É—à–µ–∫: {count}"
        m[0]['text'] += "\n\n–•–æ—Ç—è—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å:"
        cur.execute("SELECT COUNT(*) FROM users WHERE davinci_anket_search = 1")
        count = cur.fetchall()[0]['count']
        m[0]['text'] += f"\n- –ø–∞—Ä–Ω–µ–π: {count}"
        cur.execute("SELECT COUNT(*) FROM users WHERE davinci_anket_search = 2")
        count = cur.fetchall()[0]['count']
        m[0]['text'] += f"\n- –¥–µ–≤—É—à–µ–∫: {count}"
        cur.execute("SELECT COUNT(*) FROM users WHERE davinci_anket_search = 3")
        count = cur.fetchall()[0]['count']
        m[0]['text'] += f"\n- –ª—é–±–æ–≥–æ –ø–æ–ª–∞: {count}"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_adminMenu"}]]
    elif page['page'] == 'topBan':
        if page['param']:
            cust_prew = int(page['param'])
            await ban_add(cust_prew, save['setting']['ban_limit'], state=state)  # –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –±–∞–Ω –∑–∞ —Å—Å—ã–ª–∫—É (–±–∞–Ω –ø—Ä–∏ 120)
            cur.execute("UPDATE users SET davinci_ban = '{}' WHERE user_id = '{}'".format(save['setting']['davinci_ban_max'], cust_prew))
        page['page'] = 'top'
        page['param'] = 1
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'adminAnketEdit': # davinci _ adminAnketEdit _ ban/new _ user_id _ ban/ok
        if page['param'] and page['param_2'] and page['param_3']:
            anket_cust = int(page['param_2'])
            cur.execute("UPDATE users SET davinci_check = 1 WHERE user_id = '{}'".format(anket_cust))
            if page['param_3'] == 'ban':
                await ban_add(anket_cust, save['setting']['ban_limit'])  # –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –±–∞–Ω –∑–∞ —Å—Å—ã–ª–∫—É (–±–∞–Ω –ø—Ä–∏ 120)
                cur.execute("DELETE FROM davinci_message WHERE cust_id = '{}'".format(anket_cust))
                cur.execute("UPDATE users SET davinci_rate_list = '|' WHERE user_id = '{}'".format(anket_cust))
                cur.execute("SELECT * FROM davinci_message WHERE rate LIKE '%{}%'".format(f'"{anket_cust}":'))
                for row in cur.fetchall():
                    if row['rate']:
                        new_rate = eval(row['rate'])
                        if str(anket_cust) in new_rate:
                            new_rate.pop(str(anket_cust))
                            new_rate = str(new_rate).replace("'", '"')
                            cur.execute("UPDATE davinci_message SET rate = '{}' WHERE id = '{}'".format(new_rate, row['id']))
            else:
                cur.execute("UPDATE users SET davinci_ban = 0, davinci_ban_list = '', davinci_rate_list = '|' WHERE user_id = '{}'".format(anket_cust))
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'complaint':
        if page['param']:
            m[0]['message_id'] = tg.message.message_id
            m[0]['text'] = f"{tg.message.text}\n\n–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:"
            m[0]['ent'] = tg.message.entities
            m[0]['but'] = [
                [{'text': await davinci_complaint(1), 'callback_data': f"davinci_complaintChoice_{page['param']}_1"}],
                [{'text': await davinci_complaint(2), 'callback_data': f"davinci_complaintChoice_{page['param']}_2"}],
                [{'text': await davinci_complaint(3), 'callback_data': f"davinci_complaintChoice_{page['param']}_3"}],
                [{'text': await davinci_complaint(4), 'callback_data': f"davinci_complaintChoice_{page['param']}_4"}],
                [{'text': "‚úñÔ∏è –û—Ç–º–µ–Ω–∞", 'callback_data': f"davinci_complaintDel_{page['param']}"}],
            ]
    elif page['page'] == 'complaintDel':
        if page['param']:
            m[0]['message_id'] = tg.message.message_id
            m[0]['text'] = tg.message.text.split('\n')[0]
            m[0]['ent'] = tg.message.entities
            m[0]['but'] = [[{'text': "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", 'callback_data': f"davinci_complaint_{page['param']}"}]]
    elif page['page'] == 'complaintChoice':
        await bot.delete_message(chat_id=tg.from_user.id, message_id=tg.message.message_id)
        if page['param'] and page['param_2']:
            answer = await send(tg, {'text': "–ñ–∞–ª–æ–±–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"})
            memory['mes_new'].append(answer.message_id)
            customer = {}
            cur.execute("SELECT * FROM users WHERE user_id = '{}' LIMIT 1".format(page['param']))
            for row in cur.fetchall():
                customer = dict(row)
            if customer:
                davinci_ban_list = f"{customer['davinci_ban_list']}|{page['param_2']}" if customer['davinci_ban_list'] else page['param_2']
                cur.execute("UPDATE users SET davinci_ban_list = '{}', davinci_ban = davinci_ban + 1 WHERE id = '{}'".format(davinci_ban_list, customer['id']))
        page['page'] = 'go'
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'close':
        await bot.delete_message(chat_id=tg.from_user.id, message_id=tg.message.message_id)
        return False
    elif page['page'] == 'yyy':
        m[0]['text'] = "–¢–µ–∫—Å—Ç"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_go"}]]
        answer = await send(tg, {'text': '—Ç–µ–∫—Å—Ç'})
        memory['mes_new'].append(answer.message_id)
        page['page'] = 'yy'
        memory['dop'] = await davinci_dop(tg, state, page, error)
    else:
        # –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≥–¥–µ –º—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –≤ –î–û–ü
        memory['dop'] = await davinci_dop(tg, state, page)
    await memory_finish(tg, state, memory, page, m)


# —Ç–µ–∫—Å—Ç
async def davinci_message(tg, state, page):
    save = await saver()
    error = ''
    m = {0: {}}
    memory = await memory_start(state)
    if page['page'] in ['anketAge', 'editAge'] and 'text' in tg:
        text = tg.text
        if re.search(r"^[1-9][0-9]$", text):
            cur.execute("UPDATE users SET davinci_anket_age = '{}' WHERE user_id = '{}'".format(text, tg.from_user.id))
            async with state.proxy() as data:
                data['user']['davinci_anket_age'] = text
            page['page'] = 'anketSearch' if page['page'] == 'anketAge' else 'account'
        else:
            error = f"‚ùå –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –æ—Ç 10 –¥–æ 99"
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] in ['anketName', 'editName'] and 'text' in tg:
        text = tg.text
        if re.search(r"[@|\/][a-z|A-Z|0-9|_]{3,}", text) or re.search(r"[a-z|A-Z|0-9|_]{2,}bot", text) or re.search(r"(http(s)?:\/\/)?(www\.)?(\w|\d|-){2,}\.\w{2,}", text):
            error = f"‚ùå –°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã"
        elif re.search(r"^[a-z|A-Z|–∞-—è|–ê-–Ø|—ë|–Å|\s]{1,}$", text):
            text = text.replace('>', '¬ª').replace('<', '¬´')
            if len(text) > 100:
                text = f'{text[:100]}...'
            page['page'] = 'anketCity' if page['page'] == 'anketName' else 'account'
            cur.execute("UPDATE users SET davinci_anket_name = '{}' WHERE user_id = '{}'".format(text, tg.from_user.id))
            async with state.proxy() as data:
                data['user']['davinci_anket_name'] = text
        else:
            error = f"‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª"
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] in ['anketCity', 'editCity'] and 'text' in tg:
        text = tg.text
        if re.search(r"^[a-z|A-Z|0-9|\s|—ë|–Å|–∞-—è|–ê-–Ø|-]{3,}$", text):
            if not text.isnumeric():
                text = text.lower()
                text = text.replace('—è –∏–∑ ', '').replace('—è —Å ', '').replace('c ', '').strip()
                if text in ['—É–∫—Ä', '—É–∫—Ä–∞–∏–Ω—ã']:
                    text = '—É–∫—Ä–∞–∏–Ω–∞'
                elif text in ['–∫–∞–∑–∞–∫—Å—Ç–∞–Ω', '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞']:
                    text = '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω'
                elif text in ['—Ä–æ—Å–∏—è', '—Ä–æ—Å—Å–∏–∏']:
                    text = '—Ä–æ—Å—Å–∏—è'
                if text not in ['—Ä–æ—Å—Å–∏—è', '–ë–µ–ª–æ—Ä—É—Å—å', '—É–∫—Ä–∞–∏–Ω–∞', '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω']:
                    if text in ['—Å–±–ø', '–ø–∏—Ç–µ—Ä', 'c–∞–Ω–∫—Ç–ø–µ—Ç–µ—Ä–±—É—Ä–≥', 'c–∞–Ω–∫—Ç–ø–∏—Ç–µ—Ä–±—É—Ä–≥', 'c–∞–Ω–∫—Ç –ø–µ—Ç–µ—Ä–±—É—Ä–≥', 'c–∞–Ω–∫—Ç –ø–∏—Ç–µ—Ä–±—É—Ä–≥', 'c–∞–Ω–∫—Ç-–ø–∏—Ç–µ—Ä–±—É—Ä–≥']:
                        text = 'c–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥'
                    elif text in ['–µ–∫–±', '–µ–±—É—Ä–≥', '—ë–±—É—Ä–≥']:
                        text = '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
                    elif text in ['–º—Å–∫', '–º–∞—Å–∫–≤–∞']:
                        text = '–º–æ—Å–∫–≤–∞'
                    cur.execute("UPDATE users SET davinci_anket_city = '{}' WHERE user_id = '{}'".format(text, tg.from_user.id))
                    async with state.proxy() as data:
                        data['user']['davinci_anket_age'] = text
                    page['page'] = 'anketAboutMe' if page['page'] == 'anketCity' else 'account'
                else:
                    error = f"‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ä–æ–¥, –∞ –Ω–µ —Å—Ç—Ä–∞–Ω–∞"
            else:
                error = f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä"
        else:
            error = f"‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–∏—Ä–µ –∏ –ø—Ä–æ–±–µ–ª"
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] in ['anketAboutMe', 'editAboutMe'] and 'text' in tg:
        text = tg.text
        if re.search(r"[@|\/][a-z|A-Z|0-9|_]{3,}", text) or re.search(r"[a-z|A-Z|0-9|_]{2,}bot", text) or re.search(r"(http(s)?:\/\/)?(www\.)?(\w|\d|-){2,}\.\w{2,}", text):
            error = f"‚ùå –°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã"
        else:
            if len(text) < 7:
                error = f"‚ùå –ù–∞–ø–∏—à–∏ –æ —Å–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ"
            else:
                if len(text) > 300:
                    text = f'{text[:300]}...'
                text = text.replace('>', '¬ª').replace('<', '¬´')
                page['page'] = 'anketGallary' if page['page'] == 'anketAboutMe' else 'account'
                cur.execute("UPDATE users SET davinci_anket_aboutme = '{}' WHERE user_id = '{}'".format(text, tg.from_user.id))
                async with state.proxy() as data:
                    data['user']['davinci_anket_aboutme'] = text
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] in ['anketGallary', 'editGallary']:
        if 'photo' in tg or 'video' in tg:
            async with state.proxy() as data:
                if 'davinci_gallary' not in data:
                    data['davinci_gallary'] = []
                if 'photo' in tg:
                    data['davinci_gallary'].append({'type': "photo", 'media': tg['photo'][-1]['file_id']})
                else:
                    data['davinci_gallary'].append({'type': "video", 'media': tg['video']['file_id']})
                if len(data['davinci_gallary']) >= 3:
                    davinci_save = True
                    davinci_anket_gallary = str(data['davinci_gallary']).replace("'", '"')
                    data['user']['davinci_anket_gallary'] = davinci_anket_gallary
                    cur.execute("UPDATE users SET davinci_anket_gallary = '{}', davinci_anket_active = 1 WHERE user_id = '{}'".format(davinci_anket_gallary, tg.from_user.id))
                    if 'davinci_gallary' in data:
                        data.pop('davinci_gallary')
                    page['page'] = 'anketFinish' if page['page'] == 'anketGallary' else 'account'
                else:
                    page['page'] = 'anketGallary' if page['page'] == 'anketGallary' else 'editGallary'
            if 'davinci_save' in locals():
                user = await user_load(tg, state, load=True)
        else:
            error = f"‚ùå –ë–æ—Ç –∂–¥–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –æ—Ç –≤–∞—Å"
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'adminAnketBeforeOp' and 'text' in tg:
        text = tg.text
        if re.search(r'^[0-9]+$', text):
            save = await saver('replace', {'setting': {"davinci_anket_before_op": int(text)}})
            answer = await send(tg, {'text': '‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ'})
            memory['mes_new'].append(answer.message_id)
            page['page'] = 'adminMenu'
        else:
            error = f"‚ùå –í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'adminAnketBeforeFlyer' and 'text' in tg:
        text = tg.text
        if re.search(r'^[0-9]+$', text):
            save = await saver('replace', {'setting': {"davinci_anket_before_flyer": int(text)}})
            answer = await send(tg, {'text': '‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ'})
            memory['mes_new'].append(answer.message_id)
            page['page'] = 'adminMenu'
        else:
            error = f"‚ùå –í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'adminAnketMax' and 'text' in tg:
        text = tg.text
        if re.search(r'^[0-9]+$', text):
            save = await saver('replace', {'setting': {"davinci_anket_max": int(text)}})
            answer = await send(tg, {'text': '‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ'})
            memory['mes_new'].append(answer.message_id)
            page['page'] = 'adminMenu'
        else:
            error = f"‚ùå –í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'sendMes':
        if 'text' in tg or 'video' in tg:
            mes = {}
            if 'text' in tg:
                mes['text'] = tg['text']
            if 'video' in tg:
                mes['file_type'] = 'video'
                mes['file_id'] = tg['video']['file_id']
                if 'caption' in tg:
                    mes['text'] = tg['caption']
            if 'text' in mes:
                for word in save['stopWords']:
                    if word.lower() in mes['text'].lower():
                        await ban_add(tg.from_user.id, save['setting']['ban_limit'], state=state)  # –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –±–∞–Ω –∑–∞ —Å—Å—ã–ª–∫—É (–±–∞–Ω –ø—Ä–∏ 120)
                        return False
                if re.search(r"[@|\/][a-z|A-Z|0-9|_]{3,}", mes['text']) or re.search(r"[a-z|A-Z|0-9|_]{2,}bot", mes['text']) or re.search(
                        r"(http(s)?:\/\/)?(www\.)?(\w|\d|-){2,}\.\w{2,}", mes['text']):
                    error = f"‚ùå –°—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ, –µ—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏, —Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–∞–Ω–µ–Ω—ã"
                    await ban_add(tg.from_user.id, 10, state=state)
                mes['text'] = mes['text'].replace("'", "`").replace("<", "¬´").replace(">", "¬ª")
            if not error:
                page = await davinci_rate(tg, state, page, mes=mes)
        else:
            error = f"‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'adminStop' and 'text' in tg:
        if re.search(r'^/delete_[1-9][0-9]*$', tg.text):
            num = tg.text.split('_')[1]
            cur.execute("DELETE FROM stopWords WHERE id = '{}'".format(num))
        else:
            if tg.text not in save['stopWords']:
                cur.execute("INSERT INTO stopWords (word) VALUES (%s)", [tg.text])
        save = await saver('reset', 'stopWords')
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'xx' and 'text' in tg:
        m[0]['text'] = '—Ç–µ–∫—Å—Ç'
        m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_go"}]]
        answer = await send(tg, {'text': '—Ç–µ–∫—Å—Ç'})
        memory['mes_new'].append(answer.message_id)
        error = f"‚ùå –î–∞–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        page['page'] = 'yy'
        memory['dop'] = await davinci_dop(tg, state, page, error)
    else:
        memory['stop'] = True
        memory['dop'] = await davinci_dop(tg, state, page, error)
    await memory_finish(tg, state, memory, page, m)

async def davinci_dop(tg, state, page, error_mes=False):
    save = await saver()
    if tg.from_user.id in eval(save['setting']['ban_users']):
        return False
    error = ''
    m = {0: {}}
    memory = await memory_start(state, load_memory=False)
    if page['page'] == 'go':
        user = await user_load(tg, state)
        async with state.proxy() as data:
            if 'DV_cust_rate' in data:
                data.pop('DV_cust_rate')
            if 'DV_cust_couple' in data:
                data.pop('DV_cust_couple')
            if not user['davinci_anket_active'] and int(save['setting']['davinci_create_anket']):
                if not 'warning_message' in data:
                    data['warning_message'] = False
                if not data['warning_message']:
                    m[0]['text'] = "‚ùóÔ∏è –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–∏—Ö."
                    m[0]['text'] += "\n\n–ë–æ—Ç –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º."
                    if 'gloabal_link' in locals():  # gloabal_link = {'agreement': '', 'privacy': ''}
                        if 'agreement' in gloabal_link and 'privacy' in gloabal_link:
                            m[0]['text'] += f"–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ <a href='{gloabal_link['agreement']}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a> –∏ <a href='{gloabal_link['privacy']}'>–ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>."
                    m[0]['but'] = [[{'text': "üëå Ok", 'callback_data': "davinci_go"}]] # m[0]['menu'] = [["üëå Ok"]]
                    data['warning_message'] = True
                elif not user['davinci_anket_sex']:
                    page['page'] = 'anketSex'
                    memory['dop'] = await davinci_dop(tg, state, page, error)
                elif not user['davinci_anket_age']:
                    page['page'] = 'anketAge'
                    memory['dop'] = await davinci_dop(tg, state, page, error)
                elif not user['davinci_anket_search']:
                    page['page'] = 'anketSearch'
                    memory['dop'] = await davinci_dop(tg, state, page, error)
                elif not user['davinci_anket_name']:
                    page['page'] = 'anketName'
                    memory['dop'] = await davinci_dop(tg, state, page, error)
                elif not user['davinci_anket_city']:
                    page['page'] = 'anketCity'
                    memory['dop'] = await davinci_dop(tg, state, page, error)
                elif not user['davinci_anket_aboutme'] and int(save['setting']['davinci_create_anket']):
                    page['page'] = 'anketAboutMe'
                    memory['dop'] = await davinci_dop(tg, state, page, error)
                elif 'finish' not in eval(user['davinci_anket_gallary']) and int(save['setting']['davinci_create_anket']):
                    page['page'] = 'anketGallary'
                    memory['dop'] = await davinci_dop(tg, state, page, error)
            else:
                m[0] = await show_message_from_setting('main', tg)
                m[0]['menu'] = save['menu']['button']
    elif page['page'] == 'anketSex': # –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ - –ø–æ–ª
        m[0]['text'] = "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª"
        m[0]['but'] = [[
            {'text': await davinci_sex_my(1), 'callback_data': "davinci_anketSex_1_anketAge"},
            {'text': await davinci_sex_my(2), 'callback_data': "davinci_anketSex_2_anketAge"}
        ]]
    elif page['page'] == 'anketAge': # –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ - –≤–æ–∑—Ä–∞—Å—Ç
        m[0]['text'] = "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
        m[0]['but'] = [[
            {'text': '16-20', 'callback_data': "davinci_anketAge2_16-20_anketSearch"},
            {'text': '21-30', 'callback_data': "davinci_anketAge2_21-30_anketSearch"},
            {'text': '31-50', 'callback_data': "davinci_anketAge2_31-50_anketSearch"},
            {'text': '51-80', 'callback_data': "davinci_anketAge2_51-80_anketSearch"},
            {'text': '81-99', 'callback_data': "davinci_anketAge2_81-99_anketSearch"},
        ]]
        ######
    elif page['page'] == 'anketSearch': # –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ - –∫–æ–≥–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å
        m[0]['text'] = "–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?"
        m[0]['but'] = [[
            {'text': await davinci_search(1), 'callback_data': "davinci_anketSearch_1_anketName"},
            {'text': await davinci_search(3), 'callback_data': "davinci_anketSearch_3_anketName"},
            {'text': await davinci_search(2), 'callback_data': "davinci_anketSearch_2_anketName"},
        ]]
    elif page['page'] == 'anketName': # –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ - –∏–º—è
        m[0]['text'] = "–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?"
        user = await user_load(tg, state)
        if user['first_name']:
            m[0]['but'] = [[{'text': user['first_name'], 'callback_data': "davinci_anketNameFirstname_anketCity"}]]
    elif page['page'] == 'anketCity': # –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ - –≤–æ–∑—Ä–∞—Å—Ç
        m[0]['text'] = "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?"
        ######
    elif page['page'] == 'anketAboutMe': # –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ - —Ñ–æ—Ç–æ
        m[0]['text'] = "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏, —á–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é."
        m[0]['but'] = [[{'text': "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 'callback_data': "davinci_anketAboutMe"}]]
    elif page['page'] == 'anketGallary': # –≥–∞–ª–µ—Ä–µ—è
        async with state.proxy() as data:
            if 'davinci_gallary' not in data:
                data['davinci_gallary'] = []
            if not data['davinci_gallary']:
                m[0]['text'] = "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≤–∏–¥–µ–æ üëç (–¥–æ 15 —Å–µ–∫), –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
                answer = await bot.get_chat(chat_id=tg.from_user.id)
                if 'photo' in answer:
                    m[0]['but'] = [[{'text': "–í–∑—è—Ç—å —Ñ–æ—Ç–æ —Å —Ç–µ–ª–µ–≥—Ä–∞–º–∞", 'callback_data': "davinci_anketGallaryLoadAcc_anketFinish"}]]
            else:
                file_type = '–§–æ—Ç–æ' if 'photo' in tg else '–í–∏–¥–µ–æ'
                m[0]['text'] = f"{file_type} –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚Äì {len(data['davinci_gallary'])} –∏–∑ 3.\n\n–ï—â–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ?"
                m[0]['but'] = [[{'text': "–≠—Ç–æ –≤—Å–µ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", 'callback_data': "davinci_GallarySave_anketFinish"}]]
    elif page['page'] == 'anketFinish':
        m[0]['text'] = "–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:"
        user = await user_load(tg, state)
        m[1] = await anket(user)
        m[2] = {}
        m[2]['text'] = "–í—Å–µ –≤–µ—Ä–Ω–æ?"
        m[2]['but'] = [[
            {'text': "–î–∞", 'callback_data': "davinci_go"},
            {'text': "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", 'callback_data': "davinci_account"},
        ]]
    elif page['page'] == 'editAge': # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –≤–æ–∑—Ä–∞—Å—Ç
        user = await user_load(tg, state)
        m[0]['text'] = "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
        m[0]['but'] = [
            [
                {'text': '16-20', 'callback_data': "davinci_anketAge2_16-20_account"},
                {'text': '21-30', 'callback_data': "davinci_anketAge2_21-30_account"},
                {'text': '31-50', 'callback_data': "davinci_anketAge2_31-50_account"},
                {'text': '51-80', 'callback_data': "davinci_anketAge2_51-80_account"},
                {'text': '81-99', 'callback_data': "davinci_anketAge2_81-99_account"},
            ],
            [{'text': but_back, 'callback_data': "davinci_account"}]
        ]
    elif page['page'] == 'editSex': # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –ø–æ–ª
        m[0]['text'] = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª"
        m[0]['but'] = [
            [
                {'text': await davinci_sex_my(1), 'callback_data': "davinci_anketSex_1_account"},
                {'text': await davinci_sex_my(2), 'callback_data': "davinci_anketSex_2_account"}
            ],
            [{'text': but_back, 'callback_data': "davinci_account"}]
        ]
    elif page['page'] == 'editSearch': # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –∫–∞–∫–∏–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        m[0]['text'] = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω:"
        m[0]['but'] = [
            [
                {'text': await davinci_search(1), 'callback_data': "davinci_anketSearch_1_account"},
                {'text': await davinci_search(3), 'callback_data': "davinci_anketSearch_3_account"},
                {'text': await davinci_search(2), 'callback_data': "davinci_anketSearch_2_account"},
            ], [
                {'text': but_back, 'callback_data': "davinci_account"}
            ]
        ]
    elif page['page'] == 'editName': # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –∏–º—è
        m[0]['text'] = "–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?"
        m[0]['but'] = []
        user = await user_load(tg, state)
        m[0]['but'].append([{'text': user['davinci_anket_name'], 'callback_data': "davinci_account"}])
        if user['first_name'] and user['first_name'] != user['davinci_anket_name']:
            m[0]['but'].append([{'text': user['first_name'], 'callback_data': "davinci_anketNameFirstname_account"}])
        m[0]['but'].append([{'text': but_back, 'callback_data': "davinci_account"}])
    elif page['page'] == 'editCity': # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –≥–æ—Ä–æ–¥
        m[0]['text'] = "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?"
        m[0]['but'] = []
        m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_account"}]]
    elif page['page'] == 'editAboutMe': # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ–± –º–Ω–µ
        m[0]['text'] = '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏, —á–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è'
        m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_account"}]]
    elif page['page'] == 'editGallary': # –≥–∞–ª–µ—Ä–µ—è
        async with state.proxy() as data:
            if 'davinci_gallary' not in data:
                data['davinci_gallary'] = []
            if not data['davinci_gallary']:
                m[0]['text'] = "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≤–∏–¥–µ–æ üëç (–¥–æ 15 —Å–µ–∫), —ç—Ç–æ –∑–∞–º–µ–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ"
            else:
                file_type = '–§–æ—Ç–æ' if 'photo' in tg else '–í–∏–¥–µ–æ'
                m[0]['text'] = f"{file_type} –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚Äì {len(data['davinci_gallary'])} –∏–∑ 3.\n\n–ï—â–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ?"
                m[0]['but'] = [[{'text': "–≠—Ç–æ –≤—Å–µ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", 'callback_data': "davinci_GallarySave_account"}]]
    elif page['page'] == 'account':
        user = await user_load(tg, state)
        m[0] = await anket(user)
        m[1] = {}
        m[1]['text'] = "‚¨ÜÔ∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ ‚¨ÜÔ∏è"
        m[1]['text'] += f"\n\nü§î –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å: {await davinci_search(user['davinci_anket_search'])}"
        # m[1]['text'] += f"\nüíï –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å:"
        m[1]['but'] = [
            [
                {'text': "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", 'callback_data': "davinci_editName"},
                {'text': "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª", 'callback_data': "davinci_editSex"},
            ],
            [
                {'text': "–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", 'callback_data': "davinci_editAge"},
                {'text': '–ò–∑–º–µ–Ω–∏—Ç—å "–æ —Å–µ–±–µ"', 'callback_data': "davinci_editAboutMe"},
            ],
            [
                {'text': "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", 'callback_data': "davinci_editGallary"},
                {'text': "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", 'callback_data': "davinci_editCity"},
            ],
            [
                {'text': "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–≥–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å", 'callback_data': "davinci_editSearch"},
            ],
            [{'text': but_back, 'callback_data': "davinci_go"}]
        ]
        if user['davinci_ban'] >= int(save['setting']['davinci_ban_max']):
            m[1]['text'] += f"\n\n‚ÄºÔ∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–∫—Ä—ã—Ç–∞, –Ω–∞ –≤–∞—Å –ø–æ—Å—Ç—É–ø–∏–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∞–ª–æ–±. –ò–∑–º–µ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–± –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–Ω–∫–µ—Ç—ã. –í –∞–Ω–∫–µ—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Ç–∞ –∏ –ø–æ—à–ª–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã"
    elif page['page'] == 'boost':
        date_14 = datetime.datetime.now() - datetime.timedelta(days=14) # 14 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        date_14 = date_14.strftime("%Y-%m-%d")
        cur.execute("SELECT COUNT(*) FROM users WHERE referal = 'u{}' AND date_write >= '{}'".format(tg.from_user.id, date_14))
        count_ref = cur.fetchall()[0]['count']
        count_bon = count_ref * 20 if count_ref <= 5 else 100
        m[0]['text'] = "\n–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –±–æ–ª—å—à–µ –ª–∞–π–∫–æ–≤!"
        m[0]['text'] += "\n\n–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        m[0]['text'] += f"\n–ü—Ä–∏—à–ª–æ –∑–∞ 14 –¥–Ω–µ–π: {count_ref}"
        m[0]['text'] += f"\n–ë–æ–Ω—É—Å –∫ —Å–∏–ª–µ –∞–Ω–∫–µ—Ç—ã: {count_bon}%"
        m[0]['text'] += "\n\n–ü–µ—Ä–µ—à–ª–∏ –¥—Ä—É–∑—å—è–º –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ —Å–≤–æ–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö."
        m[0]['text'] += "\n–í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ üëá"
        m[1] = {}
        m[1]['text'] = "–ë–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –î–∞–π–≤–∏–Ω—á–∏–∫üç∑ –≤ Telegram! –ù–∞–π–¥–µ—Ç –¥—Ä—É–∑–µ–π –∏–ª–∏ –¥–∞–∂–µ –ø–æ–ª–æ–≤–∏–Ω–∫—É üë´"
        m[1]['text'] += f"\nüëâ https://t.me/{save['bot']['username']}?start=u{tg.from_user.id}"
    elif page['page'] == 'coupleSkip':
        cur.execute("UPDATE davinci_message SET skip = '1' WHERE cust_id = '{}'".format(tg.from_user.id))
        page['page'] = 'rate'
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'stopCouple':
        cur.execute("UPDATE users SET davinci_couple_stop = '1' WHERE user_id = '{}'".format(tg.from_user.id))
        cur.execute("DELETE FROM davinci_message WHERE cust_id = '{}'".format(tg.from_user.id))
        async with state.proxy() as data:
            if 'user' in data:
                data['user']['davinci_couple_stop'] = 1
        answer = await send(tg, {'text': '‚úîÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π'})
        memory['mes_new'].append(answer.message_id)
        page['page'] = 'go'
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'couple':
        couple = {}
        cur.execute("SELECT * FROM davinci_message WHERE cust_id = '{}' LIMIT 1".format(tg.from_user.id))
        for row in cur.fetchall():
            couple = dict(row)
        if couple:
            customer_id = False
            customer = False
            rates = eval(couple['rate'])
            for k, v in rates.items():
                customer_id = k
                rate = v
                break
            if customer_id:
                cur.execute("SELECT * FROM users WHERE user_id = '{}' AND ban < {}".format(customer_id, save['setting']['ban_limit']))
                for row in cur.fetchall():
                    customer = dict(row)
            if customer:
                count_left = len(rates) - 1
                # —á–æ–± –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ç–æ–º —á—Ç–æ –≤–∞—Å –ª–∞–π–∫–Ω—É–ª–∏
                cur.execute("UPDATE davinci_message SET skip = 1 WHERE id = '{}'".format(couple['id']))
                async with state.proxy() as data:
                    if 'DV_cust_rate' in data:
                        data.pop('DV_cust_rate')
                    data['DV_cust_couple'] = customer
                m[0]['text'] = "‚ú®üë´‚ú®"
                m[1] = await anket(customer)
                i = 2
                if 'mes' in rate:
                    if rate['mes']:
                        if 'file_id' in rate['mes']:
                            m[i] = {}
                            m[i][rate['mes']['file_type']] = rate['mes']['file_id']
                            m[i]['text'] = f"–í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—è üíå"
                            if 'text' in rate['mes']:
                                m[i]['text'] += f": {m[i]['text']}"
                            i += 1
                        elif 'text' in rate['mes']:
                            m[1]['text'] += f"\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—è üíå: {rate['mes']['text']}"
                            r_m = rate['mes']
                check_couple = False
                if 'couple' in rate: # —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏, –ª–∞–π–∫–∞–ª –ª–∏ —è, —Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —á—Ç–æ –º–Ω–µ –ø—Ä–∏—Å–ª–∞–ª —â–∞—Å –ª–∞–π–∫, –∫–æ—Ç–æ—Ä—ã–π –º–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç
                    check_couple = True
                if not check_couple:
                    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ª–∞–π–∫–∞–ª –ª–∏ —è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª –ª–∞–π–∫. –ï—Å–ª–∏ –ª–∞–π–∫–∞–ª —Ç–æ –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–∞—Ä–∞
                    cur.execute("SELECT * FROM users WHERE user_id = '{}' AND davinci_rate_list NOT LIKE '%|{}-1%' ".format(customer['id'], tg.from_user.id))
                    for row in cur.fetchall():
                        check_couple = dict(row)
                if check_couple: # –ï—Å–ª–∏ –ø–∞—Ä–∞
                    m[i] = {'text': "–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è üëâ "}
                    if customer['username']:
                        m[i]['text'] += f"<a href='https://t.me/{customer['username']}'>{customer['davinci_anket_name']}</a>"
                    else:
                        m[i]['text'] += f"<a href='tg://user?id={customer['user_id']}'>{customer['davinci_anket_name']}</a>"
                    m[i]['but'] = [[{'text': "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", 'callback_data': f"davinci_complaint_{customer['user_id']}"}]]
                    if count_left:
                        m[0]['menu'] = [["–í –º–µ–Ω—é ‚§¥Ô∏è", "–î–∞–ª—å—à–µ ‚û°Ô∏è"]]
                    else:
                        m[0]['menu'] = [["–í –º–µ–Ω—é ‚§¥Ô∏è"]]
                    await davinci_couple_delete(tg, customer)
                else:
                    m[1]['text'] = f"–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞\n\n{m[1]['text']}"
                    m[0]['menu'] = [["‚ù§Ô∏è", "üíå/üìπ", "üëé", "üí§"]]
            else:
                page['page'] = 'rate'
                memory['dop'] = await davinci_dop(tg, state, page, error)
        else:
            page['page'] = 'rate'
            memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'rate':
        user = await user_load(tg, state)
        # –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞:
        if not user['davinci_anket_active']:
            if not user['davinci_anket_sex']:
                page['page'] = 'anketSex'
                memory['dop'] = await davinci_dop(tg, state, page, error)
            elif not user['davinci_anket_age']:
                page['page'] = 'anketAge'
                memory['dop'] = await davinci_dop(tg, state, page, error)
            elif not user['davinci_anket_search']:
                page['page'] = 'anketSearch'
                memory['dop'] = await davinci_dop(tg, state, page, error)
            elif not user['davinci_anket_name']:
                page['page'] = 'anketName'
                memory['dop'] = await davinci_dop(tg, state, page, error)
            elif not user['davinci_anket_city']:
                page['page'] = 'anketCity'
                memory['dop'] = await davinci_dop(tg, state, page, error)
            elif not user['davinci_anket_aboutme']:
                page['page'] = 'anketAboutMe'
                memory['dop'] = await davinci_dop(tg, state, page, error)
            elif not eval(user['davinci_anket_gallary']):
                page['page'] = 'anketGallary'
                memory['dop'] = await davinci_dop(tg, state, page, error)
        else:
            now = int(time.time())
            async with state.proxy() as data:
                if user['davinci_couple_stop']:
                    data['user']['davinci_couple_stop'] = 0
                    cur.execute("UPDATE users SET davinci_couple_stop = 0 WHERE user_id = '{}'".format(tg.from_user.id))
                play = True
                date_now = datetime.date.today()
                if 'count_rate' not in data:
                    data['count_rate'] = {date_now: 0}
                elif date_now not in data['count_rate']:
                    data['count_rate'] = {date_now: 0}
                count_rate_now = data['count_rate'][date_now]
                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –û–ü
                if count_rate_now >= int(save['setting']['davinci_anket_before_op']):
                    if not await module.op.op_check_FULL(tg, state, page, level=1):
                        play = False
                if 'advFlyer' in modules:
                    if save['advFlyer']:
                        advFlyer = save['advFlyer']
                        if save['setting']['advFlyer_token']:
                            if count_rate_now >= int(save['setting']['davinci_anket_before_flyer']):
                                if not await advFlyer.check(tg.from_user.id):
                                    return
            if play:
                # –µ—Å—Ç—å –ª–∏ –µ—Å—Ç—å –ø–∞—Ä—ã —Å–æ –º–Ω–æ–π, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä—É
                count = False
                cur.execute("SELECT * FROM davinci_message WHERE cust_id = '{}' LIMIT 1".format(tg.from_user.id))
                for row in cur.fetchall():
                    count = dict(row)
                if count:
                    if not count['skip']:
                        cur.execute("UPDATE davinci_message SET skip = 1 WHERE cust_id = '{}'".format(tg.from_user.id))
                    page['page'] = 'couple'
                    memory['dop'] = await davinci_dop(tg, state, page, error)
                else:
                    # –µ—Å–ª –Ω–µ –í–ò–ü —Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –º–æ–∂–µ–º –Ω–µ –±–æ–ª–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª –≤–∞ —Ä–∞–∑
                    if count_rate_now >= int(save['setting']['davinci_anket_max']) and int(user['pay_time']) <= now:
                        page['page'] = 'payVip'
                        memory['dop'] = await davinci_dop(tg, state, page, error)
                    else:
                        # –Ω–∞ 3 —Ä–∞–∑ –ø–æ–∫–∞—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        count_rate_now += 1
                        async with state.proxy() as data:
                            data['count_rate'][date_now] = count_rate_now
                        if count_rate_now == 3:
                            page['page'] = 'warnings'
                            memory['dop'] = await davinci_dop(tg, state, page, error)
                        else:
                            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
                            # ============= –û–ß–ï–†–ï–î–ù–û–°–¢–¨ –í–´–î–ê–ß–ò –Æ–ó–ï–†–û–í =============
                            # –≤–æ–∑—Ä–∞—Å—Ç
                            if user['davinci_anket_sex'] == 1 and user['davinci_anket_search'] == 2: # –ø–∞—Ä–µ–Ω—å –∏—â–µ—Ç –¥–µ–≤—É—à–∫—É
                                sql_age = f"AND davinci_anket_age <= {user['davinci_anket_sex']} AND davinci_anket_age >= {user['davinci_anket_sex'] - 3}"
                                sql_age_order = "davinci_anket_age DESC, "
                            elif user['davinci_anket_sex'] == 2 and user['davinci_anket_search'] == 1: # –¥–µ–≤—É—à–∫–∞ –∏—â–µ—Ç –ø–∞—Ä–Ω—è
                                sql_age = f"AND davinci_anket_age >= {user['davinci_anket_sex']} AND davinci_anket_age <= {user['davinci_anket_sex'] + 3}"
                                sql_age_order = "davinci_anket_age DESC, "
                            else:
                                sql_age = f"AND davinci_anket_age >= {user['davinci_anket_sex'] - 2} AND davinci_anket_age <= {user['davinci_anket_sex'] + 2}"
                                sql_age_order = ""
                            # –≤–∞—Ä–∏–∞–Ω—Ç—ã:
                            sql_where = []
                            sql_where.append(f"AND davinci_anket_city = '{user['davinci_anket_city']}' AND pay_time >= {now} {sql_age} ORDER BY block ASC, {sql_age_order} pay_time DESC, id DESC") # VIP
                            sql_where.append(f"AND davinci_anket_city = '{user['davinci_anket_city']}' {sql_age} ORDER BY block ASC, {sql_age_order} id DESC") # –≥–æ—Ä–æ–¥
                            if user['davinci_anket_city'] != '–º–æ—Å–∫–≤–∞':
                                sql_where.append(f"AND davinci_anket_city = '–º–æ—Å–∫–≤–∞' AND pay_time >= {now} {sql_age} ORDER BY block ASC, {sql_age_order} pay_time DESC, id DESC") # VIP
                                sql_where.append(f"AND davinci_anket_city = '–º–æ—Å–∫–≤–∞' {sql_age} ORDER BY block ASC, {sql_age_order} id DESC") # –≥–æ—Ä–æ–¥
                            sql_where.append(f"AND pay_time >= {now} {sql_age} ORDER BY block ASC, {sql_age_order} pay_time DESC, id DESC") # VIP
                            sql_where.append(f"{sql_age} ORDER BY block ASC, {sql_age_order} id DESC") # –≤–æ–∑—Ä–∞—Å—Ç
                            sql_where.append(f" ORDER BY block ASC, id DESC") # –ª—é–±–æ–π –≥–æ—Ä–æ–¥ –∏ –≤–æ–∑—Ä–∞—Å—Ç
                            # –ø–æ–ª
                            sql_sex = f" AND (davinci_anket_search = 3 or davinci_anket_search = {user['davinci_anket_sex']})"
                            if user['davinci_anket_search'] <= 2:
                                sql_sex = f"AND davinci_anket_sex = {user['davinci_anket_search']}"
                            # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
                            customer = {}
                            for one in sql_where:
                                sql_main = f"user_id != '{tg.from_user.id}' AND davinci_rate_list NOT LIKE '%|{tg.from_user.id}-%' AND davinci_anket_active = 1"
                                sql_main += f"AND davinci_ban < {int(save['setting']['davinci_ban_max'])} AND ban < {save['setting']['ban_limit']}"
                                cur.execute("SELECT * FROM users WHERE {} {} {} LIMIT 1".format(sql_main, sql_sex, one))
                                for row in cur.fetchall():
                                    customer = dict(row)
                                if customer:
                                    break
                            if customer:
                                i = 0
                                async with state.proxy() as data:
                                    data['DV_cust_rate'] = customer
                                    if 'DV_cust_couple' in data:
                                        data.pop('DV_cust_couple')
                                    # if 'page' not in data:
                                    #     data['page'] = ''
                                    # check_page = data['page']
                                    # print(f"=!!!= {check_page}")
                                    # if check_page not in ['davinci_rate', 'davinci_couple']:
                                    m[0]['text'] = "‚ú®üîç"
                                    m[0]['menu'] = [["‚ù§Ô∏è", "üíå/üìπ", "‚ö†Ô∏è", "üëé", "üí§"]]
                                    i += 1
                                    m[i] = await anket(customer)
                                    ############ –º–æ–¥—É–ª—å –ü–û–ö–ê–ó–´ ############
                                    if 'showing' in modules:
                                        res = await module.showing.showing_show(tg.from_user, timer=2, sending=False)
                                        if res:
                                            m[len(m)] = res
                                            module_showing = True
                                    ############ –º–æ–¥—É–ª—å –ü–û–ö–ê–ó–´ ############
                                    ############ –º–æ–¥—É–ª—å advGramads ############
                                    # —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —É–∂–µ —Ä–µ–∫–ª–∞–º—É —Å –º–æ–¥—É–ª—è showing
                                    if not 'module_showing' in locals():
                                        if 'advGramads' in modules:
                                            if save['setting']['advGramads_token']:
                                                await module.advGramads.advGramads_advertise(tg.from_user.id)
                                    ############ –º–æ–¥—É–ª—å advGramads ############
                            else:
                                m[0]['text'] = "üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ..."
                                m[0]['menu'] = save['menu']['button']
                                # m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_go"}]]
    elif page['page'] in ['ratePlus', 'rateMinus']:
        page = await davinci_rate(tg, state, page)
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'sendMes':
        customer = {}
        async with state.proxy() as data:
            if 'DV_cust_rate' in data:
                customer = data['DV_cust_rate']
            elif 'DV_cust_couple' in data:
                customer = data['DV_cust_couple']
        if customer:
            m[0]['text'] = "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–∏–ª–∏ –∑–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ(–¥–æ 15—Å–µ–∫)"
            m[0]['but'] = [[{'text': "–û—Ç–º–µ–Ω–∏—Ç—å", 'callback_data': "davinci_close"}]]
        else:
            page['page'] = 'go'
            memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'warnings':
        user = await user_load(tg, state)
        m[0]['text'] = user['davinci_anket_name'] + ", —ç—Ç–æ —Å–æ–≤–µ—Ç –æ—Ç –î–∞–π–≤–∏–Ω—á–∏–∫–∞ "
        m[0]['text'] += "\n–ö–∞–∫ –Ω–µ —Å—Ç–∞—Ç—å –∂–µ—Ä—Ç–≤–æ–π –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤?"
        m[0]['text'] += "\n–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:"
        m[0]['text'] += "\n\n- —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –ª–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–Ω—Ç–∏–º–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. –ò—Ö –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Ç–µ–±—è: —à–∞–Ω—Ç–∞–∂–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—ã–º–æ–≥–∞—Ç—å –¥–µ–Ω—å–≥–∏."
        m[0]['text'] += "\n\n- —Ç–µ–±–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫—É, –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ / –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å). "
        m[0]['text'] += "\n\n- —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä –±–∏–ª–µ—Ç—ã –≤ –∫–∏–Ω–æ/—Ç–µ–∞—Ç—Ä."
        m[0]['text'] += "\n\n- —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç –æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–Ω–µ–≥."
        m[0]['text'] += "\n\n- —Ç–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –≤—ã–≥–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É, –ø–ª–∞—Ç–Ω—ã–µ, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏ –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏."
        m[0]['menu'] = [["üëå –ü–æ–Ω—è—Ç–Ω–æ"]] # m[0]['but'] = [[{'text': "üëå –ü–æ–Ω—è—Ç–Ω–æ", 'callback_data': "davinci_rate"}]]
    elif page['page'] == 'payVip':
        m[0]['text'] = "‚ö†Ô∏è –í –¥–µ–Ω—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ –±–æ–ª–µ–µ "
        m[0]['text'] += f"{save['setting']['davinci_anket_max']} {await words(int(save['setting']['davinci_anket_max']), ['–∞–Ω–∫–µ—Ç—ã', '–∞–Ω–∫–µ—Ç', '–∞–Ω–∫–µ—Ç'])}"
        m[0]['text'] += "\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ VIP –∞–∫–∫–∞—É–Ω—Ç"
        m[0]['menu'] = [["–ö—É–ø–∏—Ç—å VIP üëë"], ["–í –º–µ–Ω—é ‚§¥Ô∏è"]] # m[0]['but'] = [[{'text': "–ö—É–ø–∏—Ç—å VIP üëë", 'callback_data': "payTime_payList"}]]
    elif page['page'] == 'adminMenu' and tg.from_user.id in save['admins']:
        m[0]['text'] = "–ú–µ–Ω—é –æ—Ü–µ–Ω–∫–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏:"
        cur.execute("SELECT COUNT(*) FROM users WHERE davinci_anket_search > 0 AND davinci_anket_name != '' AND davinci_anket_gallary != '[]' AND davinci_anket_sex > 0  and davinci_check = 0  ")
        count_new = cur.fetchall()[0]['count']
        cur.execute("SELECT COUNT(*) FROM users WHERE davinci_ban > 0 AND ban < {}".format(save['setting']['ban_limit']))
        count_ban = cur.fetchall()[0]['count']
        cur.execute("SELECT COUNT(*) FROM users WHERE davinci_ban >= '{}' AND ban < {}".format(save['setting']['davinci_ban_max'], save['setting']['ban_limit']))
        count_ban_full = cur.fetchall()[0]['count']
        davinci_create_anket = "üéö –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚ûñ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ üî∏" if int(save['setting']['davinci_create_anket']) else "üéö –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚ûñ –ø—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ üîπ"
        m[0]['but'] = []
        m[0]['but'].append([{'text': "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏", 'callback_data': "davinci_adminStat"}])
        m[0]['but'].append([{'text': f"‚ö†Ô∏è –ñ–∞–ª–æ–±—ã ({count_ban} / {count_ban_full})", 'callback_data': "davinci_adminAnketEdit_ban"}])
        m[0]['but'].append([{'text': f"ü§î –ù–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã ({count_new})", 'callback_data': "davinci_adminAnketEdit_new"}])
        m[0]['but'].append([{'text': davinci_create_anket, 'callback_data': "davinci_adminCreateAnket"}])
        m[0]['but'].append([{'text': f"üåÜ –ê–Ω–∫–µ—Ç—ã –¥–æ –û–ü ({save['setting']['davinci_anket_before_op']})", 'callback_data': "davinci_adminAnketBeforeOp"}])
        if 'advFlyer' in modules:
            m[0]['but'].append([{'text': f"üåÜ –ê–Ω–∫–µ—Ç—ã –¥–æ –û–ü Flyer ({save['setting']['davinci_anket_before_flyer']})", 'callback_data': "davinci_adminAnketBeforeFlyer_davinci_adminMenu"}])
        m[0]['but'].append([{'text': f"üåÜ –ê–Ω–∫–µ—Ç –≤ –¥–µ–Ω—å ({save['setting']['davinci_anket_max']})", 'callback_data': "davinci_adminAnketMax"}])
        m[0]['but'].append([{'text': "‚õîÔ∏è –°—Ç–æ–ø —Å–ª–æ–≤–∞", 'callback_data': "davinci_adminStop"}])
        m[0]['but'].append([{'text': but_back, 'callback_data': "start_start"}])
    elif page['page'] == 'adminAnketEdit':
        customer = {}
        if page['param'] == 'new':
            sql = "davinci_anket_active != 0 AND davinci_check = 0 ORDER BY id DESC"
        elif page['param'] == 'ban':
            sql = f"davinci_anket_active != 0 AND davinci_ban > 0 AND ban < {save['setting']['ban_limit']} ORDER BY davinci_ban DESC"
        cur.execute("SELECT * FROM users WHERE {} LIMIT 1".format(sql))
        for row in cur.fetchall():
            customer = dict(row)
        if customer:
            m[0] = await anket(customer)
            m[1] = {}
            name = (customer['first_name'] + ' ' + customer['last_name']).strip()
            m[1]['text'] = f"üë§ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n<a href='tg://user?id={customer['user_id']}'>{customer['user_id']} {name}</a>"
            if customer['username']:
                m[1]['text'] += f"\n@{customer['username']}"
            if customer['davinci_ban_list']:
                m[1]['text'] += "\n\n–ñ–∞–ª–æ–±—ã –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º:"
                print(customer['davinci_ban_list'])
                print(customer['davinci_ban_list'].split('|'))
                for i in customer['davinci_ban_list'].split('|'):
                    if i:
                        m[1]['text'] += f"\n- {await davinci_complaint(i)}"
            fb_next = "‚û°Ô∏è –û—á–∏—Å—Ç–∏—Ç—å –∂–∞–ª–æ–±—ã" if customer['davinci_ban'] else "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞"
            m[1]['but'] = [
                [
                    {'text': fb_next, 'callback_data': f"davinci_adminAnketEdit_{page['param']}_{customer['user_id']}_ok"},
                    {'text': "‚ùå –í –±–∞–Ω", 'callback_data': f"davinci_adminAnketEdit_{page['param']}_{customer['user_id']}_ban"},
                ],
                [{'text': but_back, 'callback_data': "davinci_adminMenu"}]
            ]
        else:
            m[0]['text'] = 'üö´ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç' if page['param'] == 'new' else '‚õîÔ∏è –ñ–∞–ª–æ–±—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
            m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_adminMenu"}]]
    elif page['page'] == 'adminStop':
        m[0]['text'] = "‚Äç‚õîÔ∏è –°—Ç–æ–ø —Å–ª–æ–≤–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç –≤–≤–µ–¥–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, —Ç–æ —é–∑–µ—Ä —Å—Ä–∞–∑—É –ø–æ–ø–∞–¥–µ—Ç –≤ –±–∞–Ω –±–æ—Ç–∞)"
        m[0]['text'] += "\n\n–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤:"
        if save['stopWords']:
            cur.execute("SELECT * FROM stopWords")
            for row in cur.fetchall():
                m[0]['text'] += f"\n{row['word']} /delete_{row['id']}"
        else:
            m[0]['text'] += f"\nüö´ –°–ª–æ–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        m[0]['text'] += "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ, —á—Ç–æ–± –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å—Ç–æ–ø —Å–ª–æ–≤–æ"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_adminMenu"}]]
    elif page['page'] == 'adminAnketBeforeOp':
        m[0]['text'] = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∫–µ—Ç –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ –ø–æ–∫–∞–∑–∞ –û–ü: {save['setting']['davinci_anket_before_op']}"
        m[0]['text'] += "\n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_adminMenu"}]]
    elif page['page'] == 'adminAnketBeforeFlyer':
        m[0]['text'] = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∫–µ—Ç –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ –ø–æ–∫–∞–∑–∞ –û–ü –∏–∑ —Å–∏—Å—Ç–µ–º—ã Flyer: {save['setting']['davinci_anket_before_flyer']}"
        m[0]['text'] += "\n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_adminMenu"}]]
    elif page['page'] == 'adminAnketMax':
        m[0]['text'] = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∫–µ—Ç –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ–µ—Ç VIP —Å—Ç–∞—Ç—É—Å: {save['setting']['davinci_anket_max']}"
        m[0]['text'] += "\n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_adminMenu"}]]
    elif page['page'] == 'rateComp':
        async with state.proxy() as data:
            couple = False
            if 'DV_cust_rate' in data:
                customer = data['DV_cust_rate']
            if customer:
                date_write = str(datetime.date.today())
                if 'user_davinci_ban_limit' not in data:
                    data['davinci_ban_limit'] = {date_write: 1}
                elif date_write in data['davinci_ban_limit']:
                    data['davinci_ban_limit'][date_write] += 1
                else:
                    data['davinci_ban_limit'] = {date_write: 1}
                if data['davinci_ban_limit'][date_write] <= int(save['setting']['davinci_ban_limit']):
                    davinci_ban_list = f"{customer['davinci_ban_list']}|9" if customer['davinci_ban_list'] else '9'
                    cur.execute("UPDATE users SET davinci_ban_list = '{}', davinci_ban = davinci_ban + 1 WHERE id = '{}'".format(davinci_ban_list, customer['id']))
        page['page'] = 'rateMinus'
        memory['dop'] = await davinci_dop(tg, state, page, error)
    elif page['page'] == 'xx':
        m[0]['text'] = "–¢–µ–∫—Å—Ç"
        m[0]['but'] = [[{'text': but_back, 'callback_data': "davinci_go"}]]
        answer = await send(tg, {'text': '—Ç–µ–∫—Å—Ç'})
        memory['mes_new'].append(answer.message_id)
        page['page'] = 'yy'
        memory['dop'] = await davinci_dop(tg, state, page, error)
    if error_mes and 'text' in m[0]:
        m[0]['text'] = f'{error_mes}\n\n{m[0]["text"]}'
    if not memory['dop']:
        await memory_finish(tg, state, memory, page, m, dop=True)
    return page # —á—Ç–æ–± –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–∂–∞ –∑–∞–ø–∏—Å–∏ page

async def davinci_rate(tg, state, page, mes=False):
    user = await user_load(tg, state)
    customer = {}
    async with state.proxy() as data:
        couple = False
        if 'DV_cust_rate' in data:
            customer = data['DV_cust_rate']
            data.pop('DV_cust_rate')
        elif 'DV_cust_couple' in data:
            customer = data['DV_cust_couple']
            data.pop('DV_cust_couple')
            couple = True
    if customer:
        send_rate = True
        # –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –º–æ–µ–≥–æ –ª–∞–π–∫–∞ —É —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
        customer_check = False
        cur.execute("SELECT * FROM users WHERE user_id = '{}' AND davinci_rate_list NOT LIKE '%|{}-%' ".format(customer['user_id'], tg.from_user.id))
        for row in cur.fetchall():
            customer_check = True
        if customer_check:
            if page['page'] in ['ratePlus', 'sendMes']: # —Ç—ã –ª–∞–π–∫–Ω—É–ª
                rate = {'user_id': user['user_id'], 'sex': user['davinci_anket_sex'], 'like': True} # , "user": user
                if mes:
                    rate['mes'] = mes
                # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ª–∞–π–∫–∞–ª –ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ç–µ–±—è
                if f"|{customer['user_id']}-" not in user['davinci_rate_list']:
                    user = await user_load(tg, state, load=True)
                if f"|{customer['user_id']}-" in user['davinci_rate_list']:
                    if f"|{customer['user_id']}-1" in user['davinci_rate_list']:
                        rate['couple'] = True
                # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∞–π–∫ –≤ —Ç–∞–±–ª–∏—Ü—É davinci_message
                await davinci_rate_save(tg, state, customer, rate)
                # —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É
                mes = {}
                if 'couple' in rate:
                    mes['text'] = "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;) –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è üëâ "
                    if customer['username']:
                        mes['text'] += f"<a href='https://t.me/{customer['username']}'>{customer['davinci_anket_name']}</a>"
                    else:
                        mes['text'] += f"<a href='tg://user?id={customer['user_id']}'>{customer['davinci_anket_name']}</a>"
                    mes['but'] = [[{'text': "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", 'callback_data': f"davinci_complaint_{customer['user_id']}"}]]
                else:
                    mes['text'] = '–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞'
                await send(tg, mes)
                r_us = 1
            else: # —Ç—ã –¥–∏–∑–ª–∞–π–∫–Ω—É–ª
                r_us = 0
            new_list = f"{customer['davinci_rate_list']}|{tg.from_user.id}-{r_us}"
            cur.execute("UPDATE users SET davinci_rate_list = '{}' WHERE id = '{}'".format(new_list, customer['id']))
            if couple: # –µ—Å–ª–∏ –±—ã–ª–∞ –ø–∞—Ä–∞ —Ç–æ —É–¥–∞–ª—è–µ–º –ª–∞–π–∫ —Ç–µ–±–µ –æ—Ç —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –ë–î davinci_message
                await davinci_couple_delete(tg, customer)
        page['page'] = 'rate'
    else:
        page['page'] = 'go'
    return page


async def davinci_rate_save(tg, state, customer, rate):
    if not customer['davinci_couple_stop']: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª, —á—Ç–æ –µ–º—É –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å
        # if 'date_write' in rate['user']:
        #     rate['user'].pop("date_write")
        # if type(rate['user']['davinci_anket_gallary']) == str:
        #     rate['user']['davinci_anket_gallary'] = eval(rate['user']['davinci_anket_gallary'])
        send_rate = True
        user = await user_load(tg, state)
        if f"|{tg.from_user.id}-" not in user['davinci_rate_list']:
            user = await user_load(tg, state, load=True)
        if f"|{tg.from_user.id}-" in user['davinci_rate_list']:
            if f"|{tg.from_user.id}-1" in user['davinci_rate_list']:
                rate['couple'] = True
            else: # –µ—Å–ª–∏ -0
                send_rate = False
        if send_rate:
            short_cust = {'davinci_anket_sex': customer['davinci_anket_sex']}
            customer_str = str(short_cust).replace("'", '"')
            now = int(time.time())
            davinci_message = {}
            cur.execute("SELECT * FROM davinci_message WHERE cust_id = '{}'".format(customer['user_id']))
            for row in cur.fetchall():
                davinci_message = dict(row)
            if davinci_message:
                new_rate = eval(davinci_message['rate'])
                save_user_id = rate['user_id']
                rate.pop('user_id')
                new_rate[save_user_id] = rate
                new_rate = str(new_rate).replace("'", '"')
                cur.execute("UPDATE davinci_message SET date_save = '{}', rate = '{}', skip = 0 WHERE id = '{}'".format(now, new_rate, davinci_message['id']))
            else:
                rate = str({rate['user_id']: rate}).replace("'", '"')
                cur.execute("INSERT INTO davinci_message (cust_id, cust, date_save, rate, skip) VALUES (%s, %s, %s, %s, 0)",[customer['user_id'], customer_str, now, rate])

# –µ—Å–ª–∏ –∫—Ç–æ —Ç–æ —Ç–µ–±—è –ª–∞–π–Ω–∫—É–ª, –∏ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–±–µ –ø–∞—Ä—É, —Ç–æ –ø–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –º—ã —É–¥–∞–ª—è–µ–º –≤ —Ç–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ –≤ –±–¥ davinci_message –¥–∞–Ω–Ω—ã–π –ª–∞–π–∫ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
async def davinci_couple_delete(tg, customer):
    cur.execute("SELECT * FROM davinci_message WHERE cust_id = '{}' LIMIT 1".format(tg.from_user.id))
    for row in cur.fetchall():
        my_rate_list = eval(row['rate'])
        if customer['user_id'] in my_rate_list:
            my_rate_list.pop(customer['user_id'])
            if len(my_rate_list):
                my_rate_list = str(my_rate_list).replace("'", '"')
                cur.execute("UPDATE davinci_message SET rate = '{}' WHERE id = '{}'".format(my_rate_list, row['id']))
            else:
                cur.execute("DELETE FROM davinci_message WHERE id = '{}'".format(row['id']))


async def anket(user):  # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ
    save = await saver()
    mes = {'text': ''}
    mes['media'] = []
    if type(user['davinci_anket_gallary']) != list:
        user['davinci_anket_gallary'] = eval(user['davinci_anket_gallary'])
    mes['media'] = user['davinci_anket_gallary']
    mes['text'] += f"{await davinci_sex_my(user['davinci_anket_sex'], only_smile=True)} <b>{user['davinci_anket_name']}</b>"
    if user['davinci_anket_age']:
        mes['text'] += f", {user['davinci_anket_age']}"
    if user['davinci_anket_city']:
        mes['text'] += f", {user['davinci_anket_city'].title()}"
    if user['davinci_anket_aboutme']:
        mes['text'] += f" - {user['davinci_anket_aboutme'].strip()}"
    return mes

# –µ—Å–ª–∏ —é–∑–µ—Ä –±–ª–æ—á–∏—Ç –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –∂–¥—É—â–∏–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ davinci_message
async def davinci_delete(user_id):
    cur.execute("DELETE FROM davinci_message WHERE cust_id = '{}'".format(user_id))

# ============= –º–æ–¥—É–ª—å alertStart =============
# ============= –º–æ–¥—É–ª—å alertStart =============
# ============= –º–æ–¥—É–ª—å alertStart =============
async def davinci_alertStart(tg, state, action): # –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è alertStart –¥–ª—è davinci
    user = await user_load(tg, state)
    if action == 'check':  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∏ –ª–∏ –∞–Ω–∫–µ—Ç—É
        if not user['davinci_anket_active']:
            return True
        else:
            return False
    # elif action == 'message':  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–Ω–∫–µ—Ç—ã
    #     page = {'module': 'davinci', 'page': ''}
    #     memory = {}
    #     m = {}
    #     send_op = False
    #     if not user['davinci_anket_name']:
    #         page['page'] = 'anketName'
    #         memory['dop'] = await davinci_dop(tg, state, page)
    #     elif not user['davinci_anket_gallary']:
    #         page['page'] = 'anketGallary'
    #         memory['dop'] = await davinci_dop(tg, state, page)
    #     elif not user['davinci_anket_sex']:
    #         page['page'] = 'anketSex'
    #         memory['dop'] = await davinci_dop(tg, state, page)
    #     elif not user['davinci_anket_search']:
    #         page['page'] = 'anketSearch'
    #         memory['dop'] = await davinci_dop(tg, state, page)
    #     else:
    #         send_op = True
    #     if page['page']:
    #         await memory_finish(tg, state, memory, page, m)
    #     return send_op
